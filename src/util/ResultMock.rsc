module util::ResultMock

lrel[loc, list[str], lrel[loc, list[str]]] getSmallSqlDuplication() {
	return [
			  <|java+method:///smallsql/database/ExpressionArithmetic/getInt()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","\n  ----  \n","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","\n  ----  \n"],[
			    <|java+method:///smallsql/database/ExpressionArithmetic/getLong()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:"]>,
			    <|java+method:///smallsql/database/ExpressionArithmetic/getLong()|,["case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"]>,
			    <|java+method:///smallsql/database/ExpressionArithmetic/getDouble()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:"]>,
			    <|java+method:///smallsql/database/ExpressionArithmetic/getDouble()|,["case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"]>,
			    <|java+method:///smallsql/database/ExpressionArithmetic/getFloat()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:"]>,
			    <|java+method:///smallsql/database/ExpressionArithmetic/getFloat()|,["case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"]>
			  ]>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getObject()|,["if(isNull()) return null;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","\n  ----  \n","case SQLTokenizer.LONGVARBINARY:","return getBytes();","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","return new DateTime( getLong(), dataType );","case SQLTokenizer.UNIQUEIDENTIFIER:","return getBytes();","\n  ----  \n"],[
			    <|java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()|,["if(isNull()) return null;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"]>,
			    <|java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()|,["case SQLTokenizer.LONGVARBINARY:","return getBytes();","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","return new DateTime( getLong(), dataType );","case SQLTokenizer.UNIQUEIDENTIFIER:","return getBytes();"]>
			  ]>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDataType()|,["case OR:","case AND:","case NOT:","case LIKE:","case ISNULL:","case ISNOTNULL:","\n  ----  \n"],[<|java+method:///smallsql/database/ExpressionArithmetic/isNull()|,["case OR:","case AND:","case NOT:","case LIKE:","case ISNULL:","case ISNOTNULL:"]>]>,
			  <|java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)|,["case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","\n  ----  \n","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","case SQLTokenizer.TINYINT:","offset++;","break;","case SQLTokenizer.SMALLINT:","\n  ----  \n","break;","case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;","\n  ----  \n"],[
			    <|java+method:///smallsql/database/StoreImpl/getBytes(int,int)|,["case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:"]>,
			    <|java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)|,["case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","case SQLTokenizer.TINYINT:","offset++;","break;","case SQLTokenizer.SMALLINT:"]>,
			    <|java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)|,["break;","case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"]>
			  ]>,
			  <|java+method:///smallsql/database/StoreImpl/getInt(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","\n  ----  \n","case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","\n  ----  \n"],[
			    <|java+method:///smallsql/database/StoreImpl/getLong(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:"]>,
			    <|java+method:///smallsql/database/StoreImpl/getLong(int,int)|,["case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:"]>,
			    <|java+method:///smallsql/database/StoreImpl/getFloat(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:"]>,
			    <|java+method:///smallsql/database/StoreImpl/getFloat(int,int)|,["case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:"]>,
			    <|java+method:///smallsql/database/StoreImpl/getDouble(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:"]>,
			    <|java+method:///smallsql/database/StoreImpl/getDouble(int,int)|,["case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:"]>
			  ]>,
			  <|java+method:///smallsql/database/StoreImpl/getLong(int,int)|,["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:","\n  ----  \n"],[
			    <|java+method:///smallsql/database/StoreImpl/getFloat(int,int)|,["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:"]>,
			    <|java+method:///smallsql/database/StoreImpl/getDouble(int,int)|,["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:"]>
			  ]>,
			  <|java+method:///smallsql/database/StoreImpl/getNumeric(int,int)|,["case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return readNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","\n  ----  \n"],[<|java+method:///smallsql/database/StoreImpl/getObject(int,int)|,["case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return readNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:"]>]>,
			  <|java+method:///smallsql/database/StoreImpl/getObject(int,int)|,["return readString();","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","return readLongString();","case SQLTokenizer.JAVA_OBJECT:","ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","ObjectInputStream ois = new ObjectInputStream(bais);","\n  ----  \n"],[<|java+method:///smallsql/database/StoreImpl/getString(int,int)|,["return readString();","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","return readLongString();","case SQLTokenizer.JAVA_OBJECT:","ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","ObjectInputStream ois = new ObjectInputStream(bais);"]>]>,
			  <|java+method:///smallsql/database/SSStatement/executeBatch()|,["if(failed == null)","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","failed.setNextException(ex);","batches.clear();","if(failed != null)","throw failed;","return result;","\n  ----  \n"],[<|java+method:///smallsql/database/SSPreparedStatement/executeBatch()|,["if(failed == null)","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","failed.setNextException(ex);","batches.clear();","if(failed != null)","throw failed;","return result;"]>]>,
			  <|java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)|,["raFile = Utils.openRaFile( file, database.isReadOnly() );","ByteBuffer buffer = ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","int magic   = buffer.getInt();","int version = buffer.getInt();","\n  ----  \n","catch(Throwable e)","if(raFile != null)","try","raFile.close();","catch(Exception e2)","DriverManager.println(e2.toString());","throw SmallSQLException.createFromException(e);","\n  ----  \n"],[
			    <|java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)|,["raFile = Utils.openRaFile( file, database.isReadOnly() );","ByteBuffer buffer = ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","int magic   = buffer.getInt();","int version = buffer.getInt();"]>,
			    <|java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)|,["catch(Throwable e)","if(raFile != null)","try","raFile.close();","catch(Exception e2)","DriverManager.println(e2.toString());","throw SmallSQLException.createFromException(e);"]>
			  ]>,
			  <|java+method:///smallsql/database/SSCallableStatement/getLong(int)|,["try","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","catch(Exception e)","throw SmallSQLException.createFromException( e );","\n  ----  \n"],[<|java+method:///smallsql/database/SSCallableStatement/getDouble(int)|,["try","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","catch(Exception e)","throw SmallSQLException.createFromException( e );"]>]>,
			  <|java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)|,["List rows = new ArrayList();","Strings tables = getTables(table);","for(int t=0; t\<tables.size(); t++)","String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i\<indexes.size(); i++)","IndexDescription index = indexes.get(i);","\n  ----  \n"],[
			    <|java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)|,["List rows = new ArrayList();","Strings tables = getTables(table);","for(int t=0; t\<tables.size(); t++)","String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i\<indexes.size(); i++)","IndexDescription index = indexes.get(i);"]>,
			    <|java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)|,["String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i\<indexes.size(); i++)","IndexDescription index = indexes.get(i);"]>
			  ]>,
			  <|java+method:///smallsql/database/ExpressionFunctionRight/getBytes()|,["final byte[] getBytes() throws Exception","if(isNull()) return null;","byte[] bytes = param1.getBytes();","int length = param2.getInt();","if(bytes.length \<= length) return bytes;","byte[] b = new byte[length];","\n  ----  \n"],[<|java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()|,["final byte[] getBytes() throws Exception","if(isNull()) return null;","byte[] bytes = param1.getBytes();","int length = param2.getInt();","if(bytes.length \<= length) return bytes;","byte[] b = new byte[length];"]>]>,
			  <|java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)|,["if(page == null)","return null;","if(i + 1 == count)","return page.getValue();","else","page = (IndexNode)page.getValue();","throw new Error();","\n  ----  \n"],[<|java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)|,["if(page == null)","return null;","if(i + 1 == count)","return page.getValue();","else","page = (IndexNode)page.getValue();","throw new Error();"]>]>,
			  <|java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)|,["break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","\n  ----  \n","break;","case SQLTokenizer.VARBINARY:","case SQLTokenizer.BINARY:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.UNIQUEIDENTIFIER:","\n  ----  \n"],[
			    <|java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)|,["break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:"]>,
			    <|java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)|,["break;","case SQLTokenizer.VARBINARY:","case SQLTokenizer.BINARY:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.UNIQUEIDENTIFIER:"]>
			  ]>,
			  <|java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return (obj == Boolean.TRUE) ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","\n  ----  \n"],[<|java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return (obj == Boolean.TRUE) ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:"]>]>,
			  <|java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","return (obj.equals(Boolean.TRUE)) ? 1 : 0;","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","case SQLTokenizer.DOUBLE:","\n  ----  \n"],[<|java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","return (obj.equals(Boolean.TRUE)) ? 1 : 0;","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","case SQLTokenizer.DOUBLE:"]>]>,
			  <|java+method:///smallsql/database/ExpressionFunctionRound/getDouble()|,["final double getDouble() throws Exception","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0)","for(int i=0; i\<places; i++)","factor *= 10;","value *= factor;","else","for(int i=0; i\>places; i--)","factor *= 10;","value /= factor;","\n  ----  \n"],[<|java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()|,["final double getDouble() throws Exception","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0)","for(int i=0; i\<places; i++)","factor *= 10;","value *= factor;","else","for(int i=0; i\>places; i--)","factor *= 10;","value /= factor;"]>]>,
			  <|java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)|,["result |= (((long)nextEntry) \<\< shift);","if(listEnum.stack\>=3)","listEnum.offsetStack[listEnum.stack] = offset;","return result;","listEnum.offsetStack[listEnum.stack] = offset+pointerSize;","offset = getPointer();","shift -= 16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack] = result;","\n  ----  \n"],[<|java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)|,["result |= (((long)nextEntry) \<\< shift);","if(listEnum.stack\>=3)","listEnum.offsetStack[listEnum.stack] = offset;","return result;","listEnum.offsetStack[listEnum.stack] = offset+pointerSize;","offset = getPointer();","shift -= 16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack] = result;"]>]>
		]; 
}
