module util::ResultMock

lrel[loc, list[str], lrel[loc, list[str]]] getSmallSqlDuplication() {
	return [
			  <|java+method:///smallsql/database/ExpressionArithmetic/getInt()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","\n\t.....\n","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","\n\t.....\n"],[
			    <|java+method:///smallsql/database/ExpressionArithmetic/getLong()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","\n\t.....\n","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","\n\t.....\n"]>,
			    <|java+method:///smallsql/database/ExpressionArithmetic/getDouble()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","\n\t.....\n","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","\n\t.....\n"]>,
			    <|java+method:///smallsql/database/ExpressionArithmetic/getFloat()|,["if(isNull()) return 0;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","\n\t.....\n","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","\n\t.....\n"]>
			  ]>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getObject()|,["if(isNull()) return null;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","\n\t.....\n","case SQLTokenizer.LONGVARBINARY:","return getBytes();","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","return new DateTime( getLong(), dataType );","case SQLTokenizer.UNIQUEIDENTIFIER:","return getBytes();","\n\t.....\n"],[<|java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()|,["if(isNull()) return null;","int dataType = getDataType();","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","\n\t.....\n","case SQLTokenizer.LONGVARBINARY:","return getBytes();","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","return new DateTime( getLong(), dataType );","case SQLTokenizer.UNIQUEIDENTIFIER:","return getBytes();","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDataType()|,["case OR:","case AND:","case NOT:","case LIKE:","case ISNULL:","case ISNOTNULL:","\n\t.....\n"],[<|java+method:///smallsql/database/ExpressionArithmetic/isNull()|,["case OR:","case AND:","case NOT:","case LIKE:","case ISNULL:","case ISNOTNULL:","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)|,["case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","\n\t.....\n","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","case SQLTokenizer.TINYINT:","offset++;","break;","case SQLTokenizer.SMALLINT:","\n\t.....\n","break;","case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;","\n\t.....\n"],[
			    <|java+method:///smallsql/database/StoreImpl/getBytes(int,int)|,["case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","\n\t.....\n"]>,
			    <|java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)|,["case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","case SQLTokenizer.TINYINT:","offset++;","break;","case SQLTokenizer.SMALLINT:","\n\t.....\n","break;","case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;","\n\t.....\n"]>
			  ]>,
			  <|java+method:///smallsql/database/StoreImpl/getInt(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","\n\t.....\n","case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","\n\t.....\n"],[
			    <|java+method:///smallsql/database/StoreImpl/getLong(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","\n\t.....\n","case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","\n\t.....\n"]>,
			    <|java+method:///smallsql/database/StoreImpl/getFloat(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","\n\t.....\n","case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","\n\t.....\n"]>,
			    <|java+method:///smallsql/database/StoreImpl/getDouble(int,int)|,["this.offset = valueOffset;","if(readBoolean()) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return readBoolean() ? 1 : 0;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","\n\t.....\n","case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","\n\t.....\n"]>
			  ]>,
			  <|java+method:///smallsql/database/StoreImpl/getLong(int,int)|,["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:","\n\t.....\n"],[
			    <|java+method:///smallsql/database/StoreImpl/getFloat(int,int)|,["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:","\n\t.....\n"]>,
			    <|java+method:///smallsql/database/StoreImpl/getDouble(int,int)|,["case SQLTokenizer.TIMESTAMP:","return readTimestamp();","case SQLTokenizer.TIME:","return readTime();","case SQLTokenizer.DATE:","return readDate();","case SQLTokenizer.SMALLDATETIME:","return readSmallDateTime();","default:","\n\t.....\n"]>
			  ]>,
			  <|java+method:///smallsql/database/StoreImpl/getNumeric(int,int)|,["case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return readNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","\n\t.....\n"],[<|java+method:///smallsql/database/StoreImpl/getObject(int,int)|,["case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return readNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/StoreImpl/getObject(int,int)|,["return readString();","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","return readLongString();","case SQLTokenizer.JAVA_OBJECT:","ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","ObjectInputStream ois = new ObjectInputStream(bais);","\n\t.....\n"],[<|java+method:///smallsql/database/StoreImpl/getString(int,int)|,["return readString();","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","return readLongString();","case SQLTokenizer.JAVA_OBJECT:","ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","ObjectInputStream ois = new ObjectInputStream(bais);","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/SSStatement/executeBatch()|,["if(failed == null)","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","failed.setNextException(ex);","batches.clear();","if(failed != null)","throw failed;","return result;","\n\t.....\n"],[<|java+method:///smallsql/database/SSPreparedStatement/executeBatch()|,["if(failed == null)","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","failed.setNextException(ex);","batches.clear();","if(failed != null)","throw failed;","return result;","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)|,["raFile = Utils.openRaFile( file, database.isReadOnly() );","ByteBuffer buffer = ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","int magic   = buffer.getInt();","int version = buffer.getInt();","\n\t.....\n","catch(Throwable e)","if(raFile != null)","try","raFile.close();","catch(Exception e2)","DriverManager.println(e2.toString());","throw SmallSQLException.createFromException(e);","\n\t.....\n"],[<|java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)|,["raFile = Utils.openRaFile( file, database.isReadOnly() );","ByteBuffer buffer = ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","int magic   = buffer.getInt();","int version = buffer.getInt();","\n\t.....\n","catch(Throwable e)","if(raFile != null)","try","raFile.close();","catch(Exception e2)","DriverManager.println(e2.toString());","throw SmallSQLException.createFromException(e);","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/SSCallableStatement/getLong(int)|,["try","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","catch(Exception e)","throw SmallSQLException.createFromException( e );","\n\t.....\n"],[<|java+method:///smallsql/database/SSCallableStatement/getDouble(int)|,["try","Expression expr = getValue(i);","wasNull = expr.isNull();","return expr.getLong();","catch(Exception e)","throw SmallSQLException.createFromException( e );","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)|,["List rows = new ArrayList();","Strings tables = getTables(table);","for(int t=0; t\<tables.size(); t++)","String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i\<indexes.size(); i++)","IndexDescription index = indexes.get(i);","\n\t.....\n"],[
			    <|java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)|,["List rows = new ArrayList();","Strings tables = getTables(table);","for(int t=0; t\<tables.size(); t++)","String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i\<indexes.size(); i++)","IndexDescription index = indexes.get(i);","\n\t.....\n"]>,
			    <|java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)|,["String tableName = tables.get(t);","TableView tab = getTableView( con, tableName);","if(!(tab instanceof Table)) continue;","IndexDescriptions indexes = ((Table)tab).indexes;","for(int i=0; i\<indexes.size(); i++)","IndexDescription index = indexes.get(i);","\n\t.....\n"]>
			  ]>,
			  <|java+method:///smallsql/database/ExpressionFunctionRight/getBytes()|,["final byte[] getBytes() throws Exception","if(isNull()) return null;","byte[] bytes = param1.getBytes();","int length = param2.getInt();","if(bytes.length \<= length) return bytes;","byte[] b = new byte[length];","\n\t.....\n"],[<|java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()|,["final byte[] getBytes() throws Exception","if(isNull()) return null;","byte[] bytes = param1.getBytes();","int length = param2.getInt();","if(bytes.length \<= length) return bytes;","byte[] b = new byte[length];","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)|,["if(page == null)","return null;","if(i + 1 == count)","return page.getValue();","else","page = (IndexNode)page.getValue();","throw new Error();","\n\t.....\n"],[<|java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)|,["if(page == null)","return null;","if(i + 1 == count)","return page.getValue();","else","page = (IndexNode)page.getValue();","throw new Error();","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)|,["break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","\n\t.....\n","break;","case SQLTokenizer.VARBINARY:","case SQLTokenizer.BINARY:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.UNIQUEIDENTIFIER:","\n\t.....\n"],[<|java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)|,["break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.DATE:","case SQLTokenizer.TIME:","case SQLTokenizer.TIMESTAMP:","case SQLTokenizer.SMALLDATETIME:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","\n\t.....\n","break;","case SQLTokenizer.VARBINARY:","case SQLTokenizer.BINARY:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.UNIQUEIDENTIFIER:","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return (obj == Boolean.TRUE) ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","\n\t.....\n"],[<|java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return (obj == Boolean.TRUE) ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","return (obj.equals(Boolean.TRUE)) ? 1 : 0;","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","case SQLTokenizer.DOUBLE:","\n\t.....\n"],[<|java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)|,["if(obj == null) return 0;","switch(dataType)","case SQLTokenizer.BIT:","return (obj.equals(Boolean.TRUE)) ? 1 : 0;","case SQLTokenizer.INT:","case SQLTokenizer.BIGINT:","case SQLTokenizer.DOUBLE:","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/ExpressionFunctionRound/getDouble()|,["final double getDouble() throws Exception","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0)","for(int i=0; i\<places; i++)","factor *= 10;","value *= factor;","else","for(int i=0; i\>places; i--)","factor *= 10;","value /= factor;","\n\t.....\n"],[<|java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()|,["final double getDouble() throws Exception","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0)","for(int i=0; i\<places; i++)","factor *= 10;","value *= factor;","else","for(int i=0; i\>places; i--)","factor *= 10;","value /= factor;","\n\t.....\n"]>]>,
			  <|java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)|,["result |= (((long)nextEntry) \<\< shift);","if(listEnum.stack\>=3)","listEnum.offsetStack[listEnum.stack] = offset;","return result;","listEnum.offsetStack[listEnum.stack] = offset+pointerSize;","offset = getPointer();","shift -= 16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack] = result;","\n\t.....\n"],[<|java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)|,["result |= (((long)nextEntry) \<\< shift);","if(listEnum.stack\>=3)","listEnum.offsetStack[listEnum.stack] = offset;","return result;","listEnum.offsetStack[listEnum.stack] = offset+pointerSize;","offset = getPointer();","shift -= 16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack] = result;","\n\t.....\n"]>]>
			]; 
}

lrel[loc, int, int] getSmallSqlCyclomaticComplexity() {
	return [
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/isNull()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getBoolean()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getInt()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getLong()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getFloat()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getDouble()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getMoney()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getNumeric()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getObject()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getString()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionIIF/getScale()|,1,3>,
			  <|java+method:///smallsql/database/FileIndexNode/createIndexNode(boolean,char)|,1,4>,
			  <|java+method:///smallsql/database/FileIndexNode/save()|,1,6>,
			  <|java+method:///smallsql/database/FileIndexNode/saveRef(smallsql.database.StoreImpl)|,2,7>,
			  <|java+method:///smallsql/database/FileIndexNode/loadRef(long)|,1,10>,
			  <|java+method:///smallsql/database/FileIndexNode/loadRootNode(boolean,java.nio.channels.FileChannel,long)|,1,8>,
			  <|java+method:///smallsql/database/ExpressionFunctionCot/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionCot/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getNumeric()|,3,7>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getObject()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getString()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnFloat/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunction/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunction/getBytes()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunction/setParams(smallsql.database.Expression%5B%5D)|,5,7>,
			  <|java+method:///smallsql/database/ExpressionFunction/setParamAt(smallsql.database.Expression,int)|,5,17>,
			  <|java+method:///smallsql/database/ExpressionFunction/equals(java.lang.Object)|,3,5>,
			  <|java+method:///smallsql/database/ExpressionFunction/createUnspportedDataType(int)|,1,7>,
			  <|java+method:///smallsql/database/ExpressionFunction/createUnspportedConversion(int)|,1,7>,
			  <|java+method:///smallsql/database/Logger/isLogging()|,1,3>,
			  <|java+method:///smallsql/database/Logger/println(java.lang.String)|,2,10>,
			  <|java+method:///smallsql/database/UnionAll/addDataSource(smallsql.database.DataSource)|,1,4>,
			  <|java+method:///smallsql/database/UnionAll/init(smallsql.database.SSConnection)|,4,15>,
			  <|java+method:///smallsql/database/UnionAll/isNull(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getBoolean(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getInt(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getLong(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getFloat(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getDouble(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getMoney(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getNumeric(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getObject(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getString(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getBytes(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getDataType(int)|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getTableView()|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/beforeFirst()|,1,6>,
			  <|java+method:///smallsql/database/UnionAll/first()|,1,7>,
			  <|java+method:///smallsql/database/UnionAll/next()|,4,13>,
			  <|java+method:///smallsql/database/UnionAll/afterLast()|,1,6>,
			  <|java+method:///smallsql/database/UnionAll/getRow()|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/getBitCount()|,2,9>,
			  <|java+method:///smallsql/database/UnionAll/getRowPosition()|,1,4>,
			  <|java+method:///smallsql/database/UnionAll/setRowPosition(long)|,1,7>,
			  <|java+method:///smallsql/database/UnionAll/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/UnionAll/nullRow()|,1,4>,
			  <|java+method:///smallsql/database/UnionAll/noRow()|,1,4>,
			  <|java+method:///smallsql/database/UnionAll/execute()|,2,5>,
			  <|java+method:///smallsql/database/Column/setName(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Column/setDefaultValue(smallsql.database.Expression,java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/Column/getDefaultValue(smallsql.database.SSConnection)|,2,5>,
			  <|java+method:///smallsql/database/Column/getDefaultDefinition()|,1,3>,
			  <|java+method:///smallsql/database/Column/getName()|,1,3>,
			  <|java+method:///smallsql/database/Column/isAutoIncrement()|,1,3>,
			  <|java+method:///smallsql/database/Column/setAutoIncrement(boolean)|,1,3>,
			  <|java+method:///smallsql/database/Column/initAutoIncrement(java.nio.channels.FileChannel,long)|,2,7>,
			  <|java+method:///smallsql/database/Column/setNewAutoIncrementValue(smallsql.database.Expression)|,2,5>,
			  <|java+method:///smallsql/database/Column/isCaseSensitive()|,1,3>,
			  <|java+method:///smallsql/database/Column/setNullable(boolean)|,1,3>,
			  <|java+method:///smallsql/database/Column/isNullable()|,1,3>,
			  <|java+method:///smallsql/database/Column/setDataType(int)|,1,3>,
			  <|java+method:///smallsql/database/Column/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/Column/getDisplaySize()|,1,3>,
			  <|java+method:///smallsql/database/Column/setScale(int)|,1,3>,
			  <|java+method:///smallsql/database/Column/getScale()|,3,9>,
			  <|java+method:///smallsql/database/Column/setPrecision(int)|,2,4>,
			  <|java+method:///smallsql/database/Column/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/Column/getColumnSize()|,2,5>,
			  <|java+method:///smallsql/database/Column/getFlag()|,1,5>,
			  <|java+method:///smallsql/database/Column/setFlag(int)|,1,5>,
			  <|java+method:///smallsql/database/Column/copy()|,2,5>,
			  <|java+method:///smallsql/database/LongLongList/size()|,1,3>,
			  <|java+method:///smallsql/database/LongLongList/get1(int)|,2,5>,
			  <|java+method:///smallsql/database/LongLongList/get2(int)|,2,5>,
			  <|java+method:///smallsql/database/LongLongList/add(long,long)|,2,9>,
			  <|java+method:///smallsql/database/LongLongList/clear()|,1,3>,
			  <|java+method:///smallsql/database/LongLongList/resize(int)|,1,5>,
			  <|java+method:///smallsql/database/MutableFloat/doubleValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableFloat/floatValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableFloat/intValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableFloat/longValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableFloat/toString()|,1,3>,
			  <|java+method:///smallsql/database/MutableFloat/getImmutableObject()|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/noCurrentRow()|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/isNull(int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getBoolean(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getBytes(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getDouble(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getFloat(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getInt(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getLong(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getMoney(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getNumeric(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getObject(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getString(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/scanObjectOffsets(int%5B%5D,int%5B%5D)|,1,2>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getUsedSize()|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/getNextPagePos()|,1,3>,
			  <|java+method:///smallsql/database/StoreNoCurrentRow/deleteRow(smallsql.database.SSConnection)|,1,3>,
			  <|java+method:///smallsql/database/Expression/clone()|,1,3>,
			  <|java+method:///smallsql/database/Expression/getName()|,1,3>,
			  <|java+method:///smallsql/database/Expression/setName(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Expression/getAlias()|,1,3>,
			  <|java+method:///smallsql/database/Expression/setAlias(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Expression/setParams(smallsql.database.Expression%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/Expression/setParamAt(smallsql.database.Expression,int)|,1,3>,
			  <|java+method:///smallsql/database/Expression/getParams()|,1,1>,
			  <|java+method:///smallsql/database/Expression/optimize()|,3,7>,
			  <|java+method:///smallsql/database/Expression/equals(java.lang.Object)|,10,19>,
			  <|java+method:///smallsql/database/Expression/isNull()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getBoolean()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getInt()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getLong()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getFloat()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getDouble()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getMoney()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getNumeric()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getObject()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getApiObject()|,2,7>,
			  <|java+method:///smallsql/database/Expression/getString()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getBytes()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getDataType()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getType()|,1,1>,
			  <|java+method:///smallsql/database/Expression/getTableName()|,1,3>,
			  <|java+method:///smallsql/database/Expression/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/Expression/getScale()|,1,3>,
			  <|java+method:///smallsql/database/Expression/getScale(int)|,6,13>,
			  <|java+method:///smallsql/database/Expression/getDisplaySize()|,1,3>,
			  <|java+method:///smallsql/database/Expression/isDefinitelyWritable()|,1,3>,
			  <|java+method:///smallsql/database/Expression/isAutoIncrement()|,1,3>,
			  <|java+method:///smallsql/database/Expression/isCaseSensitive()|,1,3>,
			  <|java+method:///smallsql/database/Expression/isNullable()|,1,3>,
			  <|java+method:///smallsql/database/CreateFile/commit()|,1,5>,
			  <|java+method:///smallsql/database/CreateFile/rollback()|,4,20>,
			  <|java+method:///smallsql/database/ExpressionInSelect/loadInList()|,5,14>,
			  <|java+method:///smallsql/database/ExpressionInSelect/isInList()|,1,4>,
			  <|java+method:///smallsql/database/Mutable/getImmutableObject()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getBoolean()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getInt()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getLong()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getFloat()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getMoney()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getNumeric()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getObject()|,2,5>,
			  <|java+method:///smallsql/database/language/Language_it/getEntries()|,1,3>,
			  <|java+method:///smallsql/database/StorePageLink/getStore(smallsql.database.Table,smallsql.database.SSConnection,int)|,3,7>,
			  <|java+method:///smallsql/database/Command/addColumnExpression(smallsql.database.Expression)|,1,3>,
			  <|java+method:///smallsql/database/Command/addParameter(smallsql.database.ExpressionValue)|,1,3>,
			  <|java+method:///smallsql/database/Command/verifyParams()|,3,6>,
			  <|java+method:///smallsql/database/Command/clearParams()|,2,5>,
			  <|java+method:///smallsql/database/Command/getParam(int)|,2,5>,
			  <|java+method:///smallsql/database/Command/setParamValue(int,java.lang.Object,int)|,2,6>,
			  <|java+method:///smallsql/database/Command/setParamValue(int,java.lang.Object,int,int)|,2,6>,
			  <|java+method:///smallsql/database/Command/execute(smallsql.database.SSConnection,smallsql.database.SSStatement)|,3,11>,
			  <|java+method:///smallsql/database/Command/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,1,1>,
			  <|java+method:///smallsql/database/Command/getQueryResult()|,2,5>,
			  <|java+method:///smallsql/database/Command/getResultSet()|,1,3>,
			  <|java+method:///smallsql/database/Command/getUpdateCount()|,1,3>,
			  <|java+method:///smallsql/database/Command/getMoreResults()|,1,5>,
			  <|java+method:///smallsql/database/Command/setMaxRows(int)|,1,1>,
			  <|java+method:///smallsql/database/Command/getMaxRows()|,1,1>,
			  <|java+method:///smallsql/database/CommandCreateView/addColumn(smallsql.database.Column)|,1,3>,
			  <|java+method:///smallsql/database/CommandCreateView/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCeiling/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionCeiling/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/TableStorePage/getData()|,1,3>,
			  <|java+method:///smallsql/database/TableStorePage/commit()|,3,11>,
			  <|java+method:///smallsql/database/TableStorePage/freeLock()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getOperation()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)|,16,31>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/setParamAt(smallsql.database.Expression,int)|,7,21>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/equals(java.lang.Object)|,4,6>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getInt()|,15,25>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getIntImpl()|,8,12>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getLong()|,15,25>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getLongImpl()|,9,13>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDouble()|,15,25>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDoubleImpl()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDoubleImpl(double,double)|,7,11>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getFloat()|,15,25>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getFloatImpl()|,7,11>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getMoney()|,15,26>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getMoneyImpl()|,6,10>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getNumeric()|,15,27>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getNumericImpl()|,11,55>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getObject()|,31,53>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getBoolean()|,120,188>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getString()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getString(java.lang.String,java.lang.String)|,2,6>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDataType()|,17,24>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getScale()|,9,21>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/isNull()|,10,16>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getBytes()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/isInList()|,4,12>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/createUnspportedDataType()|,1,7>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/createUnspportedConversion(int)|,1,9>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/optimize()|,3,11>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getKeywordFromOperation(int)|,6,14>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getOperationFromToken(int)|,23,27>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDataType(smallsql.database.Expression,smallsql.database.Expression)|,1,5>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getBestNumberDataType(int)|,6,14>,
			  <|java+method:///smallsql/database/ExpressionArithmetic/getDataType(int,int)|,3,6>,
			  <|java+method:///smallsql/database/MutableNumeric/setValue(byte%5B%5D)|,7,27>,
			  <|java+method:///smallsql/database/MutableNumeric/getInternalValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableNumeric/add(smallsql.database.MutableNumeric)|,3,9>,
			  <|java+method:///smallsql/database/MutableNumeric/add(int,int%5B%5D)|,3,14>,
			  <|java+method:///smallsql/database/MutableNumeric/add(int%5B%5D)|,4,14>,
			  <|java+method:///smallsql/database/MutableNumeric/resizeValue(int)|,1,6>,
			  <|java+method:///smallsql/database/MutableNumeric/sub(smallsql.database.MutableNumeric)|,3,9>,
			  <|java+method:///smallsql/database/MutableNumeric/sub(int%5B%5D)|,5,18>,
			  <|java+method:///smallsql/database/MutableNumeric/mul(smallsql.database.MutableNumeric)|,1,6>,
			  <|java+method:///smallsql/database/MutableNumeric/mul(int)|,4,15>,
			  <|java+method:///smallsql/database/MutableNumeric/div(smallsql.database.MutableNumeric)|,1,7>,
			  <|java+method:///smallsql/database/MutableNumeric/div(int)|,1,5>,
			  <|java+method:///smallsql/database/MutableNumeric/divImpl(int)|,7,27>,
			  <|java+method:///smallsql/database/MutableNumeric/mod(smallsql.database.MutableNumeric)|,1,6>,
			  <|java+method:///smallsql/database/MutableNumeric/getScale()|,1,3>,
			  <|java+method:///smallsql/database/MutableNumeric/setScale(int)|,7,23>,
			  <|java+method:///smallsql/database/MutableNumeric/getSignum()|,1,3>,
			  <|java+method:///smallsql/database/MutableNumeric/setSignum(int)|,1,3>,
			  <|java+method:///smallsql/database/MutableNumeric/floor()|,1,5>,
			  <|java+method:///smallsql/database/MutableNumeric/negate(byte%5B%5D)|,3,10>,
			  <|java+method:///smallsql/database/MutableNumeric/toByteArray()|,7,26>,
			  <|java+method:///smallsql/database/MutableNumeric/intValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableNumeric/longValue()|,6,24>,
			  <|java+method:///smallsql/database/MutableNumeric/floatValue()|,5,19>,
			  <|java+method:///smallsql/database/MutableNumeric/doubleValue()|,5,19>,
			  <|java+method:///smallsql/database/MutableNumeric/toString()|,8,26>,
			  <|java+method:///smallsql/database/MutableNumeric/compareTo(smallsql.database.MutableNumeric)|,1,3>,
			  <|java+method:///smallsql/database/MutableNumeric/equals(java.lang.Object)|,2,4>,
			  <|java+method:///smallsql/database/MutableNumeric/toBigDecimal()|,2,4>,
			  <|java+method:///smallsql/database/MutableNumeric/toBigDecimal(int)|,2,4>,
			  <|java+method:///smallsql/database/MutableNumeric/getImmutableObject()|,1,3>,
			  <|java+method:///smallsql/database/TableViewMap/getUniqueKey(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/TableViewMap/get(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/TableViewMap/put(java.lang.String,smallsql.database.TableView)|,1,3>,
			  <|java+method:///smallsql/database/TableViewMap/remove(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/TableViewMap/values()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionUCase/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionUCase/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionUCase/getBytes()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionUCase/getString()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getNumeric()|,7,19>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getString()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1Number/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/FileIndex/print(smallsql.database.Index,smallsql.database.Expressions)|,2,8>,
			  <|java+method:///smallsql/database/FileIndex/load(java.nio.channels.FileChannel)|,1,8>,
			  <|java+method:///smallsql/database/FileIndex/save()|,1,7>,
			  <|java+method:///smallsql/database/FileIndex/close()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRand/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionRand/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRand/getDouble()|,3,6>,
			  <|java+method:///smallsql/database/StoreImpl/createStore(smallsql.database.Table,smallsql.database.StorePage,int,long)|,10,48>,
			  <|java+method:///smallsql/database/StoreImpl/recreateStore(smallsql.database.Table,smallsql.database.StorePage,int)|,1,9>,
			  <|java+method:///smallsql/database/StoreImpl/readPageHeader()|,2,10>,
			  <|java+method:///smallsql/database/StoreImpl/loadUpdatedStore()|,2,6>,
			  <|java+method:///smallsql/database/StoreImpl/resizePage(int)|,1,6>,
			  <|java+method:///smallsql/database/StoreImpl/isValidPage()|,1,4>,
			  <|java+method:///smallsql/database/StoreImpl/getUsedSize()|,1,4>,
			  <|java+method:///smallsql/database/StoreImpl/getNextPagePos()|,3,8>,
			  <|java+method:///smallsql/database/StoreImpl/writeFinsh(smallsql.database.SSConnection)|,8,31>,
			  <|java+method:///smallsql/database/StoreImpl/createWriteLock()|,2,6>,
			  <|java+method:///smallsql/database/StoreImpl/updateFinsh(smallsql.database.SSConnection,smallsql.database.StoreImpl)|,6,31>,
			  <|java+method:///smallsql/database/StoreImpl/getCurrentOffsetInPage()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/setCurrentOffsetInPage(int)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeByte(int)|,2,5>,
			  <|java+method:///smallsql/database/StoreImpl/readByte()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/readUnsignedByte()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeBoolean(boolean)|,2,5>,
			  <|java+method:///smallsql/database/StoreImpl/readBoolean()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeShort(int)|,2,6>,
			  <|java+method:///smallsql/database/StoreImpl/readShort()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeInt(int)|,2,8>,
			  <|java+method:///smallsql/database/StoreImpl/readInt()|,1,6>,
			  <|java+method:///smallsql/database/StoreImpl/writeLong(long)|,2,12>,
			  <|java+method:///smallsql/database/StoreImpl/readLong()|,1,10>,
			  <|java+method:///smallsql/database/StoreImpl/writeDouble(double)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/readDouble()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeFloat(float)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/readFloat()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeNumeric(smallsql.database.MutableNumeric)|,2,8>,
			  <|java+method:///smallsql/database/StoreImpl/readNumeric()|,2,9>,
			  <|java+method:///smallsql/database/StoreImpl/writeTimestamp(long)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/readTimestamp()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeTime(long)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/readTime()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeDate(long)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/readDate()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeSmallDateTime(long)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/readSmallDateTime()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeString(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/writeString(java.lang.String,int,boolean)|,5,16>,
			  <|java+method:///smallsql/database/StoreImpl/readString()|,1,4>,
			  <|java+method:///smallsql/database/StoreImpl/writeBytes(byte%5B%5D)|,2,6>,
			  <|java+method:///smallsql/database/StoreImpl/writeBytes(byte%5B%5D,int,int)|,2,6>,
			  <|java+method:///smallsql/database/StoreImpl/readBytes(int)|,1,6>,
			  <|java+method:///smallsql/database/StoreImpl/writeBinary(byte%5B%5D,int,boolean)|,6,18>,
			  <|java+method:///smallsql/database/StoreImpl/readBinary()|,1,4>,
			  <|java+method:///smallsql/database/StoreImpl/writeLongBinary(byte%5B%5D)|,1,6>,
			  <|java+method:///smallsql/database/StoreImpl/readLongBinary()|,1,5>,
			  <|java+method:///smallsql/database/StoreImpl/writeChars(char%5B%5D)|,3,10>,
			  <|java+method:///smallsql/database/StoreImpl/readChars(int)|,2,7>,
			  <|java+method:///smallsql/database/StoreImpl/writeLongString(java.lang.String)|,1,7>,
			  <|java+method:///smallsql/database/StoreImpl/readLongString()|,2,6>,
			  <|java+method:///smallsql/database/StoreImpl/writeColumn(smallsql.database.Column)|,3,14>,
			  <|java+method:///smallsql/database/StoreImpl/readColumn(int)|,3,19>,
			  <|java+method:///smallsql/database/StoreImpl/copyValueFrom(smallsql.database.StoreImpl,int,int)|,1,4>,
			  <|java+method:///smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)|,71,151>,
			  <|java+method:///smallsql/database/StoreImpl/isNull(int)|,1,4>,
			  <|java+method:///smallsql/database/StoreImpl/getBoolean(int,int)|,33,62>,
			  <|java+method:///smallsql/database/StoreImpl/getInt(int,int)|,32,61>,
			  <|java+method:///smallsql/database/StoreImpl/getLong(int,int)|,32,60>,
			  <|java+method:///smallsql/database/StoreImpl/getFloat(int,int)|,32,60>,
			  <|java+method:///smallsql/database/StoreImpl/getDouble(int,int)|,32,60>,
			  <|java+method:///smallsql/database/StoreImpl/getMoney(int,int)|,32,56>,
			  <|java+method:///smallsql/database/StoreImpl/getNumeric(int,int)|,32,56>,
			  <|java+method:///smallsql/database/StoreImpl/getObject(int,int)|,33,61>,
			  <|java+method:///smallsql/database/StoreImpl/getString(int,int)|,33,62>,
			  <|java+method:///smallsql/database/StoreImpl/getBytes(int,int)|,33,59>,
			  <|java+method:///smallsql/database/StoreImpl/scanObjectOffsets(int%5B%5D,int%5B%5D)|,36,62>,
			  <|java+method:///smallsql/database/StoreImpl/deleteRow(smallsql.database.SSConnection)|,1,7>,
			  <|java+method:///smallsql/database/StoreImpl/getLink()|,1,3>,
			  <|java+method:///smallsql/database/StoreImpl/isRollback()|,1,3>,
			  <|java+method:///smallsql/database/MutableLong/doubleValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableLong/floatValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableLong/intValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableLong/longValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableLong/toString()|,1,3>,
			  <|java+method:///smallsql/database/MutableLong/getImmutableObject()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionOctetLen/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionOctetLen/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionOctetLen/getInt()|,2,5>,
			  <|java+method:///smallsql/database/CommandSet/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,3,12>,
			  <|java+method:///smallsql/database/ExpressionFunctionRTrim/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRTrim/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRTrim/getBytes()|,3,11>,
			  <|java+method:///smallsql/database/ExpressionFunctionRTrim/getString()|,3,9>,
			  <|java+method:///smallsql/database/SSResultSet/close()|,1,4>,
			  <|java+method:///smallsql/database/SSResultSet/wasNull()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getString(int)|,4,14>,
			  <|java+method:///smallsql/database/SSResultSet/getBoolean(int)|,2,9>,
			  <|java+method:///smallsql/database/SSResultSet/getByte(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getShort(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getInt(int)|,2,9>,
			  <|java+method:///smallsql/database/SSResultSet/getLong(int)|,2,9>,
			  <|java+method:///smallsql/database/SSResultSet/getFloat(int)|,2,9>,
			  <|java+method:///smallsql/database/SSResultSet/getDouble(int)|,2,9>,
			  <|java+method:///smallsql/database/SSResultSet/getBigDecimal(int,int)|,3,10>,
			  <|java+method:///smallsql/database/SSResultSet/getBytes(int)|,2,9>,
			  <|java+method:///smallsql/database/SSResultSet/getDate(int)|,3,10>,
			  <|java+method:///smallsql/database/SSResultSet/getTime(int)|,3,10>,
			  <|java+method:///smallsql/database/SSResultSet/getTimestamp(int)|,3,10>,
			  <|java+method:///smallsql/database/SSResultSet/getAsciiStream(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getUnicodeStream(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBinaryStream(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getString(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBoolean(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getByte(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getShort(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getInt(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getLong(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getFloat(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getDouble(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBigDecimal(java.lang.String,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBytes(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getDate(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getTime(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getTimestamp(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getAsciiStream(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getUnicodeStream(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBinaryStream(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getWarnings()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/clearWarnings()|,1,2>,
			  <|java+method:///smallsql/database/SSResultSet/getCursorName()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getMetaData()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getObject(int)|,2,9>,
			  <|java+method:///smallsql/database/SSResultSet/getObject(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/findColumn(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getCharacterStream(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getCharacterStream(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBigDecimal(int)|,3,10>,
			  <|java+method:///smallsql/database/SSResultSet/getBigDecimal(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/isAfterLast()|,2,7>,
			  <|java+method:///smallsql/database/SSResultSet/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/isLast()|,2,7>,
			  <|java+method:///smallsql/database/SSResultSet/beforeFirst()|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/first()|,3,9>,
			  <|java+method:///smallsql/database/SSResultSet/previous()|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/next()|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/last()|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/afterLast()|,3,9>,
			  <|java+method:///smallsql/database/SSResultSet/absolute(int)|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/relative(int)|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/getRow()|,2,7>,
			  <|java+method:///smallsql/database/SSResultSet/setFetchDirection(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getFetchDirection()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/setFetchSize(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getFetchSize()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getType()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getConcurrency()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/rowUpdated()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateNull(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBoolean(int,boolean)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateByte(int,byte)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateShort(int,short)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateInt(int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateLong(int,long)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateFloat(int,float)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateDouble(int,double)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBigDecimal(int,java.math.BigDecimal)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateString(int,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBytes(int,byte%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateDate(int,java.sql.Date)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateTime(int,java.sql.Time)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateTimestamp(int,java.sql.Timestamp)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateAsciiStream(int,java.io.InputStream,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBinaryStream(int,java.io.InputStream,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateCharacterStream(int,java.io.Reader,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateObject(int,java.lang.Object,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateObject(int,java.lang.Object)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateNull(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBoolean(java.lang.String,boolean)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateByte(java.lang.String,byte)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateShort(java.lang.String,short)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateInt(java.lang.String,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateLong(java.lang.String,long)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateFloat(java.lang.String,float)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateDouble(java.lang.String,double)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBigDecimal(java.lang.String,java.math.BigDecimal)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateString(java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBytes(java.lang.String,byte%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateDate(java.lang.String,java.sql.Date)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateTime(java.lang.String,java.sql.Time)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateTimestamp(java.lang.String,java.sql.Timestamp)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateAsciiStream(java.lang.String,java.io.InputStream,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBinaryStream(java.lang.String,java.io.InputStream,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateCharacterStream(java.lang.String,java.io.Reader,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateObject(java.lang.String,java.lang.Object,int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateObject(java.lang.String,java.lang.Object)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/insertRow()|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/testNotInsertRow()|,2,5>,
			  <|java+method:///smallsql/database/SSResultSet/updateRow()|,3,15>,
			  <|java+method:///smallsql/database/SSResultSet/deleteRow()|,1,6>,
			  <|java+method:///smallsql/database/SSResultSet/refreshRow()|,1,4>,
			  <|java+method:///smallsql/database/SSResultSet/cancelRowUpdates()|,1,4>,
			  <|java+method:///smallsql/database/SSResultSet/clearRowBuffer()|,3,7>,
			  <|java+method:///smallsql/database/SSResultSet/moveToInsertRow()|,2,8>,
			  <|java+method:///smallsql/database/SSResultSet/moveToCurrentRow()|,2,7>,
			  <|java+method:///smallsql/database/SSResultSet/getStatement()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getObject(int,java.util.Map)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getRef(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBlob(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getClob(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getArray(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getObject(java.lang.String,java.util.Map)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getRef(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getBlob(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getClob(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getArray(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getDate(int,java.util.Calendar)|,4,13>,
			  <|java+method:///smallsql/database/SSResultSet/getDate(java.lang.String,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getTime(int,java.util.Calendar)|,4,13>,
			  <|java+method:///smallsql/database/SSResultSet/getTime(java.lang.String,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getTimestamp(int,java.util.Calendar)|,4,13>,
			  <|java+method:///smallsql/database/SSResultSet/getTimestamp(java.lang.String,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getURL(int)|,3,10>,
			  <|java+method:///smallsql/database/SSResultSet/getURL(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateRef(int,java.sql.Ref)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateRef(java.lang.String,java.sql.Ref)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBlob(int,java.sql.Blob)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateBlob(java.lang.String,java.sql.Blob)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateClob(int,java.sql.Clob)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateClob(java.lang.String,java.sql.Clob)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateArray(int,java.sql.Array)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/updateArray(java.lang.String,java.sql.Array)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSet/getValue(int)|,3,9>,
			  <|java+method:///smallsql/database/SSResultSet/getUpdateValue(int)|,3,10>,
			  <|java+method:///smallsql/database/SSResultSet/updateValue(int,java.lang.Object,int)|,2,6>,
			  <|java+method:///smallsql/database/SSResultSet/updateValue(int,java.lang.Object,int,int)|,2,6>,
			  <|java+method:///smallsql/database/SSResultSet/getCmd()|,2,7>,
			  <|java+method:///smallsql/database/StoreNull/isNull(int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getBoolean(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getBytes(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getDouble(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getFloat(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getInt(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getLong(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getMoney(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getNumeric(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getObject(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getString(int,int)|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/scanObjectOffsets(int%5B%5D,int%5B%5D)|,1,1>,
			  <|java+method:///smallsql/database/StoreNull/getUsedSize()|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/getNextPagePos()|,1,3>,
			  <|java+method:///smallsql/database/StoreNull/deleteRow(smallsql.database.SSConnection)|,2,6>,
			  <|java+method:///smallsql/database/ExpressionFunctionDayOfMonth/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionDayOfMonth/getInt()|,2,5>,
			  <|java+method:///smallsql/database/TransactionStep/commit()|,1,1>,
			  <|java+method:///smallsql/database/TransactionStep/rollback()|,1,1>,
			  <|java+method:///smallsql/database/TransactionStep/freeLock()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionLCase/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLCase/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLCase/getBytes()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionLCase/getString()|,2,4>,
			  <|java+method:///smallsql/database/MemoryStream/writeTo(java.nio.channels.FileChannel)|,1,4>,
			  <|java+method:///smallsql/database/MemoryStream/writeByte(int)|,1,4>,
			  <|java+method:///smallsql/database/MemoryStream/writeShort(int)|,1,5>,
			  <|java+method:///smallsql/database/MemoryStream/writeInt(int)|,1,7>,
			  <|java+method:///smallsql/database/MemoryStream/writeLong(long)|,1,11>,
			  <|java+method:///smallsql/database/MemoryStream/writeChars(char%5B%5D)|,2,8>,
			  <|java+method:///smallsql/database/MemoryStream/writeBytes(byte%5B%5D,int,int)|,1,5>,
			  <|java+method:///smallsql/database/MemoryStream/verifyFreePufferSize(int)|,3,10>,
			  <|java+method:///smallsql/database/MemoryStream/skip(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryStream/readByte()|,1,3>,
			  <|java+method:///smallsql/database/MemoryStream/readShort()|,1,3>,
			  <|java+method:///smallsql/database/MemoryStream/readInt()|,1,6>,
			  <|java+method:///smallsql/database/MemoryStream/readLong()|,1,10>,
			  <|java+method:///smallsql/database/MemoryStream/readChars(int)|,2,7>,
			  <|java+method:///smallsql/database/MemoryStream/readBytes(int)|,1,6>,
			  <|java+method:///smallsql/database/Table/drop(smallsql.database.Database,java.lang.String)|,2,4>,
			  <|java+method:///smallsql/database/Table/drop(smallsql.database.SSConnection)|,5,14>,
			  <|java+method:///smallsql/database/Table/close()|,3,11>,
			  <|java+method:///smallsql/database/Table/write(smallsql.database.SSConnection)|,3,24>,
			  <|java+method:///smallsql/database/Table/writeMagic(java.nio.channels.FileChannel)|,1,8>,
			  <|java+method:///smallsql/database/Table/getStore(smallsql.database.SSConnection,long,int)|,1,4>,
			  <|java+method:///smallsql/database/Table/getStore(smallsql.database.TableStorePage,int)|,1,3>,
			  <|java+method:///smallsql/database/Table/getStoreInsert(smallsql.database.SSConnection)|,1,4>,
			  <|java+method:///smallsql/database/Table/getStoreTemp(smallsql.database.SSConnection)|,1,4>,
			  <|java+method:///smallsql/database/Table/getLobStore(smallsql.database.SSConnection,long,int)|,2,6>,
			  <|java+method:///smallsql/database/Table/getFirstPage()|,1,3>,
			  <|java+method:///smallsql/database/Table/getInserts(smallsql.database.SSConnection)|,5,18>,
			  <|java+method:///smallsql/database/Table/requestLock(smallsql.database.SSConnection,int,long)|,6,19>,
			  <|java+method:///smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)|,29,99>,
			  <|java+method:///smallsql/database/Table/requestWriteLock(smallsql.database.SSConnection,smallsql.database.TableStorePage)|,6,28>,
			  <|java+method:///smallsql/database/Table/freeLock(smallsql.database.TableStorePage)|,15,63>,
			  <|java+method:///smallsql/database/language/Language/getLanguage(java.lang.String)|,2,8>,
			  <|java+method:///smallsql/database/language/Language/getDefaultLanguage()|,2,9>,
			  <|java+method:///smallsql/database/language/Language/getFromLocaleTree(java.lang.String)|,6,22>,
			  <|java+method:///smallsql/database/language/Language/addMessages(java.lang.String%5B%5D%5B%5D)|,3,14>,
			  <|java+method:///smallsql/database/language/Language/setSqlStates()|,3,13>,
			  <|java+method:///smallsql/database/language/Language/getMessage(java.lang.String)|,1,5>,
			  <|java+method:///smallsql/database/language/Language/getSqlState(java.lang.String)|,1,5>,
			  <|java+method:///smallsql/database/language/Language/getEntries()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getNumeric()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getObject()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getString()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnInt/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/StorePage/setPageData(byte%5B%5D,int)|,1,4>,
			  <|java+method:///smallsql/database/StorePage/commit()|,4,18>,
			  <|java+method:///smallsql/database/StorePage/rollback()|,1,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionMinute/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionMinute/getInt()|,2,5>,
			  <|java+method:///smallsql/database/TableViewResult/createResult(smallsql.database.TableView)|,2,5>,
			  <|java+method:///smallsql/database/TableViewResult/getTableViewResult(smallsql.database.RowSource)|,3,9>,
			  <|java+method:///smallsql/database/TableViewResult/setAlias(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/TableViewResult/getAlias()|,1,3>,
			  <|java+method:///smallsql/database/TableViewResult/hasAlias()|,1,3>,
			  <|java+method:///smallsql/database/TableViewResult/init(smallsql.database.SSConnection)|,2,9>,
			  <|java+method:///smallsql/database/TableViewResult/deleteRow()|,1,1>,
			  <|java+method:///smallsql/database/TableViewResult/updateRow(smallsql.database.Expression%5B%5D)|,1,1>,
			  <|java+method:///smallsql/database/TableViewResult/insertRow(smallsql.database.Expression%5B%5D)|,1,1>,
			  <|java+method:///smallsql/database/TableViewResult/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/Utils/createTableViewFileName(smallsql.database.Database,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Utils/createLobFileName(smallsql.database.Database,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Utils/createIdxFileName(smallsql.database.Database,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Utils/like(java.lang.String,java.lang.String)|,17,50>,
			  <|java+method:///smallsql/database/Utils/long2int(long)|,3,7>,
			  <|java+method:///smallsql/database/Utils/double2long(double)|,3,7>,
			  <|java+method:///smallsql/database/Utils/bytes2float(byte%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/Utils/bytes2double(byte%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/Utils/bytes2long(byte%5B%5D)|,2,8>,
			  <|java+method:///smallsql/database/Utils/bytes2int(byte%5B%5D)|,2,8>,
			  <|java+method:///smallsql/database/Utils/double2bytes(double)|,1,3>,
			  <|java+method:///smallsql/database/Utils/float2bytes(float)|,1,3>,
			  <|java+method:///smallsql/database/Utils/long2bytes(long)|,1,12>,
			  <|java+method:///smallsql/database/Utils/money2int(long)|,3,5>,
			  <|java+method:///smallsql/database/Utils/int2bytes(int)|,1,8>,
			  <|java+method:///smallsql/database/Utils/bytes2hex(byte%5B%5D)|,2,8>,
			  <|java+method:///smallsql/database/Utils/hex2bytes(char%5B%5D,int,int)|,3,12>,
			  <|java+method:///smallsql/database/Utils/hexDigit2int(char)|,3,6>,
			  <|java+method:///smallsql/database/Utils/unique2bytes(java.lang.String)|,1,21>,
			  <|java+method:///smallsql/database/Utils/hex2byte(char%5B%5D,int)|,2,8>,
			  <|java+method:///smallsql/database/Utils/bytes2unique(byte%5B%5D,int)|,2,42>,
			  <|java+method:///smallsql/database/Utils/string2boolean(java.lang.String)|,2,6>,
			  <|java+method:///smallsql/database/Utils/doubleToMoney(double)|,2,5>,
			  <|java+method:///smallsql/database/Utils/indexOf(char,char%5B%5D,int,int)|,3,7>,
			  <|java+method:///smallsql/database/Utils/indexOf(int,int%5B%5D)|,3,7>,
			  <|java+method:///smallsql/database/Utils/indexOf(byte%5B%5D,byte%5B%5D,int)|,4,13>,
			  <|java+method:///smallsql/database/Utils/compareBytes(byte%5B%5D,byte%5B%5D)|,4,14>,
			  <|java+method:///smallsql/database/Utils/createMemoryCommandSelect(smallsql.database.SSConnection,java.lang.String%5B%5D,java.lang.Object%5B%5D%5B%5D)|,2,11>,
			  <|java+method:///smallsql/database/Utils/getInteger(int)|,2,6>,
			  <|java+method:///smallsql/database/Utils/getShort(int)|,2,6>,
			  <|java+method:///smallsql/database/Utils/openRaFile(java.io.File,boolean)|,5,17>,
			  <|java+method:///smallsql/database/Utils/getExpressionNameFromTree(smallsql.database.Expression)|,1,5>,
			  <|java+method:///smallsql/database/Utils/getExpressionNameFromTree(smallsql.database.Expressions,smallsql.database.Expression)|,4,11>,
			  <|java+method:///smallsql/database/ExpressionFunctionMod/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionMod/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionMod/getInt()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionSoundex/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSoundex/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSoundex/getBytes()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSoundex/getString()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionSoundex/getString(java.lang.String)|,23,55>,
			  <|java+method:///smallsql/database/ExpressionFunctionSoundex/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnCount()|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isAutoIncrement(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isCaseSensitive(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isSearchable(int)|,1,4>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isCurrency(int)|,3,8>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isNullable(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isSigned(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isSignedDataType(int)|,11,16>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isNumberDataType(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isBinaryDataType(int)|,5,10>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getDisplaySize(int,int,int)|,22,39>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)|,32,55>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnDisplaySize(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnLabel(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnName(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getSchemaName(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getPrecision(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getScale(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getTableName(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getCatalogName(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnType(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnTypeName(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isReadOnly(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isWritable(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/isDefinitelyWritable(int)|,1,3>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnClassName(int)|,24,41>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnIdx(int)|,2,5>,
			  <|java+method:///smallsql/database/SSResultSetMetaData/getColumnExpression(int)|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLog/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionLog/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/SQLTokenizer/parseSQL(char%5B%5D)|,69,184>,
			  <|java+method:///smallsql/database/SQLTokenizer/addKeyWord(java.lang.String,int)|,6,34>,
			  <|java+method:///smallsql/database/SQLTokenizer/getKeyWord(int)|,1,3>,
			  <|java+method:///smallsql/database/SQLTokenizer/getSQLDataType(int)|,33,62>,
			  <|java+method:///smallsql/database/ExpressionFunctionSpace/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSpace/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSpace/getString()|,4,12>,
			  <|java+method:///smallsql/database/ExpressionFunctionSpace/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/CommandDelete/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,2,10>,
			  <|java+method:///smallsql/database/ExpressionFunctionDegrees/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionDegrees/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionYear/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionYear/getInt()|,2,5>,
			  <|java+method:///smallsql/database/CommandDrop/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,10,29>,
			  <|java+method:///smallsql/database/JoinScrollIndex/createIndex(smallsql.database.Expressions)|,2,7>,
			  <|java+method:///smallsql/database/JoinScrollIndex/next()|,2,8>,
			  <|java+method:///smallsql/database/JoinScrollIndex/nextEquals()|,5,25>,
			  <|java+method:///smallsql/database/ExpressionFunctionSqrt/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionSqrt/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getNumeric()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getString()|,6,13>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getObject()|,35,88>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/convertToString()|,6,16>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getDateTimeLong()|,4,9>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getPrecision()|,7,14>,
			  <|java+method:///smallsql/database/ExpressionFunctionConvert/getScale()|,1,3>,
			  <|java+method:///smallsql/database/TableStorePageInsert/commit()|,1,6>,
			  <|java+method:///smallsql/database/TableStorePageInsert/getLink()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSin/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionSin/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/TableResult/init(smallsql.database.SSConnection)|,3,13>,
			  <|java+method:///smallsql/database/TableResult/execute()|,1,7>,
			  <|java+method:///smallsql/database/TableResult/getTableView()|,1,4>,
			  <|java+method:///smallsql/database/TableResult/deleteRow()|,1,5>,
			  <|java+method:///smallsql/database/TableResult/updateRow(smallsql.database.Expression%5B%5D)|,3,18>,
			  <|java+method:///smallsql/database/TableResult/insertRow(smallsql.database.Expression%5B%5D)|,3,14>,
			  <|java+method:///smallsql/database/TableResult/moveToRow()|,6,25>,
			  <|java+method:///smallsql/database/TableResult/moveToValidRow()|,3,9>,
			  <|java+method:///smallsql/database/TableResult/beforeFirst()|,1,6>,
			  <|java+method:///smallsql/database/TableResult/first()|,1,6>,
			  <|java+method:///smallsql/database/TableResult/setNextFilePos()|,5,14>,
			  <|java+method:///smallsql/database/TableResult/next()|,2,7>,
			  <|java+method:///smallsql/database/TableResult/afterLast()|,1,5>,
			  <|java+method:///smallsql/database/TableResult/getRow()|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getRowPosition()|,1,4>,
			  <|java+method:///smallsql/database/TableResult/setRowPosition(long)|,2,7>,
			  <|java+method:///smallsql/database/TableResult/rowInserted()|,1,4>,
			  <|java+method:///smallsql/database/TableResult/rowDeleted()|,3,11>,
			  <|java+method:///smallsql/database/TableResult/nullRow()|,1,5>,
			  <|java+method:///smallsql/database/TableResult/noRow()|,1,5>,
			  <|java+method:///smallsql/database/TableResult/isNull(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getBoolean(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getInt(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getLong(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getFloat(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getDouble(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getMoney(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getNumeric(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getObject(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getString(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getBytes(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/getDataType(int)|,1,4>,
			  <|java+method:///smallsql/database/TableResult/copyValueInto(int,smallsql.database.StoreImpl)|,1,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/mapIntervalType(int)|,11,25>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getInt()|,11,35>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getNumeric()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getObject()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getString()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampDiff/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/addCase(smallsql.database.Expression,smallsql.database.Expression)|,1,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/setElseResult(smallsql.database.Expression)|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/setEnd()|,3,11>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/setParams(smallsql.database.Expression%5B%5D)|,3,10>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/setParamAt(smallsql.database.Expression,int)|,3,13>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getNumeric()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getObject()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getString()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getBytes()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getDataType()|,3,9>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getPrecision()|,2,7>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getScale()|,2,7>,
			  <|java+method:///smallsql/database/ExpressionFunctionCase/getResult()|,3,6>,
			  <|java+method:///smallsql/database/ViewResult/init(smallsql.database.SSConnection)|,2,7>,
			  <|java+method:///smallsql/database/ViewResult/getTableView()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/deleteRow()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/updateRow(smallsql.database.Expression%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/insertRow(smallsql.database.Expression%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/isNull(int)|,1,4>,
			  <|java+method:///smallsql/database/ViewResult/getBoolean(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getInt(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getLong(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getFloat(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getDouble(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getMoney(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getNumeric(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getObject(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getString(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getBytes(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getDataType(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/beforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/first()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/previous()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/next()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/last()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/isLast()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/isAfterLast()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/afterLast()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/absolute(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/relative(int)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getRow()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/getRowPosition()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/setRowPosition(long)|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/nullRow()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/noRow()|,1,3>,
			  <|java+method:///smallsql/database/ViewResult/execute()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/executeQuery(java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/executeUpdate(java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/execute(java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/executeImpl(java.lang.String)|,3,17>,
			  <|java+method:///smallsql/database/SSStatement/close()|,1,5>,
			  <|java+method:///smallsql/database/SSStatement/getMaxFieldSize()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/setMaxFieldSize(int)|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getMaxRows()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/setMaxRows(int)|,2,5>,
			  <|java+method:///smallsql/database/SSStatement/setEscapeProcessing(boolean)|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getQueryTimeout()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/setQueryTimeout(int)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/cancel()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getWarnings()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/clearWarnings()|,1,2>,
			  <|java+method:///smallsql/database/SSStatement/setCursorName(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getResultSet()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/getUpdateCount()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/getMoreResults()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/setFetchDirection(int)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/getFetchDirection()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/setFetchSize(int)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/getFetchSize()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/getResultSetConcurrency()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/getResultSetType()|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/addBatch(java.lang.String)|,2,5>,
			  <|java+method:///smallsql/database/SSStatement/clearBatch()|,2,6>,
			  <|java+method:///smallsql/database/SSStatement/executeBatch()|,6,22>,
			  <|java+method:///smallsql/database/SSStatement/getConnection()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getMoreResults(int)|,5,16>,
			  <|java+method:///smallsql/database/SSStatement/setNeedGeneratedKeys(int)|,3,11>,
			  <|java+method:///smallsql/database/SSStatement/setNeedGeneratedKeys(int%5B%5D)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/setNeedGeneratedKeys(java.lang.String%5B%5D)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/needGeneratedKeys()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getGeneratedKeyIndexes()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getGeneratedKeyNames()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/setGeneratedKeys(java.sql.ResultSet)|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/getGeneratedKeys()|,2,5>,
			  <|java+method:///smallsql/database/SSStatement/executeUpdate(java.lang.String,int)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/executeUpdate(java.lang.String,int%5B%5D)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/executeUpdate(java.lang.String,java.lang.String%5B%5D)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/execute(java.lang.String,int)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/execute(java.lang.String,int%5B%5D)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/execute(java.lang.String,java.lang.String%5B%5D)|,1,4>,
			  <|java+method:///smallsql/database/SSStatement/getResultSetHoldability()|,1,3>,
			  <|java+method:///smallsql/database/SSStatement/checkStatement()|,2,5>,
			  <|java+method:///smallsql/database/CommandTable/addColumn(smallsql.database.Column)|,1,3>,
			  <|java+method:///smallsql/database/CommandTable/addIndex(smallsql.database.IndexDescription)|,1,3>,
			  <|java+method:///smallsql/database/CommandTable/addForeingnKey(smallsql.database.ForeignKey)|,1,3>,
			  <|java+method:///smallsql/database/CommandTable/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,9,47>,
			  <|java+method:///smallsql/database/CommandTable/addColumn(smallsql.database.Columns,smallsql.database.Column)|,2,6>,
			  <|java+method:///smallsql/database/ExpressionFunctionRepeat/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRepeat/getBytes()|,3,10>,
			  <|java+method:///smallsql/database/ExpressionFunctionRepeat/getString()|,3,10>,
			  <|java+method:///smallsql/database/ExpressionFunctionRepeat/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/MutableDouble/doubleValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableDouble/floatValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableDouble/intValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableDouble/longValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableDouble/toString()|,1,3>,
			  <|java+method:///smallsql/database/MutableDouble/getImmutableObject()|,1,3>,
			  <|java+method:///smallsql/database/Columns/size()|,1,3>,
			  <|java+method:///smallsql/database/Columns/get(int)|,2,5>,
			  <|java+method:///smallsql/database/Columns/get(java.lang.String)|,3,9>,
			  <|java+method:///smallsql/database/Columns/add(smallsql.database.Column)|,3,9>,
			  <|java+method:///smallsql/database/Columns/copy()|,2,9>,
			  <|java+method:///smallsql/database/Columns/resize(int)|,1,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionDayOfYear/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionDayOfYear/getInt()|,2,5>,
			  <|java+method:///smallsql/database/Store/isNull(int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getBoolean(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getBytes(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getDouble(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getFloat(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getInt(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getLong(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getMoney(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getNumeric(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getObject(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/getString(int,int)|,1,1>,
			  <|java+method:///smallsql/database/Store/isValidPage()|,1,3>,
			  <|java+method:///smallsql/database/Store/scanObjectOffsets(int%5B%5D,int%5B%5D)|,1,1>,
			  <|java+method:///smallsql/database/Store/getUsedSize()|,1,1>,
			  <|java+method:///smallsql/database/Store/getNextPagePos()|,1,1>,
			  <|java+method:///smallsql/database/Store/deleteRow(smallsql.database.SSConnection)|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionATan2/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionATan2/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionATan2/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionBitLen/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionBitLen/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionBitLen/getInt()|,2,5>,
			  <|java+method:///smallsql/database/LongTreeListEnum/reset()|,1,4>,
			  <|java+method:///smallsql/database/Distinct/execute()|,1,4>,
			  <|java+method:///smallsql/database/Distinct/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/Distinct/beforeFirst()|,1,4>,
			  <|java+method:///smallsql/database/Distinct/first()|,1,4>,
			  <|java+method:///smallsql/database/Distinct/next()|,5,17>,
			  <|java+method:///smallsql/database/Distinct/afterLast()|,1,4>,
			  <|java+method:///smallsql/database/Distinct/getRow()|,1,3>,
			  <|java+method:///smallsql/database/Distinct/getRowPosition()|,1,3>,
			  <|java+method:///smallsql/database/Distinct/setRowPosition(long)|,1,3>,
			  <|java+method:///smallsql/database/Distinct/nullRow()|,1,4>,
			  <|java+method:///smallsql/database/Distinct/noRow()|,1,4>,
			  <|java+method:///smallsql/database/Distinct/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/Distinct/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/Distinct/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/IndexDescriptions/size()|,1,3>,
			  <|java+method:///smallsql/database/IndexDescriptions/get(int)|,2,5>,
			  <|java+method:///smallsql/database/IndexDescriptions/add(smallsql.database.IndexDescription)|,3,10>,
			  <|java+method:///smallsql/database/IndexDescriptions/resize(int)|,1,5>,
			  <|java+method:///smallsql/database/IndexDescriptions/findBestMatch(smallsql.database.Strings)|,5,17>,
			  <|java+method:///smallsql/database/IndexDescriptions/create(smallsql.database.SSConnection,smallsql.database.Database,smallsql.database.TableView)|,2,5>,
			  <|java+method:///smallsql/database/IndexDescriptions/drop(smallsql.database.Database)|,2,5>,
			  <|java+method:///smallsql/database/IndexDescriptions/close()|,2,5>,
			  <|java+method:///smallsql/database/IndexDescriptions/add(smallsql.database.IndexDescriptions)|,2,5>,
			  <|java+method:///smallsql/database/SSConnection/getDatabase(boolean)|,2,5>,
			  <|java+method:///smallsql/database/SSConnection/getMonitor()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/createStatement()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/prepareStatement(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/prepareCall(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/nativeSQL(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/setAutoCommit(boolean)|,3,7>,
			  <|java+method:///smallsql/database/SSConnection/getAutoCommit()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/add(smallsql.database.TransactionStep)|,1,6>,
			  <|java+method:///smallsql/database/SSConnection/commit()|,4,22>,
			  <|java+method:///smallsql/database/SSConnection/rollbackFile(java.nio.channels.FileChannel)|,3,12>,
			  <|java+method:///smallsql/database/SSConnection/rollback(int)|,2,10>,
			  <|java+method:///smallsql/database/SSConnection/rollback()|,2,14>,
			  <|java+method:///smallsql/database/SSConnection/close()|,1,6>,
			  <|java+method:///smallsql/database/SSConnection/testClosedConnection()|,2,3>,
			  <|java+method:///smallsql/database/SSConnection/isClosed()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/getMetaData()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/setReadOnly(boolean)|,1,2>,
			  <|java+method:///smallsql/database/SSConnection/isReadOnly()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/setCatalog(java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSConnection/getCatalog()|,2,5>,
			  <|java+method:///smallsql/database/SSConnection/setTransactionIsolation(int)|,2,6>,
			  <|java+method:///smallsql/database/SSConnection/getTransactionIsolation()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/getWarnings()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/clearWarnings()|,1,2>,
			  <|java+method:///smallsql/database/SSConnection/createStatement(int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/prepareStatement(java.lang.String,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/prepareCall(java.lang.String,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/getTypeMap()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/setTypeMap(java.util.Map)|,1,2>,
			  <|java+method:///smallsql/database/SSConnection/setHoldability(int)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/getHoldability()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/getSavepoint()|,1,4>,
			  <|java+method:///smallsql/database/SSConnection/setSavepoint()|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/setSavepoint(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/rollback(java.sql.Savepoint)|,3,10>,
			  <|java+method:///smallsql/database/SSConnection/releaseSavepoint(java.sql.Savepoint)|,2,7>,
			  <|java+method:///smallsql/database/SSConnection/createStatement(int,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/prepareStatement(java.lang.String,int,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/prepareCall(java.lang.String,int,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSConnection/prepareStatement(java.lang.String,int)|,1,5>,
			  <|java+method:///smallsql/database/SSConnection/prepareStatement(java.lang.String,int%5B%5D)|,1,5>,
			  <|java+method:///smallsql/database/SSConnection/prepareStatement(java.lang.String,java.lang.String%5B%5D)|,1,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionExp/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionExp/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionMonth/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionMonth/getInt()|,2,5>,
			  <|java+method:///smallsql/database/View/createColumns(smallsql.database.SSConnection)|,3,14>,
			  <|java+method:///smallsql/database/View/drop(smallsql.database.Database,java.lang.String)|,2,5>,
			  <|java+method:///smallsql/database/View/write(smallsql.database.Database,smallsql.database.SSConnection)|,1,9>,
			  <|java+method:///smallsql/database/View/writeMagic(java.nio.channels.FileChannel)|,1,8>,
			  <|java+method:///smallsql/database/ExpressionFunctionTan/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionTan/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionASin/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionASin/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/IndexNodeScrollStatus/afterLast()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLog10/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionLog10/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/SSDriver/connect(java.lang.String,java.util.Properties)|,2,6>,
			  <|java+method:///smallsql/database/SSDriver/parse(java.lang.String,java.util.Properties)|,7,30>,
			  <|java+method:///smallsql/database/SSDriver/acceptsURL(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSDriver/getPropertyInfo(java.lang.String,java.util.Properties)|,1,7>,
			  <|java+method:///smallsql/database/SSDriver/getMajorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDriver/getMinorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDriver/jdbcCompliant()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/allProceduresAreCallable()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/allTablesAreSelectable()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getURL()|,2,6>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getUserName()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/isReadOnly()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/nullsAreSortedHigh()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/nullsAreSortedLow()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/nullsAreSortedAtStart()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/nullsAreSortedAtEnd()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDatabaseProductName()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDatabaseProductVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDriverName()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDriverVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDriverMajorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDriverMinorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/usesLocalFiles()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/usesLocalFilePerTable()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsMixedCaseIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/storesUpperCaseIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/storesLowerCaseIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/storesMixedCaseIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsMixedCaseQuotedIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/storesUpperCaseQuotedIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/storesLowerCaseQuotedIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/storesMixedCaseQuotedIdentifiers()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getIdentifierQuoteString()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSQLKeywords()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getFunctions(int,int)|,3,8>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getNumericFunctions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getStringFunctions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSystemFunctions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getTimeDateFunctions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSearchStringEscape()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getExtraNameCharacters()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsAlterTableWithAddColumn()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsAlterTableWithDropColumn()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsColumnAliasing()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/nullPlusNonNullIsNull()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsConvert()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsConvert(int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsTableCorrelationNames()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsDifferentTableCorrelationNames()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsExpressionsInOrderBy()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsOrderByUnrelated()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsGroupBy()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsGroupByUnrelated()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsGroupByBeyondSelect()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsLikeEscapeClause()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsMultipleResultSets()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsMultipleTransactions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsNonNullableColumns()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsMinimumSQLGrammar()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsCoreSQLGrammar()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsExtendedSQLGrammar()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsANSI92EntryLevelSQL()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsANSI92IntermediateSQL()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsANSI92FullSQL()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsIntegrityEnhancementFacility()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsOuterJoins()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsFullOuterJoins()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsLimitedOuterJoins()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSchemaTerm()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getProcedureTerm()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getCatalogTerm()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/isCatalogAtStart()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getCatalogSeparator()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSchemasInDataManipulation()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSchemasInProcedureCalls()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSchemasInTableDefinitions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSchemasInIndexDefinitions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSchemasInPrivilegeDefinitions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsCatalogsInDataManipulation()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsCatalogsInProcedureCalls()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsCatalogsInTableDefinitions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsCatalogsInIndexDefinitions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsCatalogsInPrivilegeDefinitions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsPositionedDelete()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsPositionedUpdate()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSelectForUpdate()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsStoredProcedures()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSubqueriesInComparisons()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSubqueriesInExists()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSubqueriesInIns()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSubqueriesInQuantifieds()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsCorrelatedSubqueries()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsUnion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsUnionAll()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsOpenCursorsAcrossCommit()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsOpenCursorsAcrossRollback()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsOpenStatementsAcrossCommit()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsOpenStatementsAcrossRollback()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxBinaryLiteralLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxCharLiteralLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxColumnNameLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxColumnsInGroupBy()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxColumnsInIndex()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxColumnsInOrderBy()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxColumnsInSelect()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxColumnsInTable()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxConnections()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxCursorNameLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxIndexLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxSchemaNameLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxProcedureNameLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxCatalogNameLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxRowSize()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/doesMaxRowSizeIncludeBlobs()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxStatementLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxStatements()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxTableNameLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxTablesInSelect()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getMaxUserNameLength()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDefaultTransactionIsolation()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsTransactions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsTransactionIsolationLevel(int)|,6,11>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsDataDefinitionAndDataManipulationTransactions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsDataManipulationTransactionsOnly()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/dataDefinitionCausesTransactionCommit()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/dataDefinitionIgnoredInTransactions()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getProcedures(java.lang.String,java.lang.String,java.lang.String)|,1,5>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)|,1,5>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String%5B%5D)|,12,49>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSchemas()|,1,5>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getCatalogs()|,1,5>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getTableTypes()|,1,5>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)|,2,9>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)|,2,9>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getVersionColumns(java.lang.String,java.lang.String,java.lang.String)|,2,9>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)|,2,9>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getImportedKeys(java.lang.String,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getExportedKeys(java.lang.String,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)|,2,9>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getTypeInfo()|,1,37>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)|,2,9>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsResultSetType(int)|,4,9>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsResultSetConcurrency(int,int)|,2,6>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/ownUpdatesAreVisible(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/ownDeletesAreVisible(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/ownInsertsAreVisible(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/othersUpdatesAreVisible(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/othersDeletesAreVisible(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/othersInsertsAreVisible(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/updatesAreDetected(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/deletesAreDetected(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/insertsAreDetected(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsBatchUpdates()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getUDTs(java.lang.String,java.lang.String,java.lang.String,int%5B%5D)|,1,5>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getConnection()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsSavepoints()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsNamedParameters()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsMultipleOpenResults()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsGetGeneratedKeys()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSuperTypes(java.lang.String,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSuperTables(java.lang.String,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsResultSetHoldability(int)|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getResultSetHoldability()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDatabaseMajorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getDatabaseMinorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getJDBCMajorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getJDBCMinorVersion()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/getSQLStateType()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/locatorsUpdateCopy()|,1,3>,
			  <|java+method:///smallsql/database/SSDatabaseMetaData/supportsStatementPooling()|,1,3>,
			  <|java+method:///smallsql/database/IndexDescription/createName(java.lang.String,java.lang.String)|,2,6>,
			  <|java+method:///smallsql/database/IndexDescription/getName()|,1,3>,
			  <|java+method:///smallsql/database/IndexDescription/isPrimary()|,1,3>,
			  <|java+method:///smallsql/database/IndexDescription/isUnique()|,1,3>,
			  <|java+method:///smallsql/database/IndexDescription/getColumns()|,1,3>,
			  <|java+method:///smallsql/database/IndexDescription/matchFactor(smallsql.database.Strings)|,5,14>,
			  <|java+method:///smallsql/database/IndexDescription/init(smallsql.database.Database,smallsql.database.TableView)|,3,10>,
			  <|java+method:///smallsql/database/IndexDescription/create(smallsql.database.SSConnection,smallsql.database.Database,smallsql.database.TableView)|,1,4>,
			  <|java+method:///smallsql/database/IndexDescription/getFile(smallsql.database.Database,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/IndexDescription/createFile(smallsql.database.SSConnection,smallsql.database.Database)|,3,12>,
			  <|java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database)|,7,28>,
			  <|java+method:///smallsql/database/IndexDescription/drop(smallsql.database.Database)|,2,5>,
			  <|java+method:///smallsql/database/IndexDescription/close()|,2,6>,
			  <|java+method:///smallsql/database/IndexDescription/writeMagic(java.nio.channels.FileChannel)|,1,7>,
			  <|java+method:///smallsql/database/IndexDescription/writeExpression(int,smallsql.database.Expression)|,2,5>,
			  <|java+method:///smallsql/database/IndexDescription/writeFinish(smallsql.database.SSConnection)|,1,2>,
			  <|java+method:///smallsql/database/IndexDescription/save(smallsql.database.StoreImpl)|,2,8>,
			  <|java+method:///smallsql/database/IndexDescription/load(smallsql.database.Database,smallsql.database.TableView,smallsql.database.StoreImpl)|,2,16>,
			  <|java+method:///smallsql/database/SSCallableStatement/getValue(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/findParameter(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/registerOutParameter(int,int)|,1,5>,
			  <|java+method:///smallsql/database/SSCallableStatement/registerOutParameter(int,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/wasNull()|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getString(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBoolean(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getByte(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getShort(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getInt(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getLong(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getFloat(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getDouble(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int,int)|,3,10>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBytes(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getDate(int)|,3,10>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTime(int)|,3,10>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTimestamp(int)|,3,10>,
			  <|java+method:///smallsql/database/SSCallableStatement/getObject(int)|,2,9>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBigDecimal(int)|,3,10>,
			  <|java+method:///smallsql/database/SSCallableStatement/getObject(int,java.util.Map)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getRef(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBlob(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getClob(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getArray(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getDate(int,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTime(int,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTimestamp(int,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/registerOutParameter(int,int,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/registerOutParameter(java.lang.String,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/registerOutParameter(java.lang.String,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/registerOutParameter(java.lang.String,int,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getURL(int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setURL(java.lang.String,java.net.URL)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setNull(java.lang.String,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setBoolean(java.lang.String,boolean)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setByte(java.lang.String,byte)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setShort(java.lang.String,short)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setInt(java.lang.String,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setLong(java.lang.String,long)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setFloat(java.lang.String,float)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setDouble(java.lang.String,double)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setBigDecimal(java.lang.String,java.math.BigDecimal)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setString(java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setBytes(java.lang.String,byte%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setDate(java.lang.String,java.sql.Date)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setTime(java.lang.String,java.sql.Time)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setTimestamp(java.lang.String,java.sql.Timestamp)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setAsciiStream(java.lang.String,java.io.InputStream,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setBinaryStream(java.lang.String,java.io.InputStream,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setObject(java.lang.String,java.lang.Object,int,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setObject(java.lang.String,java.lang.Object,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setObject(java.lang.String,java.lang.Object)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setCharacterStream(java.lang.String,java.io.Reader,int)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setDate(java.lang.String,java.sql.Date,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setTime(java.lang.String,java.sql.Time,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/setNull(java.lang.String,int,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getString(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBoolean(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getByte(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getShort(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getInt(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getLong(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getFloat(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getDouble(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBytes(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getDate(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTime(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTimestamp(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getObject(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBigDecimal(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getObject(java.lang.String,java.util.Map)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getRef(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getBlob(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getClob(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getArray(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getDate(java.lang.String,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTime(java.lang.String,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getTimestamp(java.lang.String,java.util.Calendar)|,1,3>,
			  <|java+method:///smallsql/database/SSCallableStatement/getURL(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionFloor/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionFloor/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionFloor/getString()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionHour/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionHour/getInt()|,2,5>,
			  <|java+method:///smallsql/database/Lobs/getFile(smallsql.database.Database)|,1,4>,
			  <|java+method:///smallsql/database/CommandInsert/addColumnExpression(smallsql.database.Expression)|,2,6>,
			  <|java+method:///smallsql/database/CommandInsert/addValues(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/CommandInsert/addValues(smallsql.database.CommandSelect)|,1,3>,
			  <|java+method:///smallsql/database/CommandInsert/compile(smallsql.database.SSConnection)|,9,32>,
			  <|java+method:///smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,18,70>,
			  <|java+method:///smallsql/database/Database/getDatabase(java.lang.String,smallsql.database.SSConnection,boolean)|,6,28>,
			  <|java+method:///smallsql/database/Database/getDatabase(smallsql.database.SSConnection,java.lang.String)|,1,5>,
			  <|java+method:///smallsql/database/Database/getName()|,1,3>,
			  <|java+method:///smallsql/database/Database/isReadOnly()|,1,3>,
			  <|java+method:///smallsql/database/Database/closeConnection(smallsql.database.SSConnection)|,4,18>,
			  <|java+method:///smallsql/database/Database/close()|,2,11>,
			  <|java+method:///smallsql/database/Database/getTableView(smallsql.database.SSConnection,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Database/getTableView(smallsql.database.SSConnection,java.lang.String)|,2,10>,
			  <|java+method:///smallsql/database/Database/dropTable(smallsql.database.SSConnection,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Database/dropTable(smallsql.database.SSConnection,java.lang.String)|,2,11>,
			  <|java+method:///smallsql/database/Database/removeTableView(java.lang.String)|,1,5>,
			  <|java+method:///smallsql/database/Database/replaceTable(smallsql.database.Table,smallsql.database.Table)|,3,19>,
			  <|java+method:///smallsql/database/Database/dropView(smallsql.database.SSConnection,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Database/dropView(java.lang.String)|,2,8>,
			  <|java+method:///smallsql/database/Database/checkForeignKeys(smallsql.database.SSConnection,smallsql.database.ForeignKeys)|,3,9>,
			  <|java+method:///smallsql/database/Database/createTable(smallsql.database.SSConnection,java.lang.String,smallsql.database.Columns,smallsql.database.IndexDescriptions,smallsql.database.ForeignKeys)|,1,7>,
			  <|java+method:///smallsql/database/Database/createTable(smallsql.database.SSConnection,java.lang.String,smallsql.database.Columns,smallsql.database.IndexDescriptions,smallsql.database.IndexDescriptions,smallsql.database.ForeignKeys)|,1,8>,
			  <|java+method:///smallsql/database/Database/createView(smallsql.database.SSConnection,java.lang.String,java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Database/getCatalogs(smallsql.database.Database)|,5,20>,
			  <|java+method:///smallsql/database/Database/getTables(java.lang.String)|,5,14>,
			  <|java+method:///smallsql/database/Database/getColumns(smallsql.database.SSConnection,java.lang.String,java.lang.String)|,4,33>,
			  <|java+method:///smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)|,6,39>,
			  <|java+method:///smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)|,6,33>,
			  <|java+method:///smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)|,6,28>,
			  <|java+method:///smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)|,5,29>,
			  <|java+method:///smallsql/database/ForeignKeys/size()|,1,3>,
			  <|java+method:///smallsql/database/ForeignKeys/get(int)|,2,5>,
			  <|java+method:///smallsql/database/ForeignKeys/add(smallsql.database.ForeignKey)|,2,6>,
			  <|java+method:///smallsql/database/ForeignKeys/resize(int)|,1,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionRight/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRight/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRight/getBytes()|,3,9>,
			  <|java+method:///smallsql/database/ExpressionFunctionRight/getString()|,2,7>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1/getObject()|,29,46>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnP1/getScale()|,1,3>,
			  <|java+method:///smallsql/database/SQLParser/parse(smallsql.database.SSConnection,java.lang.String)|,2,9>,
			  <|java+method:///smallsql/database/SQLParser/parse(char%5B%5D)|,12,37>,
			  <|java+method:///smallsql/database/SQLParser/parseExpression(java.lang.String)|,1,6>,
			  <|java+method:///smallsql/database/SQLParser/createSyntaxError(smallsql.database.SQLToken,java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SQLParser/createSyntaxError(smallsql.database.SQLToken,java.lang.String,java.lang.Object)|,1,5>,
			  <|java+method:///smallsql/database/SQLParser/createSyntaxError(smallsql.database.SQLToken,int%5B%5D)|,5,18>,
			  <|java+method:///smallsql/database/SQLParser/getErrorString(smallsql.database.SQLToken,java.lang.String,java.lang.Object)|,3,28>,
			  <|java+method:///smallsql/database/SQLParser/checkValidIdentifier(java.lang.String,smallsql.database.SQLToken)|,5,15>,
			  <|java+method:///smallsql/database/SQLParser/getIdentifier(smallsql.database.SQLToken)|,1,5>,
			  <|java+method:///smallsql/database/SQLParser/nextIdentifier()|,1,3>,
			  <|java+method:///smallsql/database/SQLParser/nextIdentiferPart(java.lang.String)|,2,9>,
			  <|java+method:///smallsql/database/SQLParser/isKeyword(smallsql.database.SQLToken)|,15,20>,
			  <|java+method:///smallsql/database/SQLParser/lastToken()|,2,6>,
			  <|java+method:///smallsql/database/SQLParser/previousToken()|,1,3>,
			  <|java+method:///smallsql/database/SQLParser/nextToken()|,2,7>,
			  <|java+method:///smallsql/database/SQLParser/nextToken(int%5B%5D)|,9,20>,
			  <|java+method:///smallsql/database/SQLParser/singleSelect()|,16,60>,
			  <|java+method:///smallsql/database/SQLParser/select()|,5,31>,
			  <|java+method:///smallsql/database/SQLParser/delete()|,3,12>,
			  <|java+method:///smallsql/database/SQLParser/truncate()|,1,6>,
			  <|java+method:///smallsql/database/SQLParser/insert()|,9,40>,
			  <|java+method:///smallsql/database/SQLParser/update()|,6,26>,
			  <|java+method:///smallsql/database/SQLParser/create()|,10,27>,
			  <|java+method:///smallsql/database/SQLParser/createDatabase()|,2,5>,
			  <|java+method:///smallsql/database/SQLParser/createTable()|,13,56>,
			  <|java+method:///smallsql/database/SQLParser/addColumn(smallsql.database.SQLToken,smallsql.database.CommandTable)|,16,56>,
			  <|java+method:///smallsql/database/SQLParser/index(smallsql.database.Command,int,java.lang.String,java.lang.String,java.lang.String)|,6,24>,
			  <|java+method:///smallsql/database/SQLParser/datatype(boolean)|,39,107>,
			  <|java+method:///smallsql/database/SQLParser/createView()|,1,9>,
			  <|java+method:///smallsql/database/SQLParser/createIndex(boolean)|,2,20>,
			  <|java+method:///smallsql/database/SQLParser/createProcedure()|,1,4>,
			  <|java+method:///smallsql/database/SQLParser/drop()|,7,17>,
			  <|java+method:///smallsql/database/SQLParser/alter()|,7,20>,
			  <|java+method:///smallsql/database/SQLParser/alterTable(java.lang.String,java.lang.String)|,2,16>,
			  <|java+method:///smallsql/database/SQLParser/set()|,2,9>,
			  <|java+method:///smallsql/database/SQLParser/setTransaction()|,6,30>,
			  <|java+method:///smallsql/database/SQLParser/execute()|,1,3>,
			  <|java+method:///smallsql/database/SQLParser/expressionParenthesisList(smallsql.database.Command)|,5,22>,
			  <|java+method:///smallsql/database/SQLParser/expressionTokenList(smallsql.database.Command,int)|,8,30>,
			  <|java+method:///smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)|,6,24>,
			  <|java+method:///smallsql/database/SQLParser/expression(smallsql.database.Command,int)|,31,94>,
			  <|java+method:///smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)|,32,114>,
			  <|java+method:///smallsql/database/SQLParser/caseExpr(smallsql.database.Command)|,7,32>,
			  <|java+method:///smallsql/database/SQLParser/function(smallsql.database.Command,smallsql.database.SQLToken,boolean)|,82,360>,
			  <|java+method:///smallsql/database/SQLParser/tableSource(smallsql.database.Command,smallsql.database.DataSources)|,6,32>,
			  <|java+method:///smallsql/database/SQLParser/join(smallsql.database.Command,smallsql.database.DataSources,smallsql.database.RowSource,int)|,6,22>,
			  <|java+method:///smallsql/database/SQLParser/rowSource(smallsql.database.Command,smallsql.database.DataSources,int)|,20,59>,
			  <|java+method:///smallsql/database/SQLParser/from(smallsql.database.CommandSelect)|,5,22>,
			  <|java+method:///smallsql/database/SQLParser/order(smallsql.database.CommandSelect)|,1,4>,
			  <|java+method:///smallsql/database/SQLParser/limit(smallsql.database.CommandSelect)|,2,9>,
			  <|java+method:///smallsql/database/SQLParser/group(smallsql.database.CommandSelect)|,1,4>,
			  <|java+method:///smallsql/database/SQLParser/where(smallsql.database.CommandSelect)|,1,3>,
			  <|java+method:///smallsql/database/SQLParser/having(smallsql.database.CommandSelect)|,1,3>,
			  <|java+method:///smallsql/database/DataSources/size()|,1,3>,
			  <|java+method:///smallsql/database/DataSources/get(int)|,2,5>,
			  <|java+method:///smallsql/database/DataSources/add(smallsql.database.DataSource)|,2,8>,
			  <|java+method:///smallsql/database/IndexScrollStatus/reset()|,1,5>,
			  <|java+method:///smallsql/database/IndexScrollStatus/getRowOffset(boolean)|,15,69>,
			  <|java+method:///smallsql/database/IndexScrollStatus/afterLast()|,1,5>,
			  <|java+method:///smallsql/database/IndexScrollStatus/getReturnValue(java.lang.Object)|,2,14>,
			  <|java+method:///smallsql/database/SSSavepoint/getSavepointId()|,1,3>,
			  <|java+method:///smallsql/database/SSSavepoint/getSavepointName()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/createIndexNode(boolean,char)|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/getDigit()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/getUnique()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/isEmpty()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/clear()|,1,5>,
			  <|java+method:///smallsql/database/IndexNode/clearValue()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/getValue()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/getChildNodes()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/getChildNode(char)|,2,5>,
			  <|java+method:///smallsql/database/IndexNode/getRemainderValue()|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/addNode(char)|,3,11>,
			  <|java+method:///smallsql/database/IndexNode/removeNode(char)|,2,10>,
			  <|java+method:///smallsql/database/IndexNode/addNode(char,long)|,2,5>,
			  <|java+method:///smallsql/database/IndexNode/saveValue(long)|,4,12>,
			  <|java+method:///smallsql/database/IndexNode/addRemainderKey(long,long,int)|,1,4>,
			  <|java+method:///smallsql/database/IndexNode/addRemainderKey(long,char%5B%5D,int)|,1,4>,
			  <|java+method:///smallsql/database/IndexNode/addRoot(char)|,2,5>,
			  <|java+method:///smallsql/database/IndexNode/addRootValue(char%5B%5D,int)|,1,4>,
			  <|java+method:///smallsql/database/IndexNode/addRootValue(long,int)|,1,4>,
			  <|java+method:///smallsql/database/IndexNode/moveRemainderValue()|,2,12>,
			  <|java+method:///smallsql/database/IndexNode/moveRemainderValueSub(java.lang.Object,char%5B%5D)|,1,6>,
			  <|java+method:///smallsql/database/IndexNode/saveRemainderValue(char%5B%5D,int)|,1,5>,
			  <|java+method:///smallsql/database/IndexNode/saveRemainderValue(long,int)|,2,6>,
			  <|java+method:///smallsql/database/IndexNode/addRoot()|,2,7>,
			  <|java+method:///smallsql/database/IndexNode/saveNode(smallsql.database.IndexNode)|,2,13>,
			  <|java+method:///smallsql/database/IndexNode/findNodeInsertPos(char,int,int)|,5,12>,
			  <|java+method:///smallsql/database/IndexNode/findNodePos(char)|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/findNodePos(char,int,int)|,5,12>,
			  <|java+method:///smallsql/database/IndexNode/save(smallsql.database.StoreImpl)|,7,25>,
			  <|java+method:///smallsql/database/IndexNode/saveRef(smallsql.database.StoreImpl)|,1,2>,
			  <|java+method:///smallsql/database/IndexNode/loadRef(long)|,1,3>,
			  <|java+method:///smallsql/database/IndexNode/load(smallsql.database.StoreImpl)|,6,25>,
			  <|java+method:///smallsql/database/CommandUpdate/addSetting(smallsql.database.Expression,smallsql.database.Expression)|,1,4>,
			  <|java+method:///smallsql/database/CommandUpdate/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,4,24>,
			  <|java+method:///smallsql/database/RowSource/isScrollable()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/beforeFirst()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/RowSource/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/RowSource/first()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/previous()|,1,3>,
			  <|java+method:///smallsql/database/RowSource/next()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/last()|,1,3>,
			  <|java+method:///smallsql/database/RowSource/isLast()|,1,3>,
			  <|java+method:///smallsql/database/RowSource/isAfterLast()|,1,3>,
			  <|java+method:///smallsql/database/RowSource/afterLast()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/absolute(int)|,1,3>,
			  <|java+method:///smallsql/database/RowSource/relative(int)|,1,3>,
			  <|java+method:///smallsql/database/RowSource/getRow()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/getRowPosition()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/setRowPosition(long)|,1,1>,
			  <|java+method:///smallsql/database/RowSource/nullRow()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/noRow()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/rowInserted()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/rowDeleted()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/hasAlias()|,1,3>,
			  <|java+method:///smallsql/database/RowSource/setAlias(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/RowSource/execute()|,1,1>,
			  <|java+method:///smallsql/database/RowSource/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionCos/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionCos/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/StorePageMap/size()|,1,3>,
			  <|java+method:///smallsql/database/StorePageMap/isEmpty()|,1,3>,
			  <|java+method:///smallsql/database/StorePageMap/get(long)|,4,11>,
			  <|java+method:///smallsql/database/StorePageMap/containsKey(long)|,1,3>,
			  <|java+method:///smallsql/database/StorePageMap/add(long,smallsql.database.TableStorePage)|,2,7>,
			  <|java+method:///smallsql/database/StorePageMap/resize(int)|,1,6>,
			  <|java+method:///smallsql/database/StorePageMap/transfer(smallsql.database.StorePageMap.Entry%5B%5D)|,5,23>,
			  <|java+method:///smallsql/database/StorePageMap/remove(long)|,4,19>,
			  <|java+method:///smallsql/database/StorePageMap/clear()|,2,6>,
			  <|java+method:///smallsql/database/StorePageMap/containsValue(smallsql.database.TableStorePage)|,4,8>,
			  <|java+method:///smallsql/database/Expressions/size()|,1,3>,
			  <|java+method:///smallsql/database/Expressions/setSize(int)|,3,5>,
			  <|java+method:///smallsql/database/Expressions/get(int)|,2,5>,
			  <|java+method:///smallsql/database/Expressions/add(smallsql.database.Expression)|,2,6>,
			  <|java+method:///smallsql/database/Expressions/add(int,smallsql.database.Expression)|,2,7>,
			  <|java+method:///smallsql/database/Expressions/addAll(smallsql.database.Expressions)|,2,8>,
			  <|java+method:///smallsql/database/Expressions/clear()|,1,3>,
			  <|java+method:///smallsql/database/Expressions/remove(int)|,1,3>,
			  <|java+method:///smallsql/database/Expressions/set(int,smallsql.database.Expression)|,1,3>,
			  <|java+method:///smallsql/database/Expressions/indexOf(smallsql.database.Expression)|,6,12>,
			  <|java+method:///smallsql/database/Expressions/toArray(smallsql.database.Expression%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/Expressions/toArray()|,1,5>,
			  <|java+method:///smallsql/database/Expressions/resize(int)|,1,5>,
			  <|java+method:///smallsql/database/GroupResult/addInternalExpressionFromGroupBy(smallsql.database.Expression)|,3,11>,
			  <|java+method:///smallsql/database/GroupResult/addInternalExpressionFromSelect(smallsql.database.Expression)|,8,24>,
			  <|java+method:///smallsql/database/GroupResult/patchExpressions(smallsql.database.Expressions)|,3,6>,
			  <|java+method:///smallsql/database/GroupResult/patchExpressions(smallsql.database.Expression)|,3,7>,
			  <|java+method:///smallsql/database/GroupResult/patchExpression(smallsql.database.Expression)|,9,37>,
			  <|java+method:///smallsql/database/GroupResult/execute()|,5,20>,
			  <|java+method:///smallsql/database/GroupResult/addGroupRow()|,3,10>,
			  <|java+method:///smallsql/database/GroupResult/accumulateRow()|,2,6>,
			  <|java+method:///smallsql/database/ExpressionFunctionATan/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionATan/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/language/Language_de/getEntries()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAscii/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAscii/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAscii/getInt()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionAscii/getObject()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionSubstring/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSubstring/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSubstring/getBytes()|,5,19>,
			  <|java+method:///smallsql/database/ExpressionFunctionSubstring/getString()|,3,11>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getNumeric()|,3,6>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getObject()|,14,31>,
			  <|java+method:///smallsql/database/ExpressionFunctionAbs/getString()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionRadians/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionRadians/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/CommandCreateDatabase/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,3,11>,
			  <|java+method:///smallsql/database/JoinScroll/beforeFirst()|,1,8>,
			  <|java+method:///smallsql/database/JoinScroll/next()|,25,94>,
			  <|java+method:///smallsql/database/JoinScroll/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReplace/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReplace/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReplace/getBytes()|,5,24>,
			  <|java+method:///smallsql/database/ExpressionFunctionReplace/getString()|,5,24>,
			  <|java+method:///smallsql/database/ExpressionFunctionReplace/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/MutableInteger/doubleValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableInteger/floatValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableInteger/intValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableInteger/longValue()|,1,3>,
			  <|java+method:///smallsql/database/MutableInteger/toString()|,1,3>,
			  <|java+method:///smallsql/database/MutableInteger/getImmutableObject()|,1,3>,
			  <|java+method:///smallsql/database/DateTime/calcMillis(smallsql.database.DateTime.Details)|,1,3>,
			  <|java+method:///smallsql/database/DateTime/calcMillis(int,int,int,int,int,int,int)|,3,17>,
			  <|java+method:///smallsql/database/DateTime/now()|,1,3>,
			  <|java+method:///smallsql/database/DateTime/dayOfWeek(long)|,1,3>,
			  <|java+method:///smallsql/database/DateTime/parse(java.util.Date)|,1,4>,
			  <|java+method:///smallsql/database/DateTime/valueOf(java.util.Date)|,4,12>,
			  <|java+method:///smallsql/database/DateTime/valueOf(java.sql.Date)|,2,4>,
			  <|java+method:///smallsql/database/DateTime/valueOf(java.sql.Time)|,2,4>,
			  <|java+method:///smallsql/database/DateTime/valueOf(java.sql.Timestamp)|,2,4>,
			  <|java+method:///smallsql/database/DateTime/valueOf(java.lang.String,int)|,2,4>,
			  <|java+method:///smallsql/database/DateTime/parse(java.lang.String)|,28,109>,
			  <|java+method:///smallsql/database/DateTime/getTimeMillis()|,1,3>,
			  <|java+method:///smallsql/database/DateTime/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/DateTime/toString()|,6,26>,
			  <|java+method:///smallsql/database/DateTime/equals(java.lang.Object)|,2,5>,
			  <|java+method:///smallsql/database/DateTime/toString(int)|,40,289>,
			  <|java+method:///smallsql/database/DateTime/formatNumber(int,int,java.lang.StringBuffer)|,3,8>,
			  <|java+method:///smallsql/database/DateTime/formatMillis(int,java.lang.StringBuffer)|,3,10>,
			  <|java+method:///smallsql/database/DateTime/formatHour12(int,java.lang.StringBuffer)|,2,5>,
			  <|java+method:///smallsql/database/DateTime/addDateTimeOffset(long)|,1,3>,
			  <|java+method:///smallsql/database/DateTime/addDateTimeOffset(long,java.util.TimeZone)|,2,16>,
			  <|java+method:///smallsql/database/DateTime/removeDateTimeOffset(long)|,1,7>,
			  <|java+method:///smallsql/database/DateTime/getTimestamp(long)|,1,3>,
			  <|java+method:///smallsql/database/DateTime/getTime(long)|,1,3>,
			  <|java+method:///smallsql/database/DateTime/getDate(long)|,1,3>,
			  <|java+method:///smallsql/database/DateTime/getImmutableObject()|,3,10>,
			  <|java+method:///smallsql/database/DateTime/isLeapYear(int)|,1,3>,
			  <|java+method:///smallsql/database/Where/getFrom()|,1,3>,
			  <|java+method:///smallsql/database/Where/isValidRow()|,1,3>,
			  <|java+method:///smallsql/database/Where/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/Where/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/Where/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/Where/isLast()|,2,7>,
			  <|java+method:///smallsql/database/Where/isAfterLast()|,1,3>,
			  <|java+method:///smallsql/database/Where/beforeFirst()|,1,4>,
			  <|java+method:///smallsql/database/Where/first()|,2,8>,
			  <|java+method:///smallsql/database/Where/previous()|,2,8>,
			  <|java+method:///smallsql/database/Where/next()|,2,8>,
			  <|java+method:///smallsql/database/Where/last()|,2,4>,
			  <|java+method:///smallsql/database/Where/afterLast()|,2,3>,
			  <|java+method:///smallsql/database/Where/getRow()|,1,3>,
			  <|java+method:///smallsql/database/Where/getRowPosition()|,1,3>,
			  <|java+method:///smallsql/database/Where/setRowPosition(long)|,1,3>,
			  <|java+method:///smallsql/database/Where/nullRow()|,1,4>,
			  <|java+method:///smallsql/database/Where/noRow()|,1,4>,
			  <|java+method:///smallsql/database/Where/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/Where/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/Where/execute()|,1,3>,
			  <|java+method:///smallsql/database/Where/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/addRow(smallsql.database.ExpressionValue%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getColumn(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/addColumn(smallsql.database.Column)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/beforeFirst()|,1,4>,
			  <|java+method:///smallsql/database/MemoryResult/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/first()|,1,4>,
			  <|java+method:///smallsql/database/MemoryResult/previous()|,2,4>,
			  <|java+method:///smallsql/database/MemoryResult/next()|,1,4>,
			  <|java+method:///smallsql/database/MemoryResult/last()|,1,4>,
			  <|java+method:///smallsql/database/MemoryResult/isLast()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/isAfterLast()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/afterLast()|,1,4>,
			  <|java+method:///smallsql/database/MemoryResult/absolute(int)|,2,7>,
			  <|java+method:///smallsql/database/MemoryResult/relative(int)|,2,5>,
			  <|java+method:///smallsql/database/MemoryResult/getRow()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getRowPosition()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/setRowPosition(long)|,1,4>,
			  <|java+method:///smallsql/database/MemoryResult/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/nullRow()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/noRow()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/move()|,2,8>,
			  <|java+method:///smallsql/database/MemoryResult/isNull(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getBoolean(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getInt(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getLong(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getFloat(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getDouble(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getMoney(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getNumeric(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getObject(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getString(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getBytes(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getDataType(int)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/getTableView()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/deleteRow()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/updateRow(smallsql.database.Expression%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/insertRow(smallsql.database.Expression%5B%5D)|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/get(int)|,2,4>,
			  <|java+method:///smallsql/database/MemoryResult/getRowCount()|,1,3>,
			  <|java+method:///smallsql/database/MemoryResult/execute()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLocate/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLocate/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLocate/getInt()|,3,10>,
			  <|java+method:///smallsql/database/DataSource/isNull(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getBoolean(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getInt(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getLong(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getFloat(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getDouble(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getMoney(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getNumeric(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getObject(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getString(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getBytes(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getDataType(int)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/init(smallsql.database.SSConnection)|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getAlias()|,1,1>,
			  <|java+method:///smallsql/database/DataSource/getTableView()|,1,1>,
			  <|java+method:///smallsql/database/DataSource/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,3,9>,
			  <|java+method:///smallsql/database/Index/createScrollStatus(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)|,4,14>,
			  <|java+method:///smallsql/database/Index/findRows(smallsql.database.Expression%5B%5D,boolean,java.util.ArrayList)|,4,14>,
			  <|java+method:///smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)|,32,65>,
			  <|java+method:///smallsql/database/Index/addValues(long,smallsql.database.Expressions)|,31,66>,
			  <|java+method:///smallsql/database/Index/removeValue(long,smallsql.database.Expressions)|,5,18>,
			  <|java+method:///smallsql/database/Index/findNull(smallsql.database.IndexNode)|,1,3>,
			  <|java+method:///smallsql/database/Index/addNull(smallsql.database.IndexNode,long,boolean)|,2,7>,
			  <|java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,long,int,java.util.ArrayList)|,5,12>,
			  <|java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)|,8,28>,
			  <|java+method:///smallsql/database/Index/find(smallsql.database.IndexNode,char%5B%5D,java.util.ArrayList)|,6,17>,
			  <|java+method:///smallsql/database/Index/add(smallsql.database.IndexNode,long,char%5B%5D,boolean)|,8,30>,
			  <|java+method:///smallsql/database/Index/clear()|,1,4>,
			  <|java+method:///smallsql/database/Index/floatToBinarySortOrder(float)|,1,6>,
			  <|java+method:///smallsql/database/Index/doubleToBinarySortOrder(double)|,1,6>,
			  <|java+method:///smallsql/database/Index/shortToBinarySortOrder(int)|,1,3>,
			  <|java+method:///smallsql/database/Index/intToBinarySortOrder(int)|,1,3>,
			  <|java+method:///smallsql/database/Index/longToBinarySortOrder(long)|,1,3>,
			  <|java+method:///smallsql/database/Index/stringToBinarySortOrder(java.lang.String,boolean)|,4,11>,
			  <|java+method:///smallsql/database/Index/bytesToBinarySortOrder(byte%5B%5D)|,2,8>,
			  <|java+method:///smallsql/database/Index/numericToBinarySortOrder(smallsql.database.MutableNumeric)|,4,18>,
			  <|java+method:///smallsql/database/Index/equals(char%5B%5D,char%5B%5D,int)|,5,9>,
			  <|java+method:///smallsql/database/Index/equals(char%5B%5D,long,int)|,5,9>,
			  <|java+method:///smallsql/database/ExpressionFunctionChar/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionChar/getString()|,2,5>,
			  <|java+method:///smallsql/database/ExpressionFunctionChar/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionChar/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/SSPreparedStatement/executeQuery()|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/executeUpdate()|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/executeImp()|,2,7>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setNull(int,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setBoolean(int,boolean)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setByte(int,byte)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setShort(int,short)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setInt(int,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setLong(int,long)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setFloat(int,float)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setDouble(int,double)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setBigDecimal(int,java.math.BigDecimal)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setString(int,java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setBytes(int,byte%5B%5D)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setDate(int,java.sql.Date)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setTime(int,java.sql.Time)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setTimestamp(int,java.sql.Timestamp)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setAsciiStream(int,java.io.InputStream,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setUnicodeStream(int,java.io.InputStream,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setBinaryStream(int,java.io.InputStream,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/clearParameters()|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setObject(int,java.lang.Object,int,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setObject(int,java.lang.Object,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setObject(int,java.lang.Object)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/execute()|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/addBatch()|,4,15>,
			  <|java+method:///smallsql/database/SSPreparedStatement/clearBatch()|,2,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/executeBatch()|,7,26>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setCharacterStream(int,java.io.Reader,int)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setRef(int,java.sql.Ref)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setBlob(int,java.sql.Blob)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setClob(int,java.sql.Clob)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setArray(int,java.sql.Array)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/getMetaData()|,3,14>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setDate(int,java.sql.Date,java.util.Calendar)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setTime(int,java.sql.Time,java.util.Calendar)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setTimestamp(int,java.sql.Timestamp,java.util.Calendar)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setNull(int,int,java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/setURL(int,java.net.URL)|,1,4>,
			  <|java+method:///smallsql/database/SSPreparedStatement/getParameterMetaData()|,1,4>,
			  <|java+method:///smallsql/database/Scrollable/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/Scrollable/beforeFirst()|,1,4>,
			  <|java+method:///smallsql/database/Scrollable/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/Scrollable/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/Scrollable/first()|,1,4>,
			  <|java+method:///smallsql/database/Scrollable/previous()|,3,11>,
			  <|java+method:///smallsql/database/Scrollable/next()|,3,13>,
			  <|java+method:///smallsql/database/Scrollable/last()|,1,4>,
			  <|java+method:///smallsql/database/Scrollable/isLast()|,2,8>,
			  <|java+method:///smallsql/database/Scrollable/isAfterLast()|,4,9>,
			  <|java+method:///smallsql/database/Scrollable/afterLast()|,3,7>,
			  <|java+method:///smallsql/database/Scrollable/absolute(int)|,7,26>,
			  <|java+method:///smallsql/database/Scrollable/relative(int)|,2,9>,
			  <|java+method:///smallsql/database/Scrollable/getRow()|,2,4>,
			  <|java+method:///smallsql/database/Scrollable/getRowPosition()|,1,3>,
			  <|java+method:///smallsql/database/Scrollable/setRowPosition(long)|,1,3>,
			  <|java+method:///smallsql/database/Scrollable/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/Scrollable/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/Scrollable/nullRow()|,1,4>,
			  <|java+method:///smallsql/database/Scrollable/noRow()|,1,4>,
			  <|java+method:///smallsql/database/Scrollable/execute()|,1,5>,
			  <|java+method:///smallsql/database/Scrollable/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionInsert/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionInsert/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionInsert/getBytes()|,3,13>,
			  <|java+method:///smallsql/database/ExpressionFunctionInsert/getString()|,3,13>,
			  <|java+method:///smallsql/database/ExpressionFunctionInsert/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionDayOfWeek/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionDayOfWeek/getInt()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionValue/equals(java.lang.Object)|,5,8>,
			  <|java+method:///smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression)|,69,155>,
			  <|java+method:///smallsql/database/ExpressionValue/initValue(smallsql.database.Expression)|,16,36>,
			  <|java+method:///smallsql/database/ExpressionValue/isEmpty()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/clear()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/set(java.lang.Object,int,int)|,1,4>,
			  <|java+method:///smallsql/database/ExpressionValue/set(java.lang.Object,int)|,15,48>,
			  <|java+method:///smallsql/database/ExpressionValue/set(smallsql.database.ExpressionValue)|,1,7>,
			  <|java+method:///smallsql/database/ExpressionValue/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getBoolean(java.lang.Object,int)|,11,18>,
			  <|java+method:///smallsql/database/ExpressionValue/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getInt(java.lang.Object,int)|,19,30>,
			  <|java+method:///smallsql/database/ExpressionValue/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getLong(java.lang.Object,int)|,16,29>,
			  <|java+method:///smallsql/database/ExpressionValue/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)|,13,20>,
			  <|java+method:///smallsql/database/ExpressionValue/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)|,11,18>,
			  <|java+method:///smallsql/database/ExpressionValue/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getMoney(java.lang.Object,int)|,12,20>,
			  <|java+method:///smallsql/database/ExpressionValue/getNumeric()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getNumeric(java.lang.Object,int)|,15,31>,
			  <|java+method:///smallsql/database/ExpressionValue/getObject()|,2,6>,
			  <|java+method:///smallsql/database/ExpressionValue/getString()|,3,8>,
			  <|java+method:///smallsql/database/ExpressionValue/getBytes()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getBytes(java.lang.Object,int)|,13,23>,
			  <|java+method:///smallsql/database/ExpressionValue/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getTableName()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionValue/getPrecision()|,5,12>,
			  <|java+method:///smallsql/database/ExpressionValue/getScale()|,3,10>,
			  <|java+method:///smallsql/database/ExpressionValue/createUnsupportedConversion(int,java.lang.Object,int)|,1,8>,
			  <|java+method:///smallsql/database/ExpressionFunctionSign/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionSign/getInt()|,15,37>,
			  <|java+method:///smallsql/database/ExpressionFunctionDifference/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionDifference/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionDifference/getInt()|,4,12>,
			  <|java+method:///smallsql/database/ColumnExpression/getName()|,1,3>,
			  <|java+method:///smallsql/database/ColumnExpression/isAutoIncrement()|,1,3>,
			  <|java+method:///smallsql/database/ColumnExpression/isCaseSensitive()|,1,3>,
			  <|java+method:///smallsql/database/ColumnExpression/isNullable()|,1,3>,
			  <|java+method:///smallsql/database/ColumnExpression/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/ColumnExpression/getDisplaySize()|,1,3>,
			  <|java+method:///smallsql/database/ColumnExpression/getScale()|,1,3>,
			  <|java+method:///smallsql/database/ColumnExpression/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRound/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionRound/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionRound/getDouble()|,6,24>,
			  <|java+method:///smallsql/database/ExpressionFunctionLength/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLength/getInt()|,3,7>,
			  <|java+method:///smallsql/database/ExpressionFunctionACos/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionACos/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionTruncate/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionTruncate/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTruncate/getDouble()|,6,24>,
			  <|java+method:///smallsql/database/ExpressionFunctionLeft/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLeft/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLeft/getBytes()|,3,9>,
			  <|java+method:///smallsql/database/ExpressionFunctionLeft/getString()|,2,7>,
			  <|java+method:///smallsql/database/ExpressionName/setNameAfterTableAlias(java.lang.String)|,1,4>,
			  <|java+method:///smallsql/database/ExpressionName/equals(java.lang.Object)|,4,6>,
			  <|java+method:///smallsql/database/ExpressionName/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getLong()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getNumeric()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getObject()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getString()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getBytes()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getDataType()|,9,16>,
			  <|java+method:///smallsql/database/ExpressionName/setFrom(smallsql.database.DataSource,int,smallsql.database.TableView)|,1,6>,
			  <|java+method:///smallsql/database/ExpressionName/setFrom(smallsql.database.DataSource,int,smallsql.database.Column)|,1,5>,
			  <|java+method:///smallsql/database/ExpressionName/getDataSource()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getTableAlias()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionName/getTable()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getColumnIndex()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getColumn()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/toString()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionName/getTableName()|,2,6>,
			  <|java+method:///smallsql/database/ExpressionName/getPrecision()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getScale()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/getDisplaySize()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/isAutoIncrement()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/isCaseSensitive()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/isNullable()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionName/isDefinitelyWritable()|,1,3>,
			  <|java+method:///smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)|,10,37>,
			  <|java+method:///smallsql/database/TableView/getFile(smallsql.database.Database)|,1,3>,
			  <|java+method:///smallsql/database/TableView/createFile(smallsql.database.SSConnection,smallsql.database.Database)|,3,12>,
			  <|java+method:///smallsql/database/TableView/writeMagic(java.nio.channels.FileChannel)|,1,1>,
			  <|java+method:///smallsql/database/TableView/getName()|,1,3>,
			  <|java+method:///smallsql/database/TableView/getTimestamp()|,1,3>,
			  <|java+method:///smallsql/database/TableView/findColumnIdx(java.lang.String)|,3,6>,
			  <|java+method:///smallsql/database/TableView/findColumn(java.lang.String)|,3,7>,
			  <|java+method:///smallsql/database/TableView/close()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionPower/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionPower/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionPower/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionPI/getFunction()|,1,1>,
			  <|java+method:///smallsql/database/ExpressionFunctionPI/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionPI/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/Join/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/Join/beforeFirst()|,1,5>,
			  <|java+method:///smallsql/database/Join/first()|,1,4>,
			  <|java+method:///smallsql/database/Join/next()|,3,9>,
			  <|java+method:///smallsql/database/Join/afterLast()|,1,4>,
			  <|java+method:///smallsql/database/Join/getRow()|,1,3>,
			  <|java+method:///smallsql/database/Join/getRowPosition()|,2,5>,
			  <|java+method:///smallsql/database/Join/setRowPosition(long)|,1,4>,
			  <|java+method:///smallsql/database/Join/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/Join/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/Join/nullRow()|,1,5>,
			  <|java+method:///smallsql/database/Join/noRow()|,1,6>,
			  <|java+method:///smallsql/database/Join/execute()|,2,7>,
			  <|java+method:///smallsql/database/Join/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,5,18>,
			  <|java+method:///smallsql/database/Join/createJoinScrollIndex()|,5,19>,
			  <|java+method:///smallsql/database/Join/createJoinScrollIndex(smallsql.database.ExpressionArithmetic,smallsql.database.Expressions,smallsql.database.Expressions,int)|,9,41>,
			  <|java+method:///smallsql/database/SQLToken/getName(char%5B%5D)|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getBoolean()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getInt()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getLong()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getFloat()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getDouble()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getMoney()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getNumeric()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionReturnString/getObject()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLTrim/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLTrim/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionLTrim/getBytes()|,3,13>,
			  <|java+method:///smallsql/database/ExpressionFunctionLTrim/getString()|,3,9>,
			  <|java+method:///smallsql/database/Money/createFromUnscaledValue(long)|,1,5>,
			  <|java+method:///smallsql/database/Money/createFromUnscaledValue(int)|,1,5>,
			  <|java+method:///smallsql/database/Money/intValue()|,1,3>,
			  <|java+method:///smallsql/database/Money/floatValue()|,1,3>,
			  <|java+method:///smallsql/database/Money/doubleValue()|,1,3>,
			  <|java+method:///smallsql/database/Money/longValue()|,1,3>,
			  <|java+method:///smallsql/database/Money/toString()|,1,10>,
			  <|java+method:///smallsql/database/Money/equals(java.lang.Object)|,1,3>,
			  <|java+method:///smallsql/database/Money/hashCode()|,1,3>,
			  <|java+method:///smallsql/database/Money/unscaledValue()|,1,3>,
			  <|java+method:///smallsql/database/Money/parseMoney(java.lang.String)|,1,3>,
			  <|java+method:///smallsql/database/Money/toByteArray()|,1,13>,
			  <|java+method:///smallsql/database/Money/toBigDecimal()|,2,4>,
			  <|java+method:///smallsql/database/Money/getImmutableObject()|,1,3>,
			  <|java+method:///smallsql/database/Strings/size()|,1,3>,
			  <|java+method:///smallsql/database/Strings/get(int)|,2,5>,
			  <|java+method:///smallsql/database/Strings/add(java.lang.String)|,2,6>,
			  <|java+method:///smallsql/database/Strings/resize(int)|,1,5>,
			  <|java+method:///smallsql/database/Strings/toArray()|,1,5>,
			  <|java+method:///smallsql/tools/CommandLine/main(java.lang.String%5B%5D)|,8,41>,
			  <|java+method:///smallsql/tools/CommandLine/printRS(java.sql.ResultSet)|,4,16>,
			  <|java+method:///smallsql/database/LongTreeList/save(smallsql.database.StoreImpl)|,1,4>,
			  <|java+method:///smallsql/database/LongTreeList/add(long)|,10,48>,
			  <|java+method:///smallsql/database/LongTreeList/remove(long)|,10,54>,
			  <|java+method:///smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum)|,6,30>,
			  <|java+method:///smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum)|,6,35>,
			  <|java+method:///smallsql/database/LongTreeList/setPreviousOffset(smallsql.database.LongTreeListEnum)|,3,14>,
			  <|java+method:///smallsql/database/LongTreeList/loopToEndOfNode(smallsql.database.LongTreeListEnum)|,3,16>,
			  <|java+method:///smallsql/database/LongTreeList/insertNode(int)|,2,12>,
			  <|java+method:///smallsql/database/LongTreeList/insertNodeLastLevel(int)|,2,8>,
			  <|java+method:///smallsql/database/LongTreeList/removeNode()|,1,7>,
			  <|java+method:///smallsql/database/LongTreeList/removeNodeLastLevel()|,1,7>,
			  <|java+method:///smallsql/database/LongTreeList/correctPointers(int,int,int,int)|,8,30>,
			  <|java+method:///smallsql/database/LongTreeList/getPointer()|,2,8>,
			  <|java+method:///smallsql/database/LongTreeList/writePointer(int)|,2,5>,
			  <|java+method:///smallsql/database/LongTreeList/getUnsignedShort()|,1,3>,
			  <|java+method:///smallsql/database/LongTreeList/writeShort(int)|,1,4>,
			  <|java+method:///smallsql/database/LongTreeList/resize()|,3,10>,
			  <|java+method:///smallsql/database/LongTreeList/getSize()|,1,3>,
			  <|java+method:///smallsql/database/LongList/size()|,1,3>,
			  <|java+method:///smallsql/database/LongList/get(int)|,2,5>,
			  <|java+method:///smallsql/database/LongList/add(long)|,2,6>,
			  <|java+method:///smallsql/database/LongList/clear()|,1,3>,
			  <|java+method:///smallsql/database/LongList/resize(int)|,1,5>,
			  <|java+method:///smallsql/database/SortedResult/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/execute()|,2,12>,
			  <|java+method:///smallsql/database/SortedResult/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/beforeFirst()|,1,5>,
			  <|java+method:///smallsql/database/SortedResult/first()|,1,4>,
			  <|java+method:///smallsql/database/SortedResult/previous()|,5,20>,
			  <|java+method:///smallsql/database/SortedResult/next()|,7,30>,
			  <|java+method:///smallsql/database/SortedResult/last()|,1,4>,
			  <|java+method:///smallsql/database/SortedResult/isLast()|,3,11>,
			  <|java+method:///smallsql/database/SortedResult/isAfterLast()|,1,4>,
			  <|java+method:///smallsql/database/SortedResult/afterLast()|,3,12>,
			  <|java+method:///smallsql/database/SortedResult/absolute(int)|,7,19>,
			  <|java+method:///smallsql/database/SortedResult/relative(int)|,7,17>,
			  <|java+method:///smallsql/database/SortedResult/getRow()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/getRowPosition()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/setRowPosition(long)|,1,4>,
			  <|java+method:///smallsql/database/SortedResult/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/nullRow()|,1,4>,
			  <|java+method:///smallsql/database/SortedResult/noRow()|,1,4>,
			  <|java+method:///smallsql/database/SortedResult/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/getRowCount()|,1,3>,
			  <|java+method:///smallsql/database/SortedResult/currentInsertedRow()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/compile(smallsql.database.SSConnection)|,26,83>,
			  <|java+method:///smallsql/database/CommandSelect/isGroupResult()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/compileJoin(smallsql.database.Join)|,4,9>,
			  <|java+method:///smallsql/database/CommandSelect/compileLinkExpression(smallsql.database.Expression)|,2,5>,
			  <|java+method:///smallsql/database/CommandSelect/compileLinkExpressionName(smallsql.database.ExpressionName)|,10,38>,
			  <|java+method:///smallsql/database/CommandSelect/compileLinkExpressionParams(smallsql.database.Expression)|,4,15>,
			  <|java+method:///smallsql/database/CommandSelect/compileAdd_All_Table_Columns(smallsql.database.DataSource,smallsql.database.TableView,int)|,2,8>,
			  <|java+method:///smallsql/database/CommandSelect/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)|,2,9>,
			  <|java+method:///smallsql/database/CommandSelect/beforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/first()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/previous()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/next()|,2,7>,
			  <|java+method:///smallsql/database/CommandSelect/last()|,3,10>,
			  <|java+method:///smallsql/database/CommandSelect/afterLast()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/isLast()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/isAfterLast()|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/absolute(int)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/relative(int)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/getRow()|,2,5>,
			  <|java+method:///smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)|,9,35>,
			  <|java+method:///smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression%5B%5D)|,10,36>,
			  <|java+method:///smallsql/database/CommandSelect/deleteRow(smallsql.database.SSConnection)|,5,15>,
			  <|java+method:///smallsql/database/CommandSelect/findColumn(java.lang.String)|,3,8>,
			  <|java+method:///smallsql/database/CommandSelect/setDistinct(boolean)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/setSource(smallsql.database.RowSource)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/setTables(smallsql.database.DataSources)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/setWhere(smallsql.database.Expression)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/setGroup(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/setHaving(smallsql.database.Expression)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/setOrder(smallsql.database.Expressions)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/setMaxRows(int)|,1,3>,
			  <|java+method:///smallsql/database/CommandSelect/getMaxRows()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getBoolean()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getInt()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getLong()|,11,33>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getFloat()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getDouble()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getMoney()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getNumeric()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getObject()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getString()|,2,4>,
			  <|java+method:///smallsql/database/ExpressionFunctionTimestampAdd/getDataType()|,1,3>,
			  <|java+method:///smallsql/database/SmallSQLException/init()|,2,5>,
			  <|java+method:///smallsql/database/SmallSQLException/setLanguage(java.lang.Object)|,3,9>,
			  <|java+method:///smallsql/database/SmallSQLException/printStackTrace()|,2,4>,
			  <|java+method:///smallsql/database/SmallSQLException/printStackTrace(java.io.PrintStream)|,2,4>,
			  <|java+method:///smallsql/database/SmallSQLException/printStackTrace(java.io.PrintWriter)|,2,4>,
			  <|java+method:///smallsql/database/SmallSQLException/create(java.lang.String)|,1,6>,
			  <|java+method:///smallsql/database/SmallSQLException/create(java.lang.String,java.lang.Object)|,1,5>,
			  <|java+method:///smallsql/database/SmallSQLException/create(java.lang.String,java.lang.Object%5B%5D)|,1,5>,
			  <|java+method:///smallsql/database/SmallSQLException/createFromException(java.lang.Throwable)|,2,10>,
			  <|java+method:///smallsql/database/SmallSQLException/createFromException(java.lang.String,java.lang.Object,java.lang.Throwable)|,1,7>,
			  <|java+method:///smallsql/database/SmallSQLException/translateMsg(java.lang.String,java.lang.Object%5B%5D)|,1,5>,
			  <|java+method:///smallsql/database/SmallSQLException/stripMsg(java.lang.Throwable)|,3,11>,
			  <|java+method:///smallsql/database/Identity/createStorePage()|,1,11>,
			  <|java+method:///smallsql/database/Identity/createNextValue(smallsql.database.SSConnection)|,1,4>,
			  <|java+method:///smallsql/database/Identity/setNextValue(smallsql.database.Expression)|,2,7>,
			  <|java+method:///smallsql/database/Identity/floatValue()|,1,4>,
			  <|java+method:///smallsql/database/Identity/doubleValue()|,1,4>,
			  <|java+method:///smallsql/database/Identity/intValue()|,1,4>,
			  <|java+method:///smallsql/database/Identity/longValue()|,1,4>,
			  <|java+method:///smallsql/database/Identity/toString()|,1,4>,
			  <|java+method:///smallsql/database/Identity/getImmutableObject()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCharLen/getFunction()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCharLen/isNull()|,1,3>,
			  <|java+method:///smallsql/database/ExpressionFunctionCharLen/getInt()|,2,5>,
			  <|java+method:///smallsql/database/NoFromResult/isScrollable()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/beforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/isBeforeFirst()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/isFirst()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/first()|,1,4>,
			  <|java+method:///smallsql/database/NoFromResult/previous()|,1,4>,
			  <|java+method:///smallsql/database/NoFromResult/next()|,1,4>,
			  <|java+method:///smallsql/database/NoFromResult/last()|,1,4>,
			  <|java+method:///smallsql/database/NoFromResult/isLast()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/isAfterLast()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/afterLast()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/absolute(int)|,1,6>,
			  <|java+method:///smallsql/database/NoFromResult/relative(int)|,2,5>,
			  <|java+method:///smallsql/database/NoFromResult/getRow()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/getRowPosition()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/setRowPosition(long)|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/rowInserted()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/rowDeleted()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/nullRow()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/noRow()|,1,3>,
			  <|java+method:///smallsql/database/NoFromResult/execute()|,1,1>,
			  <|java+method:///smallsql/database/NoFromResult/isExpressionsFromThisRowSource(smallsql.database.Expressions)|,1,3>
			];
}

public map[str, list[loc]] getSmallSqlStructure() {
	return (
	  "/src/smallsql/database/language":[
	    |java+compilationUnit:///src/smallsql/database/language/Language_it.java|,
	    |java+compilationUnit:///src/smallsql/database/language/Language.java|,
	    |java+compilationUnit:///src/smallsql/database/language/Language_de.java|,
	    |java+compilationUnit:///src/smallsql/database/language/Language_en.java|
	  ],
	  "/src/smallsql/tools":[|java+compilationUnit:///src/smallsql/tools/CommandLine.java|],
	  "/src/smallsql/database":[
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionIIF.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionCot.java|,
	    |java+compilationUnit:///src/smallsql/database/FileIndexNode.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionReturnFloat.java|,
	    |java+compilationUnit:///src/smallsql/database/Logger.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunction.java|,
	    |java+compilationUnit:///src/smallsql/database/UnionAll.java|,
	    |java+compilationUnit:///src/smallsql/database/LongLongList.java|,
	    |java+compilationUnit:///src/smallsql/database/MutableFloat.java|,
	    |java+compilationUnit:///src/smallsql/database/Column.java|,
	    |java+compilationUnit:///src/smallsql/database/StoreNoCurrentRow.java|,
	    |java+compilationUnit:///src/smallsql/database/Expression.java|,
	    |java+compilationUnit:///src/smallsql/database/CreateFile.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionInSelect.java|,
	    |java+compilationUnit:///src/smallsql/database/Mutable.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|,
	    |java+compilationUnit:///src/smallsql/database/StorePageLink.java|,
	    |java+compilationUnit:///src/smallsql/database/Command.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandCreateView.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionCeiling.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionArithmetic.java|,
	    |java+compilationUnit:///src/smallsql/database/TableStorePage.java|,
	    |java+compilationUnit:///src/smallsql/database/MutableNumeric.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionUCase.java|,
	    |java+compilationUnit:///src/smallsql/database/TableViewMap.java|,
	    |java+compilationUnit:///src/smallsql/database/FileIndex.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionReturnP1Number.java|,
	    |java+compilationUnit:///src/smallsql/database/StoreImpl.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionRand.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionOctetLen.java|,
	    |java+compilationUnit:///src/smallsql/database/MutableLong.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandSet.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionRTrim.java|,
	    |java+compilationUnit:///src/smallsql/database/SSResultSet.java|,
	    |java+compilationUnit:///src/smallsql/database/StoreNull.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionDayOfMonth.java|,
	    |java+compilationUnit:///src/smallsql/database/TransactionStep.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionLCase.java|,
	    |java+compilationUnit:///src/smallsql/database/MemoryStream.java|,
	    |java+compilationUnit:///src/smallsql/database/Table.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionReturnInt.java|,
	    |java+compilationUnit:///src/smallsql/database/StorePage.java|,
	    |java+compilationUnit:///src/smallsql/database/TableViewResult.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionMinute.java|,
	    |java+compilationUnit:///src/smallsql/database/Utils.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionSoundex.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionMod.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionLog.java|,
	    |java+compilationUnit:///src/smallsql/database/SSResultSetMetaData.java|,
	    |java+compilationUnit:///src/smallsql/database/SQLTokenizer.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionSpace.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandDelete.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionDegrees.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionYear.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandDrop.java|,
	    |java+compilationUnit:///src/smallsql/database/JoinScrollIndex.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionSqrt.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionConvert.java|,
	    |java+compilationUnit:///src/smallsql/database/TableStorePageInsert.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionSin.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionTimestampDiff.java|,
	    |java+compilationUnit:///src/smallsql/database/TableResult.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionCase.java|,
	    |java+compilationUnit:///src/smallsql/database/ViewResult.java|,
	    |java+compilationUnit:///src/smallsql/database/SSStatement.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandTable.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionRepeat.java|,
	    |java+compilationUnit:///src/smallsql/database/MutableDouble.java|,
	    |java+compilationUnit:///src/smallsql/database/Columns.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionDayOfYear.java|,
	    |java+compilationUnit:///src/smallsql/database/Store.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionATan2.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionBitLen.java|,
	    |java+compilationUnit:///src/smallsql/database/LongTreeListEnum.java|,
	    |java+compilationUnit:///src/smallsql/database/Distinct.java|,
	    |java+compilationUnit:///src/smallsql/database/IndexDescriptions.java|,
	    |java+compilationUnit:///src/smallsql/database/SSConnection.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionExp.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionMonth.java|,
	    |java+compilationUnit:///src/smallsql/database/View.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionTan.java|,
	    |java+compilationUnit:///src/smallsql/database/IndexNodeScrollStatus.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionLog10.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionASin.java|,
	    |java+compilationUnit:///src/smallsql/database/SSDriver.java|,
	    |java+compilationUnit:///src/smallsql/database/SSDatabaseMetaData.java|,
	    |java+compilationUnit:///src/smallsql/database/IndexDescription.java|,
	    |java+compilationUnit:///src/smallsql/database/SSCallableStatement.java|,
	    |java+compilationUnit:///src/smallsql/database/ForeignKey.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionFloor.java|,
	    |java+compilationUnit:///src/smallsql/database/Lobs.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionHour.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandInsert.java|,
	    |java+compilationUnit:///src/smallsql/database/Database.java|,
	    |java+compilationUnit:///src/smallsql/database/ForeignKeys.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionRight.java|,
	    |java+compilationUnit:///src/smallsql/database/SQLParser.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionReturnP1.java|,
	    |java+compilationUnit:///src/smallsql/database/DataSources.java|,
	    |java+compilationUnit:///src/smallsql/database/IndexScrollStatus.java|,
	    |java+compilationUnit:///src/smallsql/database/SSSavepoint.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandUpdate.java|,
	    |java+compilationUnit:///src/smallsql/database/IndexNode.java|,
	    |java+compilationUnit:///src/smallsql/database/RowSource.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionCos.java|,
	    |java+compilationUnit:///src/smallsql/database/StorePageMap.java|,
	    |java+compilationUnit:///src/smallsql/database/Expressions.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionATan.java|,
	    |java+compilationUnit:///src/smallsql/database/GroupResult.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionAscii.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionSubstring.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionRadians.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionAbs.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandCreateDatabase.java|,
	    |java+compilationUnit:///src/smallsql/database/JoinScroll.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionReplace.java|,
	    |java+compilationUnit:///src/smallsql/database/MutableInteger.java|,
	    |java+compilationUnit:///src/smallsql/database/Where.java|,
	    |java+compilationUnit:///src/smallsql/database/DateTime.java|,
	    |java+compilationUnit:///src/smallsql/database/MemoryResult.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionLocate.java|,
	    |java+compilationUnit:///src/smallsql/database/DataSource.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionChar.java|,
	    |java+compilationUnit:///src/smallsql/database/SSPreparedStatement.java|,
	    |java+compilationUnit:///src/smallsql/database/Index.java|,
	    |java+compilationUnit:///src/smallsql/database/Scrollable.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionInsert.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionDayOfWeek.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionDifference.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionValue.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionSign.java|,
	    |java+compilationUnit:///src/smallsql/database/ColumnExpression.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionRound.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionACos.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionLength.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionTruncate.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionLeft.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionName.java|,
	    |java+compilationUnit:///src/smallsql/database/TableView.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionPower.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionPI.java|,
	    |java+compilationUnit:///src/smallsql/database/Join.java|,
	    |java+compilationUnit:///src/smallsql/database/SQLToken.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionReturnString.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionLTrim.java|,
	    |java+compilationUnit:///src/smallsql/database/Money.java|,
	    |java+compilationUnit:///src/smallsql/database/Strings.java|,
	    |java+compilationUnit:///src/smallsql/database/LongTreeList.java|,
	    |java+compilationUnit:///src/smallsql/database/SortedResult.java|,
	    |java+compilationUnit:///src/smallsql/database/LongList.java|,
	    |java+compilationUnit:///src/smallsql/database/CommandSelect.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionTimestampAdd.java|,
	    |java+compilationUnit:///src/smallsql/database/SmallSQLException.java|,
	    |java+compilationUnit:///src/smallsql/database/Identity.java|,
	    |java+compilationUnit:///src/smallsql/database/ExpressionFunctionCharLen.java|,
	    |java+compilationUnit:///src/smallsql/database/NoFromResult.java|
	  ]
	);
}

map[str, list[loc]] getHsqldbStructure() {
	return (
	  "/src/org/hsqldb/cmdline/sqltool":[
	    |java+compilationUnit:///src/org/hsqldb/cmdline/sqltool/TokenSource.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/sqltool/TokenList.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/sqltool/Calculator.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/sqltool/FileRecordReader.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/sqltool/Token.java|
	  ],
	  "/src/org/hsqldb/resources":[|java+compilationUnit:///src/org/hsqldb/resources/ResourceBundleHandler.java|],
	  "/src/org/hsqldb/lib":[
	    |java+compilationUnit:///src/org/hsqldb/lib/IntLookup.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/InOutUtil.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/IntKeyIntValueHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/IntValueHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/MultiValueHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/OrderedIntKeyHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/SimpleLog.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LongLookup.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/CountdownInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlTaskQueue.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ArrayUtil.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/BasicTextJdkLogFormatter.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ClosableByteArrayOutputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/RefCapableRBInterface.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/CharArrayWriter.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ArraySort.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/BaseList.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HashMappedList.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/IntKeyLongValueHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/DataOutputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/WrapperIterator.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LongKeyIntValueHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlDeque.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/Storage.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/FileAccess.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/FileArchiver.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/StopWatch.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlArrayList.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LongKeyLongValueHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/AppendableException.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LongKeyHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/CountUpDownLatch.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/KMPSearchAlgorithm.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/OrderedHashSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/OrderedIntHashSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/IntKeyHashMapConcurrent.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/InputStreamInterface.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlArrayHeap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlByteArrayInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ReaderInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LineGroupReader.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/MD5.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LongDeque.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/StringComparator.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LineReader.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlTimer.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/Set.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ArrayCounter.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ValidatingResourceBundle.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/StringConverter.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlList.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/InputStreamWrapper.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/Iterator.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ArrayListIdentity.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/LongValueHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/StringUtil.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ReadWriteLockDummy.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/StringInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/Collection.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ThreadFactory.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ClosableCharArrayWriter.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/RefCapablePropertyResourceBundle.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlHeap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HashSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/ObjectComparator.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/RCData.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/DoubleIntIndex.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/OrderedLongHashSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/FrameworkLogger.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/OrderedLongKeyHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/FileUtil.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/HsqlThreadFactory.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/IntKeyHashMap.java|
	  ],
	  "/src/org/hsqldb/rights":[
	    |java+compilationUnit:///src/org/hsqldb/rights/GranteeManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/rights/User.java|,
	    |java+compilationUnit:///src/org/hsqldb/rights/Right.java|,
	    |java+compilationUnit:///src/org/hsqldb/rights/GrantConstants.java|,
	    |java+compilationUnit:///src/org/hsqldb/rights/UserManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/rights/Grantee.java|
	  ],
	  "/src/org/hsqldb/rowio":[
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputTextQuoted.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputInterface.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputText.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputBinaryEncode.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputBinary180.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputText.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputInterface.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputBinary.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputTextLog.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputBinary180.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputBinary.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputTextLog.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowOutputTextQuoted.java|,
	    |java+compilationUnit:///src/org/hsqldb/rowio/RowInputBinaryDecode.java|
	  ],
	  "/src/org/hsqldb/scriptio":[
	    |java+compilationUnit:///src/org/hsqldb/scriptio/ScriptWriterEncode.java|,
	    |java+compilationUnit:///src/org/hsqldb/scriptio/ScriptReaderText.java|,
	    |java+compilationUnit:///src/org/hsqldb/scriptio/ScriptWriterBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/scriptio/ScriptWriterText.java|,
	    |java+compilationUnit:///src/org/hsqldb/scriptio/ScriptReaderDecode.java|,
	    |java+compilationUnit:///src/org/hsqldb/scriptio/ScriptReaderBase.java|
	  ],
	  "/src/org/hsqldb/map":[
	    |java+compilationUnit:///src/org/hsqldb/map/ValuePool.java|,
	    |java+compilationUnit:///src/org/hsqldb/map/BaseHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/map/ReusableObjectCache.java|,
	    |java+compilationUnit:///src/org/hsqldb/map/HashIndex.java|,
	    |java+compilationUnit:///src/org/hsqldb/map/ValuePoolHashMap.java|,
	    |java+compilationUnit:///src/org/hsqldb/map/BitMap.java|
	  ],
	  "/src/org/hsqldb/util/preprocessor":[
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Parser.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Token.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Preprocessor.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/IResolver.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/BasicResolver.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Line.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Document.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/LineType.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Option.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Tokenizer.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/Defines.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/PreprocessorAntTask.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/AntResolver.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/preprocessor/PreprocessorException.java|
	  ],
	  "/src/org/hsqldb/lib/tar":[
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/TarFileInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/TarFileOutputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/TarHeaderField.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/PIFData.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/TarMalformatException.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/TarGenerator.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/PIFGenerator.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/RB.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/TarReader.java|,
	    |java+compilationUnit:///src/org/hsqldb/lib/tar/DbBackup.java|
	  ],
	  "/src/org/hsqldb/types":[
	    |java+compilationUnit:///src/org/hsqldb/types/Charset.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/Types.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/LobData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/TimeData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/ClobDataID.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/ClobData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BlobType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/UserTypeModifier.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/DateTimeType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/TimestampData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/IntervalMonthData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/OtherType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BinaryType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/JavaObjectData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/RowType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/ClobType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BlobInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BlobDataID.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/IntervalSecondData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BooleanType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/ArrayType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/IntervalType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BlobData.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/DTIType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/Collation.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/NullType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/CharacterType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/Type.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/NumberType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BitType.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/ClobInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/types/BinaryData.java|
	  ],
	  "/src/org/hsqldb/lib/java":[|java+compilationUnit:///src/org/hsqldb/lib/java/JavaSystem.java|],
	  "/src/org/hsqldb/dbinfo":[
	    |java+compilationUnit:///src/org/hsqldb/dbinfo/DatabaseInformationFull.java|,
	    |java+compilationUnit:///src/org/hsqldb/dbinfo/DatabaseInformation.java|,
	    |java+compilationUnit:///src/org/hsqldb/dbinfo/DatabaseInformationMain.java|,
	    |java+compilationUnit:///src/org/hsqldb/dbinfo/DITableInfo.java|
	  ],
	  "/src/org/hsqldb/navigator":[
	    |java+compilationUnit:///src/org/hsqldb/navigator/RowSetNavigatorDataChange.java|,
	    |java+compilationUnit:///src/org/hsqldb/navigator/RowIterator.java|,
	    |java+compilationUnit:///src/org/hsqldb/navigator/RowSetNavigatorDataChangeMemory.java|,
	    |java+compilationUnit:///src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|,
	    |java+compilationUnit:///src/org/hsqldb/navigator/RowSetNavigator.java|,
	    |java+compilationUnit:///src/org/hsqldb/navigator/RowSetNavigatorClient.java|,
	    |java+compilationUnit:///src/org/hsqldb/navigator/RangeIterator.java|,
	    |java+compilationUnit:///src/org/hsqldb/navigator/RowSetNavigatorData.java|
	  ],
	  "/src/org/hsqldb/auth":[
	    |java+compilationUnit:///src/org/hsqldb/auth/AuthBeanMultiplexer.java|,
	    |java+compilationUnit:///src/org/hsqldb/auth/HsqldbSlaveAuthBean.java|,
	    |java+compilationUnit:///src/org/hsqldb/auth/DenyException.java|,
	    |java+compilationUnit:///src/org/hsqldb/auth/AuthUtils.java|,
	    |java+compilationUnit:///src/org/hsqldb/auth/LdapAuthBean.java|,
	    |java+compilationUnit:///src/org/hsqldb/auth/AuthFunctionBean.java|,
	    |java+compilationUnit:///src/org/hsqldb/auth/JaasAuthBean.java|
	  ],
	  "/src/org/hsqldb/persist":[
	    |java+compilationUnit:///src/org/hsqldb/persist/RAFileHybrid.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/CachedObjectBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/TableSpaceManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RAFileInJar.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/DataSpaceManagerBlocks.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/DataFileDefrag.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RAFile.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/LobStoreInJar.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/PersistentStore.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RandomAccessInterface.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/HsqlDatabaseProperties.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/HsqlProperties.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/CachedObject.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/DataSpaceManagerSimple.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/TextFileReader.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/DataFileCacheSession.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/DirectoryBlockCachedObject.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/PersistentStoreCollection.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/LobManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/BitMapCachedObject.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/ScriptRunner.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/Log.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RowStoreAVLDiskData.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RAShadowFile.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/LobStoreRAFile.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RAFileNIO.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/PersistentStoreCollectionSession.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/TextFileSettings.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RowStoreAVL.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RAFileSimple.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RowStoreAVLDisk.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/IntArrayCachedObject.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/LobStore.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/SimpleStore.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/Logger.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/TextCache.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/BlockObjectStore.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/TableSpaceManagerBlocks.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/PersistentStoreCollectionDatabase.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RAStorageWrapper.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RowStoreAVLMemory.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/Cache.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/Crypto.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RowStoreAVLHybrid.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/DataFileCache.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/LobStoreMem.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/RowStoreDataChange.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/TableSpaceManagerSimple.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/LockFile.java|,
	    |java+compilationUnit:///src/org/hsqldb/persist/DataSpaceManager.java|
	  ],
	  "/src/org/hsqldb/index":[
	    |java+compilationUnit:///src/org/hsqldb/index/NodeAVLDisk.java|,
	    |java+compilationUnit:///src/org/hsqldb/index/IndexAVLMemory.java|,
	    |java+compilationUnit:///src/org/hsqldb/index/NodeAVL.java|,
	    |java+compilationUnit:///src/org/hsqldb/index/Index.java|,
	    |java+compilationUnit:///src/org/hsqldb/index/NodeAVLDiskLarge.java|,
	    |java+compilationUnit:///src/org/hsqldb/index/IndexAVL.java|
	  ],
	  "/src/org/hsqldb/jdbc/pool":[
	    |java+compilationUnit:///src/org/hsqldb/jdbc/pool/JDBCXAConnection.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/pool/JDBCXADataSource.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/pool/JDBCPooledConnection.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/pool/JDBCXAResource.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/pool/JDBCXID.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/pool/JDBCPooledDataSource.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/pool/JDBCXAConnectionWrapper.java|
	  ],
	  "/src/org/hsqldb/server":[
	    |java+compilationUnit:///src/org/hsqldb/server/HsqlSocketFactory.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/HsqlServerFactory.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/OdbcPreparedStatement.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/PgType.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/HsqlSocketRequestHandler.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/ServerProperties.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/HsqlSocketFactorySecure.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/WebServerConnection.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/OdbcPacketOutputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/Server.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/OdbcUtil.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/WebServer.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/OdbcPacketInputStream.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/Servlet.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/ServerAcl.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/ServerConfiguration.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/ServerConnection.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/RecoverableOdbcFailure.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/ServerConstants.java|,
	    |java+compilationUnit:///src/org/hsqldb/server/StatementPortal.java|
	  ],
	  "/src/org/hsqldb":[
	    |java+compilationUnit:///src/org/hsqldb/ExpressionTable.java|,
	    |java+compilationUnit:///src/org/hsqldb/ParserBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/RowAVLDisk.java|,
	    |java+compilationUnit:///src/org/hsqldb/TableUtil.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementProcedure.java|,
	    |java+compilationUnit:///src/org/hsqldb/DatabaseManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/DatabaseURL.java|,
	    |java+compilationUnit:///src/org/hsqldb/Like.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementCursor.java|,
	    |java+compilationUnit:///src/org/hsqldb/ParserDDL.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionLike.java|,
	    |java+compilationUnit:///src/org/hsqldb/SchemaObjectSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementQuery.java|,
	    |java+compilationUnit:///src/org/hsqldb/RangeGroup.java|,
	    |java+compilationUnit:///src/org/hsqldb/Session.java|,
	    |java+compilationUnit:///src/org/hsqldb/Token.java|,
	    |java+compilationUnit:///src/org/hsqldb/RoutineSchema.java|,
	    |java+compilationUnit:///src/org/hsqldb/Database.java|,
	    |java+compilationUnit:///src/org/hsqldb/SqlInvariants.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementSchemaDefinition.java|,
	    |java+compilationUnit:///src/org/hsqldb/ParserRoutine.java|,
	    |java+compilationUnit:///src/org/hsqldb/QuerySpecification.java|,
	    |java+compilationUnit:///src/org/hsqldb/SetFunction.java|,
	    |java+compilationUnit:///src/org/hsqldb/RangeVariableResolver.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementSimple.java|,
	    |java+compilationUnit:///src/org/hsqldb/ConstraintCore.java|,
	    |java+compilationUnit:///src/org/hsqldb/HsqlException.java|,
	    |java+compilationUnit:///src/org/hsqldb/SchemaObject.java|,
	    |java+compilationUnit:///src/org/hsqldb/Table.java|,
	    |java+compilationUnit:///src/org/hsqldb/Statement.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionColumn.java|,
	    |java+compilationUnit:///src/org/hsqldb/SessionManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionArrayAggregate.java|,
	    |java+compilationUnit:///src/org/hsqldb/ColumnBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/ClientConnection.java|,
	    |java+compilationUnit:///src/org/hsqldb/ClientConnectionHTTP.java|,
	    |java+compilationUnit:///src/org/hsqldb/TransactionManagerCommon.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementTypes.java|,
	    |java+compilationUnit:///src/org/hsqldb/TriggerDef.java|,
	    |java+compilationUnit:///src/org/hsqldb/TableBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementDML.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionOrderBy.java|,
	    |java+compilationUnit:///src/org/hsqldb/RowAVLDiskData.java|,
	    |java+compilationUnit:///src/org/hsqldb/TransactionManagerMVCC.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementExpression.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementInsert.java|,
	    |java+compilationUnit:///src/org/hsqldb/FunctionSQLInvoked.java|,
	    |java+compilationUnit:///src/org/hsqldb/Routine.java|,
	    |java+compilationUnit:///src/org/hsqldb/RowAVL.java|,
	    |java+compilationUnit:///src/org/hsqldb/TableDerived.java|,
	    |java+compilationUnit:///src/org/hsqldb/TransactionManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/SessionData.java|,
	    |java+compilationUnit:///src/org/hsqldb/ParserDQL.java|,
	    |java+compilationUnit:///src/org/hsqldb/Expression.java|,
	    |java+compilationUnit:///src/org/hsqldb/SessionContext.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionAccessor.java|,
	    |java+compilationUnit:///src/org/hsqldb/Constraint.java|,
	    |java+compilationUnit:///src/org/hsqldb/Row.java|,
	    |java+compilationUnit:///src/org/hsqldb/TableWorks.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionAggregate.java|,
	    |java+compilationUnit:///src/org/hsqldb/Trigger.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/Schema.java|,
	    |java+compilationUnit:///src/org/hsqldb/HsqlDateTime.java|,
	    |java+compilationUnit:///src/org/hsqldb/RowDiskDataChange.java|,
	    |java+compilationUnit:///src/org/hsqldb/View.java|,
	    |java+compilationUnit:///src/org/hsqldb/HsqlNameManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/RowAVLDiskLarge.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementDMQL.java|,
	    |java+compilationUnit:///src/org/hsqldb/Tokens.java|,
	    |java+compilationUnit:///src/org/hsqldb/ParserCommand.java|,
	    |java+compilationUnit:///src/org/hsqldb/Server.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionLogical.java|,
	    |java+compilationUnit:///src/org/hsqldb/TypeInvariants.java|,
	    |java+compilationUnit:///src/org/hsqldb/Scanner.java|,
	    |java+compilationUnit:///src/org/hsqldb/TriggerDefSQL.java|,
	    |java+compilationUnit:///src/org/hsqldb/RangeVariableJoined.java|,
	    |java+compilationUnit:///src/org/hsqldb/ParserDML.java|,
	    |java+compilationUnit:///src/org/hsqldb/SortAndSlice.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionArithmetic.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementCompound.java|,
	    |java+compilationUnit:///src/org/hsqldb/TransactionManager2PL.java|,
	    |java+compilationUnit:///src/org/hsqldb/QueryExpression.java|,
	    |java+compilationUnit:///src/org/hsqldb/RowActionBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/TextTable.java|,
	    |java+compilationUnit:///src/org/hsqldb/ColumnSchema.java|,
	    |java+compilationUnit:///src/org/hsqldb/FunctionCustom.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionColumnAccessor.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementCommand.java|,
	    |java+compilationUnit:///src/org/hsqldb/SessionInterface.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementResultUpdate.java|,
	    |java+compilationUnit:///src/org/hsqldb/NumberSequence.java|,
	    |java+compilationUnit:///src/org/hsqldb/RangeVariable.java|,
	    |java+compilationUnit:///src/org/hsqldb/SchemaManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbcDriver.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementSchema.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementSession.java|,
	    |java+compilationUnit:///src/org/hsqldb/TransactionManagerMV2PL.java|,
	    |java+compilationUnit:///src/org/hsqldb/FunctionSQL.java|,
	    |java+compilationUnit:///src/org/hsqldb/OpTypes.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionValue.java|,
	    |java+compilationUnit:///src/org/hsqldb/RowAction.java|,
	    |java+compilationUnit:///src/org/hsqldb/ExpressionOp.java|,
	    |java+compilationUnit:///src/org/hsqldb/StatementHandler.java|
	  ],
	  "/src/org/hsqldb/cmdline":[
	    |java+compilationUnit:///src/org/hsqldb/cmdline/SqlTool.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/SqlToolError.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/SqltoolRB.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/SqlToolSprayer.java|,
	    |java+compilationUnit:///src/org/hsqldb/cmdline/SqlFile.java|
	  ],
	  "/src/org/hsqldb/util":[
	    |java+compilationUnit:///src/org/hsqldb/util/CSVWriter.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/SqlServerTransferHelper.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/Tree.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/DatabaseManagerCommon.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/ConnectionDialogCommon.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/McKoiTransferHelper.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/Transfer.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/InformixTransferHelper.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/HelperFactory.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/JDBCTypes.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/FontDialogSwing.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/DatabaseManager.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/MainInvoker.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/TransferTable.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/ConnectionDialogSwing.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/GridSwing.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/DataAccessPoint.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/TransferDb.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/DatabaseManagerSwing.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/Traceable.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/TransferHelper.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/TransferCommon.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/TransferSQLText.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/ConnectionDialog.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/Grid.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/ConnectionSetting.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/HsqldbTransferHelper.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/SQLStatements.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/CommonSwing.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/CodeSwitcher.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/OracleTransferHelper.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/DataAccessPointException.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/PostgresTransferHelper.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/TransferResultSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/util/TableSorter.java|
	  ],
	  "/src/org/hsqldb/result":[
	    |java+compilationUnit:///src/org/hsqldb/result/ResultConstants.java|,
	    |java+compilationUnit:///src/org/hsqldb/result/Result.java|,
	    |java+compilationUnit:///src/org/hsqldb/result/ResultLob.java|,
	    |java+compilationUnit:///src/org/hsqldb/result/ResultMetaData.java|,
	    |java+compilationUnit:///src/org/hsqldb/result/ResultProperties.java|
	  ],
	  "/src/org/hsqldb/error":[
	    |java+compilationUnit:///src/org/hsqldb/error/Error.java|,
	    |java+compilationUnit:///src/org/hsqldb/error/ErrorCode.java|
	  ],
	  "/src/org/hsqldb/jdbc":[
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCPreparedStatement.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCSQLXML.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCResultSet.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCClobClient.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCStatement.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCParameterMetaData.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCClobFile.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCConnectionEventListener.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCDriver.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCStatementBase.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCCommonDataSource.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCConnection.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCArrayBasic.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCBlob.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCResultSetMetaData.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCCallableStatement.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCArray.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCBlobClient.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCSavepoint.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCDatabaseMetaData.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCColumnMetaData.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCClob.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCDataSource.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCDataSourceFactory.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCNClob.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCBlobFile.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCPool.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCUtil.java|,
	    |java+compilationUnit:///src/org/hsqldb/jdbc/JDBCRowId.java|
	  ]
	);
}

lrel[loc, list[str], lrel[loc, list[str]]] getHsqldbDuplication() {
return [
  <|java+method:///org/hsqldb/ExpressionTable/getValue(org.hsqldb.Session,org.hsqldb.types.Type)|,["Object[] value = table.getValues(session);","if (value.length == 1)","return ((Object[]) value)[0];","return value;","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");","\n\t.....\n"],[<|java+method:///org/hsqldb/Expression/getValue(org.hsqldb.Session)|,["Object[] value = table.getValues(session);","if (value.length == 1)","return ((Object[]) value)[0];","return value;","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserBase/unexpectedTokenRequire(java.lang.String)|,["String tokenS;","if (token.charsetSchema != null)","tokenS = token.charsetSchema;","else if (token.charsetName != null)","tokenS = token.charsetName;","else if (token.namePrePrefix != null)","tokenS = token.namePrePrefix;","else if (token.namePrefix != null)","tokenS = token.namePrefix;","else","tokenS = token.tokenString;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserBase/unexpectedToken()|,["String tokenS;","if (token.charsetSchema != null)","tokenS = token.charsetSchema;","else if (token.charsetName != null)","tokenS = token.charsetName;","else if (token.namePrePrefix != null)","tokenS = token.namePrePrefix;","else if (token.namePrefix != null)","tokenS = token.namePrefix;","else","tokenS = token.tokenString;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserBase/tooManyIdentifiers()|,["else if (token.namePrePrefix != null)","tokenS = token.namePrePrefix;","else if (token.namePrefix != null)","tokenS = token.namePrefix;","else","tokenS = token.tokenString;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/lib/HashMap/valuesToArray(java.lang.Object%5B%5D)|,["public void valuesToArray(Object[] array)","Iterator it = values().iterator();","int      i  = 0;","while (it.hasNext())","array[i] = it.next();","i++;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/lib/OrderedIntKeyHashMap/valuesToArray(java.lang.Object%5B%5D)|,["public void valuesToArray(Object[] array)","Iterator it = values().iterator();","int      i  = 0;","while (it.hasNext())","array[i] = it.next();","i++;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/IntKeyHashMap/valuesToArray(java.lang.Object%5B%5D)|,["public void valuesToArray(Object[] array)","Iterator it = values().iterator();","int      i  = 0;","while (it.hasNext())","array[i] = it.next();","i++;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/RowAVLDisk/keepInMemory(boolean)|,["if (!isInMemory)","return false;","if (keep)","keepCount++;","else","keepCount--;","if (keepCount \< 0)","throw Error.runtimeError(ErrorCode.U_S0500,","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/CachedObjectBase/keepInMemory(boolean)|,["if (!isInMemory)","return false;","if (keep)","keepCount++;","else","keepCount--;","if (keepCount \< 0)","throw Error.runtimeError(ErrorCode.U_S0500,","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/Tree/setBounds(int,int,int,int)|,["public void setBounds(int x, int y, int w, int h)","super.setBounds(x, y, w, h);","iSbHeight = sbHoriz.getPreferredSize().height;","iSbWidth  = sbVert.getPreferredSize().width;","iHeight   = h - iSbHeight;","iWidth    = w - iSbWidth;","sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);","sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);","adjustScroll();","iImage = null;","repaint();","\n\t.....\n"],[<|java+method:///org/hsqldb/util/Grid/setBounds(int,int,int,int)|,["public void setBounds(int x, int y, int w, int h)","super.setBounds(x, y, w, h);","iSbHeight = sbHoriz.getPreferredSize().height;","iSbWidth  = sbVert.getPreferredSize().width;","iHeight   = h - iSbHeight;","iWidth    = w - iSbWidth;","sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);","sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);","adjustScroll();","iImage = null;","repaint();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/Tree/handleEvent(java.awt.Event)|,["public boolean handleEvent(Event e)","switch (e.id)","case Event.SCROLL_LINE_UP :","case Event.SCROLL_LINE_DOWN :","case Event.SCROLL_PAGE_UP :","case Event.SCROLL_PAGE_DOWN :","case Event.SCROLL_ABSOLUTE :","iX = sbHoriz.getValue();","iY = iRowHeight * sbVert.getValue();","repaint();","return true;","return super.handleEvent(e);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/Grid/handleEvent(java.awt.Event)|,["public boolean handleEvent(Event e)","switch (e.id)","case Event.SCROLL_LINE_UP :","case Event.SCROLL_LINE_DOWN :","case Event.SCROLL_PAGE_UP :","case Event.SCROLL_PAGE_DOWN :","case Event.SCROLL_ABSOLUTE :","iX = sbHoriz.getValue();","iY = iRowHeight * sbVert.getValue();","repaint();","return true;","return super.handleEvent(e);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/Tree/paint(java.awt.Graphics)|,["String   folder = s[2];","int      ci     = currentindent;","for (; ci \> 0; ci--)","if (key.startsWith(root[ci]))","break;","if (root[ci].length() \< key.length())","ci++;","if (closed && ci \> currentindent)","continue;","\n\t.....\n","return;","g.setColor(SystemColor.control);","g.fillRect(iWidth, iHeight, iSbWidth, iSbHeight);","if (iImage == null)","iImage = createImage(iWidth, iHeight);","gImage = iImage.getGraphics();","gImage.setFont(fFont);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/util/Tree/mouseDown(java.awt.Event,int,int)|,["String   folder = s[2];","int      ci     = currentindent;","for (; ci \> 0; ci--)","if (key.startsWith(root[ci]))","break;","if (root[ci].length() \< key.length())","ci++;","if (closed && ci \> currentindent)","continue;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/util/Grid/paint(java.awt.Graphics)|,["return;","g.setColor(SystemColor.control);","g.fillRect(iWidth, iHeight, iSbWidth, iSbHeight);","if (iImage == null)","iImage = createImage(iWidth, iHeight);","gImage = iImage.getGraphics();","gImage.setFont(fFont);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/StatementProcedure/getSubqueries(org.hsqldb.Session)|,["if (subQueries == null || subQueries.size() == 0)","return TableDerived.emptyArray;","TableDerived[] subQueryArray = new TableDerived[subQueries.size()];","subQueries.toArray(subQueryArray);","for (int i = 0; i \< subqueries.length; i++)","subQueryArray[i].prepareTable();","return subQueryArray;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/StatementSet/getSubqueries(org.hsqldb.Session)|,["if (subQueries == null || subQueries.size() == 0)","return TableDerived.emptyArray;","TableDerived[] subQueryArray = new TableDerived[subQueries.size()];","subQueries.toArray(subQueryArray);","for (int i = 0; i \< subqueries.length; i++)","subQueryArray[i].prepareTable();","return subQueryArray;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/StatementExpression/getSubqueries(org.hsqldb.Session)|,["if (subQueries == null || subQueries.size() == 0)","return TableDerived.emptyArray;","TableDerived[] subQueryArray = new TableDerived[subQueries.size()];","subQueries.toArray(subQueryArray);","for (int i = 0; i \< subqueries.length; i++)","subQueryArray[i].prepareTable();","return subQueryArray;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/DatabaseManager/getDatabaseObject(java.lang.String,java.lang.String,org.hsqldb.persist.HsqlProperties)|,["else if (type == DatabaseURL.S_RES)","databaseMap = resDatabaseMap;","else if (type == DatabaseURL.S_MEM)","databaseMap = memDatabaseMap;","else","throw Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\");","\n\t.....\n"],[<|java+method:///org/hsqldb/DatabaseManager/addDatabaseObject(java.lang.String,java.lang.String,org.hsqldb.Database)|,["else if (type == DatabaseURL.S_RES)","databaseMap = resDatabaseMap;","else if (type == DatabaseURL.S_MEM)","databaseMap = memDatabaseMap;","else","throw Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/DatabaseManager/lookupDatabaseObject(java.lang.String,java.lang.String)|,["databaseMap = fileDatabaseMap;","key         = filePathToKey(path);","else if (type == DatabaseURL.S_RES)","databaseMap = resDatabaseMap;","else if (type == DatabaseURL.S_MEM)","databaseMap = memDatabaseMap;","else","throw (Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\"));","\n\t.....\n"],[<|java+method:///org/hsqldb/DatabaseManager/removeDatabase(org.hsqldb.Database)|,["databaseMap = fileDatabaseMap;","key         = filePathToKey(path);","else if (type == DatabaseURL.S_RES)","databaseMap = resDatabaseMap;","else if (type == DatabaseURL.S_MEM)","databaseMap = memDatabaseMap;","else","throw (Error.runtimeError(ErrorCode.U_S0500, \"DatabaseManager\"));","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/scriptio/ScriptWriterEncode/openFile()|,["protected void openFile()","try","FileAccess   fa  = isDump ? FileUtil.getFileUtil()",": database.logger.getFileAccess();","OutputStream fos = fa.openOutputStreamElement(outFile);","outDescriptor = fa.getFileSync(fos);","fileStreamOut = fos;","fileStreamOut = new BufferedOutputStream(fos, 1 \<\< 14);","catch (IOException e)","throw Error.error(e, ErrorCode.FILE_IO_ERROR,","ErrorCode.M_Message_Pair, new Object[]","e.toString(), outFile",");","\n\t.....\n"],[<|java+method:///org/hsqldb/scriptio/ScriptWriterBase/openFile()|,["protected void openFile()","try","FileAccess   fa  = isDump ? FileUtil.getFileUtil()",": database.logger.getFileAccess();","OutputStream fos = fa.openOutputStreamElement(outFile);","outDescriptor = fa.getFileSync(fos);","fileStreamOut = fos;","fileStreamOut = new BufferedOutputStream(fos, 1 \<\< 14);","catch (IOException e)","throw Error.error(e, ErrorCode.FILE_IO_ERROR,","ErrorCode.M_Message_Pair, new Object[]","e.toString(), outFile",");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/rowio/RowOutputBase/writeData(org.hsqldb.types.Type,java.lang.Object)|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n","break;","case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/Types/acceptsPrecision(int)|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputBase/readData(org.hsqldb.types.Type)|,["break;","case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowOutputBinary/getSize(java.lang.Object,org.hsqldb.types.Type)|,["break;","case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/getJDBCClass()|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/getJDBCClassName()|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/isDaySecondIntervalType()|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/convertToString(java.lang.Object)|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/add(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/subtract(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/Type/getType(int,org.hsqldb.types.Charset,org.hsqldb.types.Collation,long,int)|,["case Types.SQL_INTERVAL_DAY :","case Types.SQL_INTERVAL_DAY_TO_HOUR :","case Types.SQL_INTERVAL_DAY_TO_MINUTE :","case Types.SQL_INTERVAL_DAY_TO_SECOND :","case Types.SQL_INTERVAL_HOUR :","case Types.SQL_INTERVAL_HOUR_TO_MINUTE :","case Types.SQL_INTERVAL_HOUR_TO_SECOND :","case Types.SQL_INTERVAL_MINUTE :","case Types.SQL_INTERVAL_MINUTE_TO_SECOND :","case Types.SQL_INTERVAL_SECOND :","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/util/ConnectionDialogCommon/storeRecentConnectionSettings(java.util.Hashtable)|,["try","if (recentSettings == null)","setHomeDir();","if (homedir == null)","return;","recentSettings = new File(homedir, fileName);","if (!recentSettings.exists())","\n\t.....\n"],[<|java+method:///org/hsqldb/util/ConnectionDialogCommon/deleteRecentConnectionSettings()|,["try","if (recentSettings == null)","setHomeDir();","if (homedir == null)","return;","recentSettings = new File(homedir, fileName);","if (!recentSettings.exists())","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/IntValueHashMap/get(java.lang.Object)|,["if (key == null)","throw new NoSuchElementException();","int hash   = key.hashCode();","int lookup = getLookup(key, hash);","if (lookup != -1)","return intValueTable[lookup];","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/IntValueHashMap/get(java.lang.Object,int)|,["if (key == null)","throw new NoSuchElementException();","int hash   = key.hashCode();","int lookup = getLookup(key, hash);","if (lookup != -1)","return intValueTable[lookup];","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/Types/acceptsPrecision(int)|,["case Types.SQL_INTERVAL_YEAR :","case Types.SQL_INTERVAL_YEAR_TO_MONTH :","case Types.SQL_INTERVAL_MONTH :","return true;","default :","return false;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/IntervalType/isYearMonthIntervalType()|,["case Types.SQL_INTERVAL_YEAR :","case Types.SQL_INTERVAL_YEAR_TO_MONTH :","case Types.SQL_INTERVAL_MONTH :","return true;","default :","return false;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RAFileInJar/resetStream()|,["InputStream fis = null;","try","fis = getClass().getResourceAsStream(fileName);","if (fis == null)","ClassLoader cl =","Thread.currentThread().getContextClassLoader();","if (cl != null)","fis = cl.getResourceAsStream(fileName);","catch (Throwable t)","finally","if (fis == null)","throw new FileNotFoundException(fileName);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/persist/LobStoreInJar/resetStream()|,["InputStream fis = null;","try","fis = getClass().getResourceAsStream(fileName);","if (fis == null)","ClassLoader cl =","Thread.currentThread().getContextClassLoader();","if (cl != null)","fis = cl.getResourceAsStream(fileName);","catch (Throwable t)","finally","if (fis == null)","throw new FileNotFoundException(fileName);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/FileUtil/FileAccessRes/openInputStreamElement(java.lang.String)|,["InputStream fis = null;","try","fis = getClass().getResourceAsStream(fileName);","if (fis == null)","ClassLoader cl =","Thread.currentThread().getContextClassLoader();","if (cl != null)","fis = cl.getResourceAsStream(fileName);","catch (Throwable t)","finally","if (fis == null)","throw new FileNotFoundException(fileName);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/types/TimeData/compareTo(org.hsqldb.types.TimeData)|,["long diff = seconds - b.seconds;","if (diff == 0)","diff = nanos - b.nanos;","if (diff == 0)","return 0;","return diff \> 0 ? 1",": -1;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/TimestampData/compareTo(org.hsqldb.types.TimestampData)|,["long diff = seconds - b.seconds;","if (diff == 0)","diff = nanos - b.nanos;","if (diff == 0)","return 0;","return diff \> 0 ? 1",": -1;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/ClobDataID/length(org.hsqldb.SessionInterface)|,["public long length(SessionInterface session)","if (length \> -1)","return length;","ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);","Result    resultIn  = session.execute(resultOut);","if (resultIn.isError())","throw resultIn.getException();","length = ((ResultLob) resultIn).getBlockLength();","return length;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/BlobDataID/length(org.hsqldb.SessionInterface)|,["public long length(SessionInterface session)","if (length \> -1)","return length;","ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);","Result    resultIn  = session.execute(resultOut);","if (resultIn.isError())","throw resultIn.getException();","length = ((ResultLob) resultIn).getBlockLength();","return length;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/SimpleLog/logContext(int,java.lang.String)|,["if (level \< atLevel)","return;","if (writer == null)","return;","sb.append(HsqlDateTime.getSystemTimeString()).append(\' \');","if (!isSQL)","sb.append(logTypeNames[atLevel]).append(\' \');","\n\t.....\n","return;","if (writer == null)","return;","sb.append(HsqlDateTime.getSystemTimeString()).append(\' \');","if (!isSQL)","sb.append(logTypeNames[atLevel]).append(\' \');","sb.append(message);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/lib/SimpleLog/logContext(int,java.lang.String,java.lang.String,java.lang.String)|,["if (level \< atLevel)","return;","if (writer == null)","return;","sb.append(HsqlDateTime.getSystemTimeString()).append(\' \');","if (!isSQL)","sb.append(logTypeNames[atLevel]).append(\' \');","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/SimpleLog/logContext(java.lang.Throwable,java.lang.String,int)|,["return;","if (writer == null)","return;","sb.append(HsqlDateTime.getSystemTimeString()).append(\' \');","if (!isSQL)","sb.append(logTypeNames[atLevel]).append(\' \');","sb.append(message);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserDDL/compileDrop()|,["switch (token.tokenType)","case Tokens.ROUTINE :","case Tokens.PROCEDURE :","case Tokens.FUNCTION :","read();","break;","default :","throw unexpectedToken();","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/compileRightGrantOrRevoke(boolean)|,["switch (token.tokenType)","case Tokens.ROUTINE :","case Tokens.PROCEDURE :","case Tokens.FUNCTION :","read();","break;","default :","throw unexpectedToken();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/compileAlterTableDropConstraint(org.hsqldb.Table)|,["object.getName(), ValuePool.getInt(SchemaObject.CONSTRAINT),","Boolean.valueOf(cascade), Boolean.valueOf(false)",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/compileAlterTableDropPrimaryKey(org.hsqldb.Table)|,["object.getName(), ValuePool.getInt(SchemaObject.CONSTRAINT),","Boolean.valueOf(cascade), Boolean.valueOf(false)",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/compileCreateTable(int)|,["boolean ifNot = false;","if (token.tokenType == Tokens.IF)","int position = getPosition();","read();","if (token.tokenType == Tokens.NOT)","read();","readThis(Tokens.EXISTS);","ifNot = true;","else","rewind(position);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/compileCreateSequence()|,["boolean ifNot = false;","if (token.tokenType == Tokens.IF)","int position = getPosition();","read();","if (token.tokenType == Tokens.NOT)","read();","readThis(Tokens.EXISTS);","ifNot = true;","else","rewind(position);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/compileCreateTableBody(org.hsqldb.Table,boolean)|,["if (token.tokenType == Tokens.ON)","if (!table.isTemp())","throw unexpectedToken();","read();","readThis(Tokens.COMMIT);","if (token.tokenType == Tokens.DELETE)","else if (token.tokenType == Tokens.PRESERVE)","table.persistenceScope = TableBase.SCOPE_SESSION;","read();","readThis(Tokens.ROWS);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/readTableAsSubqueryDefinition(org.hsqldb.Table)|,["if (token.tokenType == Tokens.ON)","if (!table.isTemp())","throw unexpectedToken();","read();","readThis(Tokens.COMMIT);","if (token.tokenType == Tokens.DELETE)","else if (token.tokenType == Tokens.PRESERVE)","table.persistenceScope = TableBase.SCOPE_SESSION;","read();","readThis(Tokens.ROWS);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/addForeignKey(org.hsqldb.Session,org.hsqldb.Table,org.hsqldb.Constraint,org.hsqldb.lib.HsqlArrayList)|,["c.getName().name, table.getSchemaName(), table.getName(),","SchemaObject.INDEX);","c.core.uniqueName = uniqueConstraint.getName();","c.core.mainName   = mainName;","c.core.mainIndex  = mainIndex;","c.core.refTable   = table;","c.core.refName    = c.getName();","\n\t.....\n"],[<|java+method:///org/hsqldb/TableWorks/addForeignKey(org.hsqldb.Constraint)|,["c.getName().name, table.getSchemaName(), table.getName(),","SchemaObject.INDEX);","c.core.uniqueName = uniqueConstraint.getName();","c.core.mainName   = mainName;","c.core.mainIndex  = mainIndex;","c.core.refTable   = table;","c.core.refName    = c.getName();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/compileCreateDomain()|,["break;","default :","end = true;","break;","if (end)","break;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserDDL/readColumnConstraints(org.hsqldb.Table,org.hsqldb.ColumnSchema,org.hsqldb.lib.HsqlArrayList)|,["break;","default :","end = true;","break;","if (end)","break;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDDL/compileAlterColumnSequenceOptions(org.hsqldb.Table,org.hsqldb.ColumnSchema,int)|,["break;","default :","end = true;","break;","if (end)","break;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDQL/XreadAllTypesCommonValueExpression(boolean)|,["break;","default :","end = true;","break;","if (end)","break;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDQL/XreadAllTypesTerm(boolean)|,["break;","default :","end = true;","break;","if (end)","break;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserDDL/compileTriggerRoutine(org.hsqldb.Table,org.hsqldb.RangeVariable%5B%5D,int,int)|,["Statement statement = compileSQLProcedureStatementOrNull(routine,","null);","if (statement == null)","throw unexpectedToken();","Token[] tokenisedStatement = getRecordedStatement();","String  sql                = Token.getSQL(tokenisedStatement);","statement.setSQL(sql);","routine.setProcedure(statement);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserRoutine/readRoutineBody(org.hsqldb.Routine)|,["Statement statement = compileSQLProcedureStatementOrNull(routine,","null);","if (statement == null)","throw unexpectedToken();","Token[] tokenisedStatement = getRecordedStatement();","String  sql                = Token.getSQL(tokenisedStatement);","statement.setSQL(sql);","routine.setProcedure(statement);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/readColumnDefinitionOrNull(org.hsqldb.Table,org.hsqldb.HsqlNameManager.HsqlName,org.hsqldb.lib.HsqlArrayList)|,["read();","readThis(Tokens.DEFAULT);","else","readThis(Tokens.ALWAYS);","generatedAlways = true;","readThis(Tokens.AS);","\n\t.....\n","read();","readThis(Tokens.DEFAULT);","else","readThis(Tokens.ALWAYS);","generatedAlways = true;","readThis(Tokens.AS);","readThis(Tokens.IDENTITY);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/readSequence(org.hsqldb.ColumnSchema)|,["read();","readThis(Tokens.DEFAULT);","else","readThis(Tokens.ALWAYS);","generatedAlways = true;","readThis(Tokens.AS);","\n\t.....\n","read();","readThis(Tokens.DEFAULT);","else","readThis(Tokens.ALWAYS);","generatedAlways = true;","readThis(Tokens.AS);","readThis(Tokens.IDENTITY);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/readSequenceOptions(org.hsqldb.NumberSequence,boolean,boolean,boolean)|,["sequence.setDefaultMaxValue();","else if (token.tokenType == Tokens.MINVALUE)","sequence.setDefaultMinValue();","else if (token.tokenType == Tokens.CYCLE)","sequence.setCycle(false);","else","throw unexpectedToken();","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/compileAlterColumnSequenceOptions(org.hsqldb.Table,org.hsqldb.ColumnSchema,int)|,["sequence.setDefaultMaxValue();","else if (token.tokenType == Tokens.MINVALUE)","sequence.setDefaultMinValue();","else if (token.tokenType == Tokens.CYCLE)","sequence.setCycle(false);","else","throw unexpectedToken();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/compileRenameObject(org.hsqldb.HsqlNameManager.HsqlName,int)|,["name, newName",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogNameArray();","return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,","null, writeLockNames);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/compileAlterSchemaRename()|,["name, newName",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogNameArray();","return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,","null, writeLockNames);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/compileAlterTableAddUniqueConstraint(org.hsqldb.Table,org.hsqldb.HsqlNameManager.HsqlName)|,["String   sql  = getLastPart();","Object[] args = new Object[]","StatementTypes.ADD_CONSTRAINT, table, c",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","\n\t.....\n",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserDDL/compileAlterTableAddForeignKeyConstraint(org.hsqldb.Table,org.hsqldb.HsqlNameManager.HsqlName)|,["String   sql  = getLastPart();","Object[] args = new Object[]","StatementTypes.ADD_CONSTRAINT, table, c",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDDL/compileAlterTableAddColumn(org.hsqldb.Table)|,[";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDDL/compileAlterTableAddPrimaryKey(org.hsqldb.Table,org.hsqldb.HsqlNameManager.HsqlName)|,[";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDDL/compileAlterColumnDataTypeIdentity(org.hsqldb.Table,org.hsqldb.ColumnSchema)|,[";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDDL/compileAlterColumnDataType(org.hsqldb.Table,org.hsqldb.ColumnSchema)|,[";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDDL/compileAlterColumnSetNullability(org.hsqldb.Table,org.hsqldb.ColumnSchema,boolean)|,[";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDDL/compileAlterColumnAddSequence(org.hsqldb.Table,org.hsqldb.ColumnSchema,int)|,[";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogAndBaseTableNames(","table.getName());","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserDDL/compileAlterTableAddCheckConstraint(org.hsqldb.Table,org.hsqldb.HsqlNameManager.HsqlName)|,[";","HsqlName[] writeLockNames = new HsqlName[]","database.getCatalogName(), table.getName()",";","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/compileAlterColumnSequenceOptions(org.hsqldb.Table,org.hsqldb.ColumnSchema,int)|,[";","HsqlName[] writeLockNames = new HsqlName[]","database.getCatalogName(), table.getName()",";","return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,","null, writeLockNames);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/compileRightGrantOrRevoke(boolean)|,["if (grant)","readThis(Tokens.TO);","else","readThis(Tokens.FROM);","while (true)","checkIsSimpleName();","granteeList.add(token.tokenString);","read();","if (token.tokenType == Tokens.COMMA)","read();","else","break;","if (grant)","if (token.tokenType == Tokens.WITH)","\n\t.....\n","if (token.tokenType == Tokens.GRANTED)","read();","readThis(Tokens.BY);","if (token.tokenType == Tokens.CURRENT_USER)","read();","else","readThis(Tokens.CURRENT_ROLE);","if (session.getRole() == null)","throw Error.error(ErrorCode.X_0P000);","grantor = session.getRole();","\n\t.....\n","if (token.tokenType == Tokens.CASCADE)","cascade = true;","read();","else","readThis(Tokens.RESTRICT);","String   sql  = getLastPart();","\n\t.....\n",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogNameArray();","StatementSchema cs = new StatementSchema(sql, type, args, null,","writeLockNames);","return cs;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDDL/compileRoleGrantOrRevoke(boolean)|,["if (grant)","readThis(Tokens.TO);","else","readThis(Tokens.FROM);","while (true)","checkIsSimpleName();","granteeList.add(token.tokenString);","read();","if (token.tokenType == Tokens.COMMA)","read();","else","break;","if (grant)","if (token.tokenType == Tokens.WITH)","\n\t.....\n","if (token.tokenType == Tokens.GRANTED)","read();","readThis(Tokens.BY);","if (token.tokenType == Tokens.CURRENT_USER)","read();","else","readThis(Tokens.CURRENT_ROLE);","if (session.getRole() == null)","throw Error.error(ErrorCode.X_0P000);","grantor = session.getRole();","\n\t.....\n","if (token.tokenType == Tokens.CASCADE)","cascade = true;","read();","else","readThis(Tokens.RESTRICT);","String   sql  = getLastPart();","\n\t.....\n",";","HsqlName[] writeLockNames =","database.schemaManager.getCatalogNameArray();","StatementSchema cs = new StatementSchema(sql, type, args, null,","writeLockNames);","return cs;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDDL/checkSchemaUpdateAuthorisation(org.hsqldb.Session,org.hsqldb.HsqlNameManager.HsqlName)|,["if (session.isProcessingLog())","return;","if (SqlInvariants.isSystemSchemaName(schema.name))","throw Error.error(ErrorCode.X_42503);","if (session.parser.isSchemaDefinition)","if (schema == session.getCurrentSchemaHsqlName())","return;","Error.error(ErrorCode.X_42505, schema.name);","session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);","session.checkDDLWrite();","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementSchema/checkSchemaUpdateAuthorisation(org.hsqldb.Session,org.hsqldb.HsqlNameManager.HsqlName)|,["if (session.isProcessingLog())","return;","if (SqlInvariants.isSystemSchemaName(schema.name))","throw Error.error(ErrorCode.X_42503);","if (session.parser.isSchemaDefinition)","if (schema == session.getCurrentSchemaHsqlName())","return;","Error.error(ErrorCode.X_42505, schema.name);","session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);","session.checkDDLWrite();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setBlobForBinaryParameter(int,java.sql.Blob)|,["return;","else if (x == null)","setParameter(parameterIndex, null);","return;","final long length = x.length();","if (length \> Integer.MAX_VALUE)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setClobForStringParameter(int,java.sql.Clob)|,["return;","else if (x == null)","setParameter(parameterIndex, null);","return;","final long length = x.length();","if (length \> Integer.MAX_VALUE)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setDate(int,java.sql.Date,java.util.Calendar)|,["Calendar cal) throws SQLException","checkSetParameterIndex(parameterIndex);","int i = parameterIndex - 1;","if (x == null)","parameterValues[i] = null;","parameterSet[i]    = Boolean.TRUE;","return;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setTime(int,java.sql.Time,java.util.Calendar)|,["Calendar cal) throws SQLException","checkSetParameterIndex(parameterIndex);","int i = parameterIndex - 1;","if (x == null)","parameterValues[i] = null;","parameterSet[i]    = Boolean.TRUE;","return;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setTimestamp(int,java.sql.Timestamp,java.util.Calendar)|,["Calendar cal) throws SQLException","checkSetParameterIndex(parameterIndex);","int i = parameterIndex - 1;","if (x == null)","parameterValues[i] = null;","parameterSet[i]    = Boolean.TRUE;","return;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setTime(int,java.sql.Time,java.util.Calendar)|,["Type     outType    = parameterTypes[i];","long     millis     = x.getTime();","int      zoneOffset = 0;","Calendar calendar   = cal == null ? session.getCalendar()",": cal;","millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setTimestamp(int,java.sql.Timestamp,java.util.Calendar)|,["Type     outType    = parameterTypes[i];","long     millis     = x.getTime();","int      zoneOffset = 0;","Calendar calendar   = cal == null ? session.getCalendar()",": cal;","millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/executeBatch()|,["throw JDBCUtil.sqlException(resultIn);","RowSetNavigator navigator    = resultIn.getNavigator();","int[]           updateCounts = new int[navigator.getSize()];","for (int i = 0; i \< updateCounts.length; i++)","Object[] data = (Object[]) navigator.getNext();","updateCounts[i] = ((Integer) data[0]).intValue();","if (updateCounts.length != batchCount)","if (errorResult == null)","throw new BatchUpdateException(updateCounts);","else","errorResult.getMainString();","throw new BatchUpdateException(errorResult.getMainString(),","errorResult.getSubString(),","errorResult.getErrorCode(), updateCounts);","return updateCounts;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCStatement/executeBatch()|,["throw JDBCUtil.sqlException(resultIn);","RowSetNavigator navigator    = resultIn.getNavigator();","int[]           updateCounts = new int[navigator.getSize()];","for (int i = 0; i \< updateCounts.length; i++)","Object[] data = (Object[]) navigator.getNext();","updateCounts[i] = ((Integer) data[0]).intValue();","if (updateCounts.length != batchCount)","if (errorResult == null)","throw new BatchUpdateException(updateCounts);","else","errorResult.getMainString();","throw new BatchUpdateException(errorResult.getMainString(),","errorResult.getSubString(),","errorResult.getErrorCode(), updateCounts);","return updateCounts;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setQueryTimeout(int)|,["checkClosed();","if (seconds \< 0)","throw JDBCUtil.outOfRangeArgument();","if (seconds \> Short.MAX_VALUE)","seconds = Short.MAX_VALUE;","queryTimeout = seconds;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCStatement/setQueryTimeout(int)|,["checkClosed();","if (seconds \< 0)","throw JDBCUtil.outOfRangeArgument();","if (seconds \> Short.MAX_VALUE)","seconds = Short.MAX_VALUE;","queryTimeout = seconds;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setParameter(int,java.lang.Object)|,["case Types.OTHER :","try","if (o instanceof Serializable)","o = new JavaObjectData((Serializable) o);","break;","catch (HsqlException e)","\n\t.....\n","case Types.SQL_DATE :","case Types.SQL_TIME_WITH_TIME_ZONE :","case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :","case Types.SQL_TIME :","case Types.SQL_TIMESTAMP :","try","\n\t.....\n","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","case Types.SQL_BIGINT :","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","try","\n\t.....\n"],[
    <|java+method:///org/hsqldb/server/PgType/getParameter(java.lang.String,org.hsqldb.Session)|,["case Types.OTHER :","try","if (o instanceof Serializable)","o = new JavaObjectData((Serializable) o);","break;","catch (HsqlException e)","\n\t.....\n","case Types.SQL_DATE :","case Types.SQL_TIME_WITH_TIME_ZONE :","case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :","case Types.SQL_TIME :","case Types.SQL_TIMESTAMP :","try","\n\t.....\n","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","case Types.SQL_BIGINT :","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","try","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)|,["case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","case Types.SQL_BIGINT :","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/NumberType/convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)|,["case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","case Types.SQL_BIGINT :","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/BitType/castOrConvertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type,boolean)|,["case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","case Types.SQL_BIGINT :","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setClobParameter(int,java.lang.Object,long)|,["parameterValues[i - 1] = is;","streamLengths[i - 1]   = streamLength;","parameterSet[i - 1]    = Boolean.FALSE;","return;","parameterValues[i - 1] = o;","parameterSet[i - 1]    = Boolean.TRUE;","return;","\n\t.....\n","if (is.session.getDatabaseUniqueName().equals(","session.getDatabaseUniqueName()))","throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,","\"invalid Reader\");","parameterValues[i - 1] = o;","streamLengths[i - 1]   = streamLength;","parameterSet[i - 1]    = Boolean.FALSE;","return;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setBlobParameter(int,java.lang.Object,long)|,["parameterValues[i - 1] = is;","streamLengths[i - 1]   = streamLength;","parameterSet[i - 1]    = Boolean.FALSE;","return;","parameterValues[i - 1] = o;","parameterSet[i - 1]    = Boolean.TRUE;","return;","\n\t.....\n","if (is.session.getDatabaseUniqueName().equals(","session.getDatabaseUniqueName()))","throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,","\"invalid Reader\");","parameterValues[i - 1] = o;","streamLengths[i - 1]   = streamLength;","parameterSet[i - 1]    = Boolean.FALSE;","return;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setIntParameter(int,int)|,["Object o = Long.valueOf(value);","parameterValues[i - 1] = o;","parameterSet[i - 1]    = Boolean.TRUE;","break;","case Types.SQL_BINARY :","case Types.SQL_VARBINARY :","case Types.OTHER :","throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));","default :","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCPreparedStatement/setLongParameter(int,long)|,["Object o = Long.valueOf(value);","parameterValues[i - 1] = o;","parameterSet[i - 1]    = Boolean.TRUE;","break;","case Types.SQL_BINARY :","case Types.SQL_VARBINARY :","case Types.OTHER :","throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));","default :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SchemaObjectSet/getName(java.lang.String)|,["switch (type)","case SchemaObject.VIEW :","case SchemaObject.TABLE :","case SchemaObject.SEQUENCE :","case SchemaObject.CHARSET :","case SchemaObject.DOMAIN :","case SchemaObject.TYPE :","case SchemaObject.COLLATION :","case SchemaObject.PROCEDURE :","case SchemaObject.SPECIFIC_ROUTINE :","case SchemaObject.FUNCTION :","case SchemaObject.ASSERTION :","case SchemaObject.TRIGGER :","\n\t.....\n"],[<|java+method:///org/hsqldb/SchemaObjectSet/getObject(java.lang.String)|,["switch (type)","case SchemaObject.VIEW :","case SchemaObject.TABLE :","case SchemaObject.SEQUENCE :","case SchemaObject.CHARSET :","case SchemaObject.DOMAIN :","case SchemaObject.TYPE :","case SchemaObject.COLLATION :","case SchemaObject.PROCEDURE :","case SchemaObject.SPECIFIC_ROUTINE :","case SchemaObject.FUNCTION :","case SchemaObject.ASSERTION :","case SchemaObject.TRIGGER :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SchemaObjectSet/getAddErrorCode(int)|,["int code;","switch (type)","case SchemaObject.VIEW :","case SchemaObject.TABLE :","case SchemaObject.COLUMN :","case SchemaObject.SEQUENCE :","case SchemaObject.CHARSET :","case SchemaObject.DOMAIN :","case SchemaObject.TYPE :","\n\t.....\n"],[<|java+method:///org/hsqldb/SchemaObjectSet/getGetErrorCode(int)|,["int code;","switch (type)","case SchemaObject.VIEW :","case SchemaObject.TABLE :","case SchemaObject.COLUMN :","case SchemaObject.SEQUENCE :","case SchemaObject.CHARSET :","case SchemaObject.DOMAIN :","case SchemaObject.TYPE :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/preprocessor/Preprocessor/toCanonicalOrAbsoluteFile(java.lang.String)|,["+ File.separatorChar","+ path;","file = new File(path);","try","return file.getCanonicalFile();","catch (Exception e)","return file.getAbsoluteFile();","\n\t.....\n"],[<|java+method:///org/hsqldb/util/preprocessor/BasicResolver/resolveFile(java.lang.String)|,["+ File.separatorChar","+ path;","file = new File(path);","try","return file.getCanonicalFile();","catch (Exception e)","return file.getAbsoluteFile();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/ArrayUtil/countSameElements(byte%5B%5D,int,byte%5B%5D)|,["int k     = 0;","int limit = arra.length - start;","if (limit \> arrb.length)","limit = arrb.length;","for (int i = 0; i \< limit; i++)","if (arra[i + start] == arrb[i])","k++;","else","break;","return k;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/ArrayUtil/countSameElements(char%5B%5D,int,char%5B%5D)|,["int k     = 0;","int limit = arra.length - start;","if (limit \> arrb.length)","limit = arrb.length;","for (int i = 0; i \< limit; i++)","if (arra[i + start] == arrb[i])","k++;","else","break;","return k;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/ArrayUtil/countStartElementsAt(byte%5B%5D,int,byte%5B%5D)|,["byte[] arrb)","int k = 0;","mainloop:","for (int i = start; i \< arra.length; i++)","for (int j = 0; j \< arrb.length; j++)","if (arra[i] == arrb[j])","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/ArrayUtil/countNonStartElementsAt(byte%5B%5D,int,byte%5B%5D)|,["byte[] arrb)","int k = 0;","mainloop:","for (int i = start; i \< arra.length; i++)","for (int j = 0; j \< arrb.length; j++)","if (arra[i] == arrb[j])","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Session/executeCompiledBatchStatement(org.hsqldb.result.Result)|,["updateCounts[count++] = in.getUpdateCount();","else if (in.isData())","updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;","else if (in.mode == ResultConstants.CALL_RESPONSE)","updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;","else if (in.mode == ResultConstants.ERROR)","updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);","error        = in;","break;","else","throw Error.runtimeError(ErrorCode.U_S0500, \"Session\");","\n\t.....\n"],[<|java+method:///org/hsqldb/Session/executeDirectBatchStatement(org.hsqldb.result.Result)|,["updateCounts[count++] = in.getUpdateCount();","else if (in.isData())","updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;","else if (in.mode == ResultConstants.CALL_RESPONSE)","updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;","else if (in.mode == ResultConstants.ERROR)","updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);","error        = in;","break;","else","throw Error.runtimeError(ErrorCode.U_S0500, \"Session\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/rowio/RowInputTextQuoted/getField(java.lang.String,int,boolean)|,["catch (Exception e)","Object[] messages = new Object[]","new Integer(field), e.toString()",";","throw new IOException(","Error.getMessage(","ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));","return s;","\n\t.....\n"],[<|java+method:///org/hsqldb/rowio/RowInputText/getField(java.lang.String,int,boolean)|,["catch (Exception e)","Object[] messages = new Object[]","new Integer(field), e.toString()",";","throw new IOException(","Error.getMessage(","ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));","return s;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/ClosableByteArrayOutputStream/write(byte%5B%5D,int,int)|,["throw new IndexOutOfBoundsException();","else if (len == 0)","return;","int newcount = count + len;","if (newcount \> buf.length)","buf = copyOf(buf, Math.max(buf.length \<\< 1, newcount));","\n\t.....\n"],[
    <|java+method:///org/hsqldb/lib/ClosableCharArrayWriter/write(char%5B%5D,int,int)|,["throw new IndexOutOfBoundsException();","else if (len == 0)","return;","int newcount = count + len;","if (newcount \> buf.length)","buf = copyOf(buf, Math.max(buf.length \<\< 1, newcount));","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/ClosableCharArrayWriter/write(java.lang.String,int,int)|,["throw new IndexOutOfBoundsException();","else if (len == 0)","return;","int newcount = count + len;","if (newcount \> buf.length)","buf = copyOf(buf, Math.max(buf.length \<\< 1, newcount));","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/lib/ClosableByteArrayOutputStream/setSize(int)|,["public synchronized void setSize(int newSize)","if (newSize \< 0)","throw new ArrayIndexOutOfBoundsException(newSize);","else if (newSize \> buf.length)","buf = copyOf(buf, Math.max(buf.length \<\< 1, newSize));","count = newSize;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/ClosableCharArrayWriter/setSize(int)|,["public synchronized void setSize(int newSize)","if (newSize \< 0)","throw new ArrayIndexOutOfBoundsException(newSize);","else if (newSize \> buf.length)","buf = copyOf(buf, Math.max(buf.length \<\< 1, newSize));","count = newSize;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/ClosableByteArrayOutputStream/toString()|,["public synchronized String toString()","try","checkFreed();","catch (IOException ex)","throw new RuntimeException(ex.toString());","return new String(buf, 0, count);","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/ClosableCharArrayWriter/toString()|,["public synchronized String toString()","try","checkFreed();","catch (IOException ex)","throw new RuntimeException(ex.toString());","return new String(buf, 0, count);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/map/BaseHashMap/addOrRemove(long,long,java.lang.Object,java.lang.Object,boolean)|,["int hash = (int) longKey;","if (isObjectKey)","if (objectKey == null)","return null;","if (comparator == null)","hash = objectKey.hashCode();","else","hash = comparator.hashCode(objectKey);","\n\t.....\n","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","if (isObjectKey)","if (comparator == null)","if (objectKeyTable[lookup].equals(objectKey))","\n\t.....\n","else","throw new NoSuchElementException(\"BaseHashMap\");","lookup = hashIndex.linkNode(index, lastLookup);","if (isObjectKey)","objectKeyTable[lookup] = objectKey;","else if (isIntKey)","intKeyTable[lookup] = (int) longKey;","if (longKey == 0)","hasZeroKey   = true;","zeroKeyIndex = lookup;","else if (isLongKey)","longKeyTable[lookup] = longKey;","if (longKey == 0)","hasZeroKey   = true;","zeroKeyIndex = lookup;","if (isObjectValue)","objectValueTable[lookup] = objectValue;","else if (isIntValue)","intValueTable[lookup] = (int) longValue;","else if (isLongValue)","longValueTable[lookup] = longValue;","\n\t.....\n","int    index       = hashIndex.getHashIndex(hash);","int    lookup      = hashIndex.hashTable[index];","int    lastLookup  = -1;","Object returnValue = null;","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","\n\t.....\n","if (longKey == 0)","hasZeroKey   = false;","zeroKeyIndex = -1;","if (isIntKey)","intKeyTable[lookup] = 0;","else","longKeyTable[lookup] = 0;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/map/BaseHashMap/addOrRemoveMultiVal(long,long,java.lang.Object,java.lang.Object,boolean,boolean)|,["int hash = (int) longKey;","if (isObjectKey)","if (objectKey == null)","return null;","if (comparator == null)","hash = objectKey.hashCode();","else","hash = comparator.hashCode(objectKey);","\n\t.....\n","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","if (isObjectKey)","if (comparator == null)","if (objectKeyTable[lookup].equals(objectKey))","\n\t.....\n","else","throw new NoSuchElementException(\"BaseHashMap\");","lookup = hashIndex.linkNode(index, lastLookup);","if (isObjectKey)","objectKeyTable[lookup] = objectKey;","else if (isIntKey)","intKeyTable[lookup] = (int) longKey;","if (longKey == 0)","hasZeroKey   = true;","zeroKeyIndex = lookup;","else if (isLongKey)","longKeyTable[lookup] = longKey;","if (longKey == 0)","hasZeroKey   = true;","zeroKeyIndex = lookup;","if (isObjectValue)","objectValueTable[lookup] = objectValue;","else if (isIntValue)","intValueTable[lookup] = (int) longValue;","else if (isLongValue)","longValueTable[lookup] = longValue;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/BaseHashMap/addOrRemove(long,java.lang.Object,java.lang.Object,boolean)|,["int    index       = hashIndex.getHashIndex(hash);","int    lookup      = hashIndex.hashTable[index];","int    lastLookup  = -1;","Object returnValue = null;","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","\n\t.....\n","if (longKey == 0)","hasZeroKey   = false;","zeroKeyIndex = -1;","if (isIntKey)","intKeyTable[lookup] = 0;","else","longKeyTable[lookup] = 0;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/BaseHashMap/removeObject(java.lang.Object,boolean)|,["int    index       = hashIndex.getHashIndex(hash);","int    lookup      = hashIndex.hashTable[index];","int    lastLookup  = -1;","Object returnValue = null;","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/map/BaseHashMap/nextLookup(int,int,boolean,int)|,["if (isObjectKey)","if (objectKeyTable[lookup] != null)","return lookup;","else if (isIntKey)","if (intKeyTable[lookup] != 0)","return lookup;","else if (hasZeroKey && lookup == zeroKeyIndex)","return lookup;","else","if (longKeyTable[lookup] != 0)","return lookup;","else if (hasZeroKey && lookup == zeroKeyIndex)","return lookup;","\n\t.....\n"],[<|java+method:///org/hsqldb/map/BaseHashMap/nextLookup(int)|,["if (isObjectKey)","if (objectKeyTable[lookup] != null)","return lookup;","else if (isIntKey)","if (intKeyTable[lookup] != 0)","return lookup;","else if (hasZeroKey && lookup == zeroKeyIndex)","return lookup;","else","if (longKeyTable[lookup] != 0)","return lookup;","else if (hasZeroKey && lookup == zeroKeyIndex)","return lookup;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/map/BaseHashMap/BaseHashIterator/next()|,["throw new NoSuchElementException(\"Hash Iterator\");","removed = false;","if (hasNext())","counter++;","lookup = nextLookup(lookup);","if (keys)","\n\t.....\n"],[
    <|java+method:///org/hsqldb/map/BaseHashMap/BaseHashIterator/nextInt()|,["throw new NoSuchElementException(\"Hash Iterator\");","removed = false;","if (hasNext())","counter++;","lookup = nextLookup(lookup);","if (keys)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/BaseHashMap/BaseHashIterator/nextLong()|,["throw new NoSuchElementException(\"Hash Iterator\");","removed = false;","if (hasNext())","counter++;","lookup = nextLookup(lookup);","if (keys)","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/lib/ArraySort/searchFirst(java.lang.Object%5B%5D,int,int,java.lang.Object,java.util.Comparator)|,["if (compare \< 0)","high = mid;","else if (compare \> 0)","low = mid + 1;","else","high  = mid;","found = mid;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/DoubleIntIndex/binaryFirstSearch()|,["if (compare \< 0)","high = mid;","else if (compare \> 0)","low = mid + 1;","else","high  = mid;","found = mid;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCSQLXML/createStreamSource(java.lang.Class)|,["catch (SecurityException ex)","throw Exceptions.sourceInstantiation(ex);","catch (InstantiationException ex)","throw Exceptions.sourceInstantiation(ex);","catch (IllegalAccessException ex)","throw Exceptions.sourceInstantiation(ex);","catch (ClassCastException ex)","throw Exceptions.sourceInstantiation(ex);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCSQLXML/createSAXSource(java.lang.Class)|,["catch (SecurityException ex)","throw Exceptions.sourceInstantiation(ex);","catch (InstantiationException ex)","throw Exceptions.sourceInstantiation(ex);","catch (IllegalAccessException ex)","throw Exceptions.sourceInstantiation(ex);","catch (ClassCastException ex)","throw Exceptions.sourceInstantiation(ex);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCSQLXML/createStreamResult(java.lang.Class)|,["catch (SecurityException ex)","throw Exceptions.resultInstantiation(ex);","catch (InstantiationException ex)","throw Exceptions.resultInstantiation(ex);","catch (IllegalAccessException ex)","throw Exceptions.resultInstantiation(ex);","catch (ClassCastException ex)","throw Exceptions.resultInstantiation(ex);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/jdbc/JDBCSQLXML/createDOMResult(java.lang.Class)|,["catch (SecurityException ex)","throw Exceptions.resultInstantiation(ex);","catch (InstantiationException ex)","throw Exceptions.resultInstantiation(ex);","catch (IllegalAccessException ex)","throw Exceptions.resultInstantiation(ex);","catch (ClassCastException ex)","throw Exceptions.resultInstantiation(ex);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCSQLXML/createSAXResult(java.lang.Class)|,["catch (SecurityException ex)","throw Exceptions.resultInstantiation(ex);","catch (InstantiationException ex)","throw Exceptions.resultInstantiation(ex);","catch (IllegalAccessException ex)","throw Exceptions.resultInstantiation(ex);","catch (ClassCastException ex)","throw Exceptions.resultInstantiation(ex);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/types/BlobType/getDefinition()|,["factor     = precision / (1024);","multiplier = Tokens.T_K_FACTOR;","StringBuffer sb = new StringBuffer(16);","sb.append(getNameString());","sb.append(\'(\');","sb.append(factor);","if (multiplier != null)","sb.append(multiplier);","sb.append(\')\');","return sb.toString();","\n\t.....\n"],[<|java+method:///org/hsqldb/types/ClobType/getDefinition()|,["factor     = precision / (1024);","multiplier = Tokens.T_K_FACTOR;","StringBuffer sb = new StringBuffer(16);","sb.append(getNameString());","sb.append(\'(\');","sb.append(factor);","if (multiplier != null)","sb.append(multiplier);","sb.append(\')\');","return sb.toString();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/BlobType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["public int compare(Session session, Object a, Object b)","if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/BinaryType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["public int compare(Session session, Object a, Object b)","if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/RowType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["public int compare(Session session, Object a, Object b)","if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/RowType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.SortAndSlice)|,["if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/ClobType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object,int)|,["if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/StringComparator/compare(java.lang.Object,java.lang.Object)|,["if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/BooleanType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["public int compare(Session session, Object a, Object b)","if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/ArrayType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["public int compare(Session session, Object a, Object b)","if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["public int compare(Session session, Object a, Object b)","if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/CharacterType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object,int)|,["if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/NumberType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["public int compare(Session session, Object a, Object b)","if (a == b)","return 0;","if (a == null)","return -1;","if (b == null)","return 1;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/rowio/RowInputBase/resetRow(long,int)|,["mark = 0;","reset();","if (buffer.length \< rowsize)","buffer = new byte[rowsize];","filePos   = filepos;","size      = count = rowsize;","\n\t.....\n"],[<|java+method:///org/hsqldb/rowio/RowInputBase/resetBlock(long,int)|,["mark = 0;","reset();","if (buffer.length \< rowsize)","buffer = new byte[rowsize];","filePos   = filepos;","size      = count = rowsize;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementSchemaDefinition/execute(org.hsqldb.Session)|,["public Result execute(Session session)","Result result;","try","result = getResult(session);","catch (Throwable t)","result = Result.newErrorResult(t, null);","if (result.isError())","result.getException().setStatementType(group, type);","return result;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/StatementSimple/execute(org.hsqldb.Session)|,["public Result execute(Session session)","Result result;","try","result = getResult(session);","catch (Throwable t)","result = Result.newErrorResult(t, null);","if (result.isError())","result.getException().setStatementType(group, type);","return result;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/StatementCommand/execute(org.hsqldb.Session)|,["public Result execute(Session session)","Result result;","try","result = getResult(session);","catch (Throwable t)","result = Result.newErrorResult(t, null);","if (result.isError())","result.getException().setStatementType(group, type);","return result;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/StatementSchema/execute(org.hsqldb.Session)|,["public Result execute(Session session)","Result result;","try","result = getResult(session);","catch (Throwable t)","result = Result.newErrorResult(t, null);","if (result.isError())","result.getException().setStatementType(group, type);","return result;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/StatementSession/execute(org.hsqldb.Session)|,["public Result execute(Session session)","Result result;","try","result = getResult(session);","catch (Throwable t)","result = Result.newErrorResult(t, null);","if (result.isError())","result.getException().setStatementType(group, type);","return result;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserRoutine/readDefaultClause(org.hsqldb.types.Type)|,["switch (token.tokenType)","case Tokens.TRUE :","read();","return Expression.EXPR_TRUE;","case Tokens.FALSE :","read();","return Expression.EXPR_FALSE;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/XreadUnsignedValueSpecificationOrNull()|,["switch (token.tokenType)","case Tokens.TRUE :","read();","return Expression.EXPR_TRUE;","case Tokens.FALSE :","read();","return Expression.EXPR_FALSE;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserRoutine/compileGetStatement(org.hsqldb.RangeGroup%5B%5D)|,["if (exprList.size() \> 1)","throw Error.parseError(ErrorCode.X_42602, null,","scanner.getLineNumber());","Expression expression = (Expression) exprList.get(0);","if (expression.getDegree() != targetSet.size())","throw Error.error(ErrorCode.X_42546, Tokens.T_SET);","int[] columnMap = new int[colIndexList.size()];","colIndexList.toArray(columnMap);","Expression[] targets = new Expression[targetSet.size()];","targetSet.toArray(targets);","for (int i = 0; i \< targets.length; i++)","\n\t.....\n","expression.getNodeDataType(i)))","throw Error.parseError(ErrorCode.X_42561, null,","scanner.getLineNumber());","StatementSet cs = new StatementSet(session, targets, expression,","columnMap, compileContext);","return cs;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserRoutine/compileSetStatement(org.hsqldb.RangeGroup%5B%5D,org.hsqldb.RangeVariable%5B%5D)|,["if (exprList.size() \> 1)","throw Error.parseError(ErrorCode.X_42602, null,","scanner.getLineNumber());","Expression expression = (Expression) exprList.get(0);","if (expression.getDegree() != targetSet.size())","throw Error.error(ErrorCode.X_42546, Tokens.T_SET);","int[] columnMap = new int[colIndexList.size()];","colIndexList.toArray(columnMap);","Expression[] targets = new Expression[targetSet.size()];","targetSet.toArray(targets);","for (int i = 0; i \< targets.length; i++)","\n\t.....\n","expression.getNodeDataType(i)))","throw Error.parseError(ErrorCode.X_42561, null,","scanner.getLineNumber());","StatementSet cs = new StatementSet(session, targets, expression,","columnMap, compileContext);","return cs;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserRoutine/compileWhile(org.hsqldb.Routine,org.hsqldb.StatementCompound,org.hsqldb.HsqlNameManager.HsqlName)|,["if (isSimpleName() && !isReservedKey())","if (label == null)","throw unexpectedToken();","if (!label.name.equals(token.tokenString))","throw Error.error(ErrorCode.X_42508, token.tokenString);","read();","StatementCompound statement =","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserRoutine/compileRepeat(org.hsqldb.Routine,org.hsqldb.StatementCompound,org.hsqldb.HsqlNameManager.HsqlName)|,["if (isSimpleName() && !isReservedKey())","if (label == null)","throw unexpectedToken();","if (!label.name.equals(token.tokenString))","throw Error.error(ErrorCode.X_42508, token.tokenString);","read();","StatementCompound statement =","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserRoutine/compileLoop(org.hsqldb.Routine,org.hsqldb.StatementCompound,org.hsqldb.HsqlNameManager.HsqlName)|,["if (isSimpleName() && !isReservedKey())","if (label == null)","throw unexpectedToken();","if (!label.name.equals(token.tokenString))","throw Error.error(ErrorCode.X_42508, token.tokenString);","read();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserRoutine/compileFor(org.hsqldb.Routine,org.hsqldb.StatementCompound,org.hsqldb.HsqlNameManager.HsqlName)|,["if (isSimpleName() && !isReservedKey())","if (label == null)","throw unexpectedToken();","if (!label.name.equals(token.tokenString))","throw Error.error(ErrorCode.X_42508, token.tokenString);","read();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserRoutine/compileIf(org.hsqldb.Routine,org.hsqldb.StatementCompound)|,["statements = new Statement[list.size()];","list.toArray(statements);","StatementCompound result = new StatementCompound(StatementTypes.IF,","null);","result.setStatements(statements);","return result;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserRoutine/compileCase(org.hsqldb.Routine,org.hsqldb.StatementCompound)|,["statements = new Statement[list.size()];","list.toArray(statements);","StatementCompound result = new StatementCompound(StatementTypes.IF,","null);","result.setStatements(statements);","return result;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserRoutine/readSimpleCaseWhen(org.hsqldb.Routine,org.hsqldb.StatementCompound)|,["StatementTypes.CONDITION,","condition);","list.add(statement);","readThis(Tokens.THEN);","statements = compileSQLProcedureStatementList(routine, context);","for (int i = 0; i \< statements.length; i++)","list.add(statements[i]);","if (token.tokenType != Tokens.WHEN)","break;","while (true);","return list;","\n\t.....\n","if (condition == null)","condition = newCondition;","else","condition = new ExpressionLogical(OpTypes.OR, condition,","newCondition);","if (token.tokenType == Tokens.COMMA)","read();","else","break;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserRoutine/readCaseWhen(org.hsqldb.Routine,org.hsqldb.StatementCompound)|,["StatementTypes.CONDITION,","condition);","list.add(statement);","readThis(Tokens.THEN);","statements = compileSQLProcedureStatementList(routine, context);","for (int i = 0; i \< statements.length; i++)","list.add(statements[i]);","if (token.tokenType != Tokens.WHEN)","break;","while (true);","return list;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDQL/readCaseWhen(org.hsqldb.Expression)|,["if (condition == null)","condition = newCondition;","else","condition = new ExpressionLogical(OpTypes.OR, condition,","newCondition);","if (token.tokenType == Tokens.COMMA)","read();","else","break;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserRoutine/compileSignal(org.hsqldb.Routine,org.hsqldb.StatementCompound,org.hsqldb.HsqlNameManager.HsqlName)|,["sqlState = parseSQLStateValue();","if (readIfThis(Tokens.SET))","readThis(Tokens.MESSAGE_TEXT);","readThis(Tokens.EQUALS);","message = XreadSimpleValueSpecificationOrNull();","if (message == null)","throw unexpectedToken();","resolveOuterReferencesAndTypes(routine, context, message);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserRoutine/compileResignal(org.hsqldb.Routine,org.hsqldb.StatementCompound,org.hsqldb.HsqlNameManager.HsqlName)|,["sqlState = parseSQLStateValue();","if (readIfThis(Tokens.SET))","readThis(Tokens.MESSAGE_TEXT);","readThis(Tokens.EQUALS);","message = XreadSimpleValueSpecificationOrNull();","if (message == null)","throw unexpectedToken();","resolveOuterReferencesAndTypes(routine, context, message);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/QuerySpecification/resolveTypes(org.hsqldb.Session)|,["public void resolveTypes(Session session)","if (isResolved)","return;","resolveTypesPartOne(session);","resolveTypesPartTwo(session);","resolveTypesPartThree(session);","\n\t.....\n"],[<|java+method:///org/hsqldb/QueryExpression/resolveTypes(org.hsqldb.Session)|,["public void resolveTypes(Session session)","if (isResolved)","return;","resolveTypesPartOne(session);","resolveTypesPartTwo(session);","resolveTypesPartThree(session);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/QuerySpecification/describe(org.hsqldb.Session,int)|,["public String describe(Session session, int blanks)","StringBuffer sb;","String       temp;","StringBuffer b = new StringBuffer(blanks);","for (int i = 0; i \< blanks; i++)","b.append(\' \');","sb = new StringBuffer();","\n\t.....\n"],[<|java+method:///org/hsqldb/QueryExpression/describe(org.hsqldb.Session,int)|,["public String describe(Session session, int blanks)","StringBuffer sb;","String       temp;","StringBuffer b = new StringBuffer(blanks);","for (int i = 0; i \< blanks; i++)","b.append(\' \');","sb = new StringBuffer();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/Transfer/CatalogToSelect()|,["bStart.invalidate();","bStart.setEnabled(true);","for (Enumeration e =","result.elements(); e.hasMoreElements(); )","lTable.add(e.nextElement().toString());","lTable.repaint();","\n\t.....\n"],[<|java+method:///org/hsqldb/util/Transfer/SchemaToSelect()|,["bStart.invalidate();","bStart.setEnabled(true);","for (Enumeration e =","result.elements(); e.hasMoreElements(); )","lTable.add(e.nextElement().toString());","lTable.repaint();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/Transfer/_main(java.lang.String%5B%5D)|,["Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();","Dimension size = fMain.getSize();","if (d.width \>= 640)","fMain.setLocation((d.width - size.width) / 2,","(d.height - size.height) / 2);","else","fMain.setLocation(0, 0);","fMain.setSize(d);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManager/main()|,["Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();","Dimension size = fMain.getSize();","if (d.width \>= 640)","fMain.setLocation((d.width - size.width) / 2,","(d.height - size.height) / 2);","else","fMain.setLocation(0, 0);","fMain.setSize(d);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/RangeVariableResolver/setIndexConditions(org.hsqldb.RangeVariable.RangeVariableConditions,org.hsqldb.lib.HsqlList,int,boolean)|,["break;","case OpTypes.SMALLER :","case OpTypes.SMALLER_EQUAL :","case OpTypes.GREATER :","case OpTypes.GREATER_EQUAL :","case OpTypes.GREATER_EQUAL_PRE :","\n\t.....\n"],[<|java+method:///org/hsqldb/RangeVariableResolver/setNonEqualityConditions(org.hsqldb.RangeVariable.RangeVariableConditions,org.hsqldb.lib.HsqlList,int)|,["break;","case OpTypes.SMALLER :","case OpTypes.SMALLER_EQUAL :","case OpTypes.GREATER :","case OpTypes.GREATER_EQUAL :","case OpTypes.GREATER_EQUAL_PRE :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getString(int)|,["sourceType);","if (x == null)","return null;","long length = x.length(session);","if (length \> Integer.MAX_VALUE)","JDBCUtil.throwError(Error.error(ErrorCode.X_42561));","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCResultSet/getBytes(int)|,["sourceType);","if (x == null)","return null;","long length = x.length(session);","if (length \> Integer.MAX_VALUE)","JDBCUtil.throwError(Error.error(ErrorCode.X_42561));","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getBinaryStream(int)|,["int columnIndex) throws SQLException","checkColumn(columnIndex);","Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];","Object o          = getColumnInType(columnIndex, sourceType);","if (o == null)","return null;","\n\t.....\n","checkColumn(columnIndex);","Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];","Object o          = getColumnInType(columnIndex, sourceType);","if (o == null)","return null;","if (o instanceof BlobDataID)","\n\t.....\n"],[
    <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getCharacterStream(int)|,["int columnIndex) throws SQLException","checkColumn(columnIndex);","Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];","Object o          = getColumnInType(columnIndex, sourceType);","if (o == null)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getBlob(int)|,["checkColumn(columnIndex);","Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];","Object o          = getColumnInType(columnIndex, sourceType);","if (o == null)","return null;","if (o instanceof BlobDataID)","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getObject(int)|,["if (o == null)","return null;","try","return ((JavaObjectData) o).getObject();","catch (HsqlException e)","throw JDBCUtil.sqlException(e);","default :","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCCallableStatement/getObject(int)|,["if (o == null)","return null;","try","return ((JavaObjectData) o).getObject();","catch (HsqlException e)","throw JDBCUtil.sqlException(e);","default :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getCharacterStream(int)|,["if (o instanceof ClobDataID)","return ((ClobDataID) o).getCharacterStream(session);","else if (o instanceof Clob)","return ((Clob) o).getCharacterStream();","else if (o instanceof String)","return new StringReader((String) o);","throw JDBCUtil.sqlException(ErrorCode.X_42561);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCCallableStatement/getCharacterStream(int)|,["if (o instanceof ClobDataID)","return ((ClobDataID) o).getCharacterStream(session);","else if (o instanceof Clob)","return ((Clob) o).getCharacterStream();","else if (o instanceof String)","return new StringReader((String) o);","throw JDBCUtil.sqlException(ErrorCode.X_42561);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getBigDecimal(int)|,["switch (targetType.typeCode)","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","break;","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","case Types.SQL_BIGINT :","targetType = Type.SQL_DECIMAL;","break;","case Types.SQL_DOUBLE :","default :","targetType = Type.SQL_DECIMAL_DEFAULT;","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCCallableStatement/getBigDecimal(int)|,["switch (targetType.typeCode)","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","break;","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","case Types.SQL_BIGINT :","targetType = Type.SQL_DECIMAL;","break;","case Types.SQL_DOUBLE :","default :","targetType = Type.SQL_DECIMAL_DEFAULT;","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getClob(int)|,["public Clob getClob(int columnIndex) throws SQLException","checkColumn(columnIndex);","Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];","Object o          = getColumnInType(columnIndex, sourceType);","if (o == null)","return null;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCResultSet/JDBCResultSetBasic/getClob(int)|,["public Clob getClob(int columnIndex) throws SQLException","checkColumn(columnIndex);","Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];","Object o          = getColumnInType(columnIndex, sourceType);","if (o == null)","return null;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getDate(int,java.util.Calendar)|,["Type.SQL_DATE);","if (t == null)","return null;","long millis = t.getSeconds() * 1000;","if (cal != null)","millis = HsqlDateTime.convertMillisToCalendar(cal, millis);","return new Date(millis);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCCallableStatement/getDate(int,java.util.Calendar)|,["Type.SQL_DATE);","if (t == null)","return null;","long millis = t.getSeconds() * 1000;","if (cal != null)","millis = HsqlDateTime.convertMillisToCalendar(cal, millis);","return new Date(millis);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getTime(int,java.util.Calendar)|,[".isDateTimeTypeWithZone())","Calendar calendar = cal == null ? session.getCalendar()",": cal;","millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);","millis = HsqlDateTime.getNormalisedTime(millis);","return new Time(millis);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCCallableStatement/getTime(int,java.util.Calendar)|,[".isDateTimeTypeWithZone())","Calendar calendar = cal == null ? session.getCalendar()",": cal;","millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);","millis = HsqlDateTime.getNormalisedTime(millis);","return new Time(millis);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getTimestamp(int,java.util.Calendar)|,[".isDateTimeTypeWithZone())","Calendar calendar = cal == null ? session.getCalendar()",": cal;","if (cal != null)","millis = HsqlDateTime.convertMillisToCalendar(calendar,","millis);","Timestamp ts = new Timestamp(millis);","ts.setNanos(t.getNanos());","return ts;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCCallableStatement/getTimestamp(int,java.util.Calendar)|,[".isDateTimeTypeWithZone())","Calendar calendar = cal == null ? session.getCalendar()",": cal;","if (cal != null)","millis = HsqlDateTime.convertMillisToCalendar(calendar,","millis);","Timestamp ts = new Timestamp(millis);","ts.setNanos(t.getNanos());","return ts;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCResultSet/getColumnInType(int,org.hsqldb.types.Type)|,["protected Object getColumnInType(int columnIndex,","Type targetType) throws SQLException","Object[] rowData = getCurrent();","Type     sourceType;","Object   value;","checkColumn(columnIndex);","sourceType = resultMetaData.columnTypes[--columnIndex];","value      = rowData[columnIndex];","if (trackNull(value))","return null;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCResultSet/JDBCResultSetBasic/getColumnInType(int,org.hsqldb.types.Type)|,["protected Object getColumnInType(int columnIndex,","Type targetType) throws SQLException","Object[] rowData = getCurrent();","Type     sourceType;","Object   value;","checkColumn(columnIndex);","sourceType = resultMetaData.columnTypes[--columnIndex];","value      = rowData[columnIndex];","if (trackNull(value))","return null;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()/$anonymous1/read()|,["public int read() throws IOException","if (isEOF())","return -1;","synchronized (oneChar)","int charsRead = read(oneChar, 0, 1);","return charsRead == 1 ? oneChar[0]",": -1;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()|,["public int read() throws IOException","if (isEOF())","return -1;","synchronized (oneChar)","int charsRead = read(oneChar, 0, 1);","return charsRead == 1 ? oneChar[0]",": -1;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()/$anonymous1/read(byte%5B%5D,int,int)|,["public int read(byte b[], int off, int len) throws IOException","checkClosed();","if (isEOF())","return -1;","final CharBuffer cb = m_charBuffer;","int charsRead;","int bytesRead;","if (cb.remaining() == 0)","cb.clear();","charsRead = m_reader.read(cb);","cb.flip();","if (charsRead \< 0)","setEOF();","return -1;","else if (charsRead == 0)","return 0;","final ByteBuffer bb = (m_byteBuffer.capacity() \< len)","? ByteBuffer.allocate(len)",": m_byteBuffer;","int cbLimit     = cb.limit();","int cbPosistion = cb.position();","cb.limit(cbPosistion + len);","bb.clear();","int         bbPosition = bb.position();","CoderResult result     = m_encoder.encode(cb, bb, false);","if (bbPosition == bb.position() && result.isUnderflow())","cb.limit(cb.limit() + 1);","m_encoder.encode(cb, bb, false);","cb.limit(cbLimit);","bb.flip();","bytesRead = bb.limit();","if (bytesRead == 0)","setEOF();","return -1;","m_byteBuffer = bb;","bb.get(b, off, bytesRead);","return bytesRead;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()|,["public int read(byte b[], int off, int len) throws IOException","checkClosed();","if (isEOF())","return -1;","final CharBuffer cb = m_charBuffer;","int charsRead;","int bytesRead;","if (cb.remaining() == 0)","cb.clear();","charsRead = m_reader.read(cb);","cb.flip();","if (charsRead \< 0)","setEOF();","return -1;","else if (charsRead == 0)","return 0;","final ByteBuffer bb = (m_byteBuffer.capacity() \< len)","? ByteBuffer.allocate(len)",": m_byteBuffer;","int cbLimit     = cb.limit();","int cbPosistion = cb.position();","cb.limit(cbPosistion + len);","bb.clear();","int         bbPosition = bb.position();","CoderResult result     = m_encoder.encode(cb, bb, false);","if (bbPosition == bb.position() && result.isUnderflow())","cb.limit(cb.limit() + 1);","m_encoder.encode(cb, bb, false);","cb.limit(cbLimit);","bb.flip();","bytesRead = bb.limit();","if (bytesRead == 0)","setEOF();","return -1;","m_byteBuffer = bb;","bb.get(b, off, bytesRead);","return bytesRead;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()/$anonymous1/close()|,["public void close() throws IOException","boolean isClosed = m_closed;","if (!isClosed)","m_closed     = true;","m_charBuffer = null;","m_charset    = null;","m_encoder    = null;","try","m_reader.close();","catch (Exception ex)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()|,["public void close() throws IOException","boolean isClosed = m_closed;","if (!isClosed)","m_closed     = true;","m_charBuffer = null;","m_charset    = null;","m_encoder    = null;","try","m_reader.close();","catch (Exception ex)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()/$anonymous1/setEOF()|,["private void setEOF()","final Reader reader = m_reader;","if (reader != null)","try","reader.close();","catch (IOException iOException)","m_reader = null;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()|,["private void setEOF()","final Reader reader = m_reader;","if (reader != null)","try","reader.close();","catch (IOException iOException)","m_reader = null;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()/$anonymous1/checkClosed()|,["private void checkClosed() throws IOException","if (JDBCClobClient.this.isClosed())","try","this.close();","catch (Exception ex)","if (m_closed)","throw new IOException(\"The stream is closed.\");","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/getAsciiStream()|,["private void checkClosed() throws IOException","if (JDBCClobClient.this.isClosed())","try","this.close();","catch (Exception ex)","if (m_closed)","throw new IOException(\"The stream is closed.\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)/$anonymous1/write(byte%5B%5D,int,int)|,["public void write(byte b[], int off, int len) throws IOException","checkClosed();","final ByteBuffer bb = (m_byteBuffer.capacity() \< len)","? ByteBuffer.allocate(len)",": m_byteBuffer;","if (m_charBuffer.remaining() \< len)","flush0();","final CharBuffer cb = m_charBuffer.capacity() \< len","? CharBuffer.allocate(len)",": m_charBuffer;","bb.clear();","bb.put(b, off, len);","bb.flip();","m_decoder.decode(bb, cb, false);","if (cb.remaining() == 0)","flush();","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)|,["public void write(byte b[], int off, int len) throws IOException","checkClosed();","final ByteBuffer bb = (m_byteBuffer.capacity() \< len)","? ByteBuffer.allocate(len)",": m_byteBuffer;","if (m_charBuffer.remaining() \< len)","flush0();","final CharBuffer cb = m_charBuffer.capacity() \< len","? CharBuffer.allocate(len)",": m_charBuffer;","bb.clear();","bb.put(b, off, len);","bb.flip();","m_decoder.decode(bb, cb, false);","if (cb.remaining() == 0)","flush();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)/$anonymous1/close()|,["public void close() throws IOException","if (!m_closed)","try","flush0();","finally","m_closed     = true;","m_byteBuffer = null;","m_charBuffer = null;","m_charset    = null;","m_decoder    = null;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)|,["public void close() throws IOException","if (!m_closed)","try","flush0();","finally","m_closed     = true;","m_byteBuffer = null;","m_charBuffer = null;","m_charset    = null;","m_decoder    = null;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)/$anonymous1/checkClosed()|,["private void checkClosed() throws IOException","if (JDBCClobClient.this.isClosed())","try","close();","catch (Exception ex)","if (m_closed)","throw new IOException(\"The stream is closed.\");","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)|,["private void checkClosed() throws IOException","if (JDBCClobClient.this.isClosed())","try","close();","catch (Exception ex)","if (m_closed)","throw new IOException(\"The stream is closed.\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)/$anonymous1/flush0()|,["private void flush0() throws IOException","final CharBuffer cb = m_charBuffer;","cb.flip();","final char[] chars = new char[cb.length()];","cb.get(chars);","cb.clear();","try","clob.setChars(session, m_position, chars, 0, chars.length);","catch (Exception e)","throw new IOException(e.toString());","m_position += chars.length;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/setAsciiStream(long)|,["private void flush0() throws IOException","final CharBuffer cb = m_charBuffer;","cb.flip();","final char[] chars = new char[cb.length()];","cb.get(chars);","cb.clear();","try","clob.setChars(session, m_position, chars, 0, chars.length);","catch (Exception e)","throw new IOException(e.toString());","m_position += chars.length;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/setCharacterStream(long)|,["checkClosed();","if (pos \< 1)","throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);","if (!isWritable)","throw JDBCUtil.notUpdatableColumn();","startUpdate();","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobClient/setString(long,java.lang.String,int,int)|,["checkClosed();","if (pos \< 1)","throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);","if (!isWritable)","throw JDBCUtil.notUpdatableColumn();","startUpdate();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobClient/charsetForName(java.lang.String)|,["String csn = charsetName;","if (csn == null)","csn = Charset.defaultCharset().name();","try","if (Charset.isSupported(csn))","return Charset.forName(csn);","catch (IllegalCharsetNameException x)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobFile/charsetForName(java.lang.String)|,["String csn = charsetName;","if (csn == null)","csn = Charset.defaultCharset().name();","try","if (Charset.isSupported(csn))","return Charset.forName(csn);","catch (IllegalCharsetNameException x)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/DateTimeType/getAggregateType(org.hsqldb.types.Type)|,["if (!other.isDateTimeType())","throw Error.error(ErrorCode.X_42562);","DateTimeType otherType = (DateTimeType) other;","if (otherType.startIntervalType \> endIntervalType","|| startIntervalType \> otherType.endIntervalType)","throw Error.error(ErrorCode.X_42562);","int     newType = typeCode;","int     scale   = this.scale \> otherType.scale ? this.scale","\n\t.....\n","if (startType == Types.SQL_INTERVAL_HOUR)","newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE",": Types.SQL_TIME;","else","newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE",": Types.SQL_TIMESTAMP;","return getDateTimeType(newType, scale);","\n\t.....\n","public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (typeCode == other.typeCode)","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/DateTimeType/getCombinedType(org.hsqldb.Session,org.hsqldb.types.Type,int)|,["if (!other.isDateTimeType())","throw Error.error(ErrorCode.X_42562);","DateTimeType otherType = (DateTimeType) other;","if (otherType.startIntervalType \> endIntervalType","|| startIntervalType \> otherType.endIntervalType)","throw Error.error(ErrorCode.X_42562);","int     newType = typeCode;","int     scale   = this.scale \> otherType.scale ? this.scale","\n\t.....\n","if (startType == Types.SQL_INTERVAL_HOUR)","newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE",": Types.SQL_TIME;","else","newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE",": Types.SQL_TIMESTAMP;","return getDateTimeType(newType, scale);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/OtherType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (typeCode == other.typeCode)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/BinaryType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (typeCode == other.typeCode)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/BooleanType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (typeCode == other.typeCode)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/IntervalType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (typeCode == other.typeCode)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/CharacterType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (typeCode == other.typeCode)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/BitType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (typeCode == other.typeCode)","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/types/DateTimeType/canMoveFrom(org.hsqldb.types.Type)|,["public int canMoveFrom(Type otherType)","if (otherType == this)","return 0;","if (typeCode == otherType.typeCode)","return scale \>= otherType.scale ? 0",": -1;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/IntervalType/canMoveFrom(org.hsqldb.types.Type)|,["public int canMoveFrom(Type otherType)","if (otherType == this)","return 0;","if (typeCode == otherType.typeCode)","return scale \>= otherType.scale ? 0",": -1;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/DateTimeType/add(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["if (a == null || b == null)","return null;","if (otherType.isNumberType())","if (typeCode == Types.SQL_DATE)","b = ((NumberType) otherType).floor(b);","b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(","IntervalSecondData.oneDay, b);","switch (typeCode)","case Types.SQL_TIME_WITH_TIME_ZONE :","case Types.SQL_TIME :","if (b instanceof IntervalMonthData)","throw Error.runtimeError(ErrorCode.U_S0500,","\"DateTimeType\");","else if (b instanceof IntervalSecondData)","return addSeconds((TimeData) a,","\n\t.....\n","break;","case Types.SQL_DATE :","case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :","case Types.SQL_TIMESTAMP :","if (b instanceof IntervalMonthData)","return addMonths(session, (TimestampData) a,","\n\t.....\n"],[<|java+method:///org/hsqldb/types/DateTimeType/subtract(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["if (a == null || b == null)","return null;","if (otherType.isNumberType())","if (typeCode == Types.SQL_DATE)","b = ((NumberType) otherType).floor(b);","b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(","IntervalSecondData.oneDay, b);","switch (typeCode)","case Types.SQL_TIME_WITH_TIME_ZONE :","case Types.SQL_TIME :","if (b instanceof IntervalMonthData)","throw Error.runtimeError(ErrorCode.U_S0500,","\"DateTimeType\");","else if (b instanceof IntervalSecondData)","return addSeconds((TimeData) a,","\n\t.....\n","break;","case Types.SQL_DATE :","case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :","case Types.SQL_TIMESTAMP :","if (b instanceof IntervalMonthData)","return addMonths(session, (TimestampData) a,","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/DateTimeType/truncate(java.lang.Object,int)|,["((TimeData) a).getZone());","case Types.SQL_DATE :","case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :","case Types.SQL_TIMESTAMP :","return new TimestampData(millis / 1000, 0,","((TimestampData) a).getZone());","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"DateTimeType\");","\n\t.....\n"],[<|java+method:///org/hsqldb/types/DateTimeType/round(java.lang.Object,int)|,["((TimeData) a).getZone());","case Types.SQL_DATE :","case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :","case Types.SQL_TIMESTAMP :","return new TimestampData(millis / 1000, 0,","((TimestampData) a).getZone());","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"DateTimeType\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/HsqlDeque/removeFirst()|,["firstindex++;","elementCount--;","if (elementCount == 0)","firstindex = endindex = 0;","else if (firstindex == list.length)","firstindex = 0;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/LongDeque/removeFirst()|,["firstindex++;","elementCount--;","if (elementCount == 0)","firstindex = endindex = 0;","else if (firstindex == list.length)","firstindex = 0;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/HsqlDeque/addFirst(java.lang.Object)|,["resetCapacity();","firstindex--;","if (firstindex \< 0)","firstindex = list.length - 1;","if (endindex == 0)","endindex = list.length;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/LongDeque/addFirst(long)|,["resetCapacity();","firstindex--;","if (firstindex \< 0)","firstindex = list.length - 1;","if (endindex == 0)","endindex = list.length;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/HsqlDeque/indexOf(java.lang.Object)|,["for (int i = 0; i \< elementCount; i++)","int index = firstindex + i;","if (index \>= list.length)","index -= list.length;","if (list[index] == value)","return i;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/LongDeque/indexOf(long)|,["for (int i = 0; i \< elementCount; i++)","int index = firstindex + i;","if (index \>= list.length)","index -= list.length;","if (list[index] == value)","return i;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/HsqlDeque/remove(int)|,["firstindex++;","if (firstindex == list.length)","firstindex = 0;","else if (target \> firstindex)","System.arraycopy(list, firstindex, list, firstindex + 1,","target - firstindex);","\n\t.....\n","firstindex++;","if (firstindex == list.length)","firstindex = 0;","else","System.arraycopy(list, target + 1, list, target,","endindex - target - 1);","endindex--;","\n\t.....\n","if (endindex == 0)","endindex = list.length;","elementCount--;","if (elementCount == 0)","firstindex = endindex = 0;","return value;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/LongDeque/remove(int)|,["firstindex++;","if (firstindex == list.length)","firstindex = 0;","else if (target \> firstindex)","System.arraycopy(list, firstindex, list, firstindex + 1,","target - firstindex);","\n\t.....\n","firstindex++;","if (firstindex == list.length)","firstindex = 0;","else","System.arraycopy(list, target + 1, list, target,","endindex - target - 1);","endindex--;","\n\t.....\n","if (endindex == 0)","endindex = list.length;","elementCount--;","if (elementCount == 0)","firstindex = endindex = 0;","return value;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/HsqlDeque/getInternalIndex(int)|,["private int getInternalIndex(int i) throws IndexOutOfBoundsException","if (i \< 0 || i \>= elementCount)","throw new IndexOutOfBoundsException();","int index = firstindex + i;","if (index \>= list.length)","index -= list.length;","return index;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/LongDeque/getInternalIndex(int)|,["private int getInternalIndex(int i) throws IndexOutOfBoundsException","if (i \< 0 || i \>= elementCount)","throw new IndexOutOfBoundsException();","int index = firstindex + i;","if (index \>= list.length)","index -= list.length;","return index;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/HsqlDeque/resetCapacity()|,["System.arraycopy(list, firstindex, newList, firstindex,","list.length - firstindex);","if (endindex \<= firstindex)","System.arraycopy(list, 0, newList, list.length, endindex);","endindex = list.length + endindex;","list = newList;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/LongDeque/resetCapacity()|,["System.arraycopy(list, firstindex, newList, firstindex,","list.length - firstindex);","if (endindex \<= firstindex)","System.arraycopy(list, 0, newList, list.length, endindex);","endindex = list.length + endindex;","list = newList;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/delete()|,["public void delete()","iLeft    = NO_POS;","iRight   = NO_POS;","iParent  = NO_POS;","nLeft    = null;","nRight   = null;","nParent  = null;","iBalance = 0;","row.setNodesChanged();","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDiskLarge/delete()|,["public void delete()","iLeft    = NO_POS;","iRight   = NO_POS;","iParent  = NO_POS;","nLeft    = null;","nRight   = null;","nParent  = null;","iBalance = 0;","row.setNodesChanged();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/getRow(org.hsqldb.persist.PersistentStore)|,["public RowAVL getRow(PersistentStore store)","if (!row.isInMemory())","return (RowAVLDisk) store.get(this.row, false);","else","row.updateAccessCount(store.getAccessCount());","return row;","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDiskLarge/getRow(org.hsqldb.persist.PersistentStore)|,["public RowAVL getRow(PersistentStore store)","if (!row.isInMemory())","return (RowAVLDisk) store.get(this.row, false);","else","row.updateAccessCount(store.getAccessCount());","return row;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/getLeft(org.hsqldb.persist.PersistentStore)|,["if (node.iLeft == NO_POS)","return null;","if (node.nLeft == null || !node.nLeft.isInMemory())","node.nLeft         = findNode(store, node.iLeft);","node.nLeft.nParent = node;","return node.nLeft;","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDiskLarge/getLeft(org.hsqldb.persist.PersistentStore)|,["if (node.iLeft == NO_POS)","return null;","if (node.nLeft == null || !node.nLeft.isInMemory())","node.nLeft         = findNode(store, node.iLeft);","node.nLeft.nParent = node;","return node.nLeft;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/getRight(org.hsqldb.persist.PersistentStore)|,["if (node.iRight == NO_POS)","return null;","if (node.nRight == null || !node.nRight.isInMemory())","node.nRight         = findNode(store, node.iRight);","node.nRight.nParent = node;","return node.nRight;","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDiskLarge/getRight(org.hsqldb.persist.PersistentStore)|,["if (node.iRight == NO_POS)","return null;","if (node.nRight == null || !node.nRight.isInMemory())","node.nRight         = findNode(store, node.iRight);","node.nRight.nParent = node;","return node.nRight;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/getParent(org.hsqldb.persist.PersistentStore)|,["NodeAVLDisk node = this;","RowAVLDisk  row  = this.row;","if (!row.isInMemory())","row  = (RowAVLDisk) store.get(this.row, false);","node = (NodeAVLDisk) row.getNode(iId);","if (node.iParent == NO_POS)","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDisk/isFromLeft(org.hsqldb.persist.PersistentStore)|,["NodeAVLDisk node = this;","RowAVLDisk  row  = this.row;","if (!row.isInMemory())","row  = (RowAVLDisk) store.get(this.row, false);","node = (NodeAVLDisk) row.getNode(iId);","if (node.iParent == NO_POS)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/setParent(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["NodeAVLDisk node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDisk) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"],[
    <|java+method:///org/hsqldb/index/NodeAVLDisk/setBalance(org.hsqldb.persist.PersistentStore,int)|,["NodeAVLDisk node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDisk) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/index/NodeAVLDisk/setLeft(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["NodeAVLDisk node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDisk) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/index/NodeAVLDisk/setRight(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["NodeAVLDisk node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDisk) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/set(org.hsqldb.persist.PersistentStore,boolean,org.hsqldb.index.NodeAVL)|,["public NodeAVL set(PersistentStore store, boolean isLeft, NodeAVL n)","NodeAVL x;","if (isLeft)","x = setLeft(store, n);","else","x = setRight(store, n);","if (n != null)","n.setParent(store, this);","return x;","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDiskLarge/set(org.hsqldb.persist.PersistentStore,boolean,org.hsqldb.index.NodeAVL)|,["public NodeAVL set(PersistentStore store, boolean isLeft, NodeAVL n)","NodeAVL x;","if (isLeft)","x = setLeft(store, n);","else","x = setRight(store, n);","if (n != null)","n.setParent(store, this);","return x;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDisk/setInMemory(boolean)|,["public void setInMemory(boolean in)","if (!in)","if (nLeft != null)","nLeft.nParent = null;","if (nRight != null)","nRight.nParent = null;","if (nParent != null)","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDiskLarge/setInMemory(boolean)|,["public void setInMemory(boolean in)","if (!in)","if (nLeft != null)","nLeft.nParent = null;","if (nRight != null)","nRight.nParent = null;","if (nParent != null)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCParameterMetaData/translateType(org.hsqldb.types.Type)|,["private Type translateType(Type type)","if (this.translateTTIType)","if (type.isIntervalType())","type = ((IntervalType) type).getCharacterType();","else if (type.isDateTimeTypeWithZone())","type = ((DateTimeType) type).getDateTimeTypeWithoutZone();","return type;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCResultSetMetaData/translateType(org.hsqldb.types.Type)|,["private Type translateType(Type type)","if (this.translateTTIType)","if (type.isIntervalType())","type = ((IntervalType) type).getCharacterType();","else if (type.isDateTimeTypeWithZone())","type = ((DateTimeType) type).getDateTimeTypeWithoutZone();","return type;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/addAdjusted(java.lang.Object%5B%5D,int%5B%5D)|,["if (columnMap == null)","data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,","visibleColumnCount);","else","Object[] newData = new Object[visibleColumnCount];","ArrayUtil.projectRow(data, columnMap, newData);","data = newData;","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/projectData(java.lang.Object%5B%5D,int%5B%5D)|,["if (columnMap == null)","data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,","visibleColumnCount);","else","Object[] newData = new Object[visibleColumnCount];","ArrayUtil.projectRow(data, columnMap, newData);","data = newData;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/write(org.hsqldb.rowio.RowOutputInterface,org.hsqldb.result.ResultMetaData)|,["public void write(RowOutputInterface out,","ResultMetaData meta) throws IOException","reset();","out.writeLong(id);","out.writeInt(size);","out.writeInt(0);    // offset","out.writeInt(size);","while (hasNext())","Object[] data = getNext();","out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,","data, null, null);","reset();","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/write(org.hsqldb.rowio.RowOutputInterface,org.hsqldb.result.ResultMetaData)|,["public void write(RowOutputInterface out,","ResultMetaData meta) throws IOException","reset();","out.writeLong(id);","out.writeInt(size);","out.writeInt(0);    // offset","out.writeInt(size);","while (hasNext())","Object[] data = getNext();","out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,","data, null, null);","reset();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/intersect(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["public void intersect(Session session, RowSetNavigatorData other)","removeDuplicates(session);","other.sortFull(session);","while (hasNext())","Object[] currentData = getNext();","boolean  hasRow      = other.containsRow(currentData);","if (!hasRow)","removeCurrent();","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/intersect(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["public void intersect(Session session, RowSetNavigatorData other)","removeDuplicates(session);","other.sortFull(session);","while (hasNext())","Object[] currentData = getNext();","boolean  hasRow      = other.containsRow(currentData);","if (!hasRow)","removeCurrent();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/intersectAll(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["Object[]    compareData = null;","RowIterator it;","Row         otherRow  = null;","Object[]    otherData = null;","sortFull(session);","other.sortFull(session);","it = fullIndex.emptyIterator();","while (hasNext())","Object[] currentData = getNext();","boolean newGroup =","compareData == null","|| fullIndex.compareRowNonUnique(","session, currentData, compareData,","fullIndex.getColumnCount()) != 0;","if (newGroup)","compareData = currentData;","it          = other.findFirstRow(currentData);","otherRow  = it.getNextRow();","otherData = otherRow == null ? null",": otherRow.getData();","if (otherData != null","&& fullIndex.compareRowNonUnique(","session, currentData, otherData,","fullIndex.getColumnCount()) == 0)","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/exceptAll(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["Object[]    compareData = null;","RowIterator it;","Row         otherRow  = null;","Object[]    otherData = null;","sortFull(session);","other.sortFull(session);","it = fullIndex.emptyIterator();","while (hasNext())","Object[] currentData = getNext();","boolean newGroup =","compareData == null","|| fullIndex.compareRowNonUnique(","session, currentData, compareData,","fullIndex.getColumnCount()) != 0;","if (newGroup)","compareData = currentData;","it          = other.findFirstRow(currentData);","otherRow  = it.getNextRow();","otherData = otherRow == null ? null",": otherRow.getData();","if (otherData != null","&& fullIndex.compareRowNonUnique(","session, currentData, otherData,","fullIndex.getColumnCount()) == 0)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/except(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["public void except(Session session, RowSetNavigatorData other)","removeDuplicates(session);","other.sortFull(session);","while (hasNext())","Object[] currentData = getNext();","boolean  hasRow      = other.containsRow(currentData);","if (hasRow)","removeCurrent();","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/except(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["public void except(Session session, RowSetNavigatorData other)","removeDuplicates(session);","other.sortFull(session);","while (hasNext())","Object[] currentData = getNext();","boolean  hasRow      = other.containsRow(currentData);","if (hasRow)","removeCurrent();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/trim(int,int)|,["public void trim(int limitstart, int limitcount)","if (size == 0)","return;","if (limitstart \>= size)","clear();","return;","if (limitstart != 0)","reset();","for (int i = 0; i \< limitstart; i++)","next();","removeCurrent();","\n\t.....\n","return;","reset();","for (int i = 0; i \< limitcount; i++)","next();","while (hasNext())","next();","removeCurrent();","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/trim(int,int)|,["public void trim(int limitstart, int limitcount)","if (size == 0)","return;","if (limitstart \>= size)","clear();","return;","if (limitstart != 0)","reset();","for (int i = 0; i \< limitstart; i++)","next();","removeCurrent();","\n\t.....\n","return;","reset();","for (int i = 0; i \< limitcount; i++)","next();","while (hasNext())","next();","removeCurrent();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorDataTable/getGroupData(java.lang.Object%5B%5D)|,["public Object[] getGroupData(Object[] data)","if (isSimpleAggregate)","if (simpleAggregateData == null)","simpleAggregateData = data;","return null;","return simpleAggregateData;","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/getGroupData(java.lang.Object%5B%5D)|,["public Object[] getGroupData(Object[] data)","if (isSimpleAggregate)","if (simpleAggregateData == null)","simpleAggregateData = data;","return null;","return simpleAggregateData;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementSimple/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer();","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","sb.append(Tokens.T_STATEMENT);","return sb.toString();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/StatementSet/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer();","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","sb.append(Tokens.T_STATEMENT);","return sb.toString();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/StatementExpression/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer();","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","sb.append(Tokens.T_STATEMENT);","return sb.toString();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/StatementCompound/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer();","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","sb.append(Tokens.T_STATEMENT);","return sb.toString();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/server/HsqlSocketFactorySecure/createServerSocket(int)|,["if (Error.TRACESYSTEMOUT)","Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");","Error.printSystemOut(\"capabilities for \" + ss + \":\");","Error.printSystemOut(\"----------------------------\");","dump(\"supported cipher suites\", ss.getSupportedCipherSuites());","dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());","return ss;","\n\t.....\n"],[<|java+method:///org/hsqldb/server/HsqlSocketFactorySecure/createServerSocket(int,java.lang.String)|,["if (Error.TRACESYSTEMOUT)","Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");","Error.printSystemOut(\"capabilities for \" + ss + \":\");","Error.printSystemOut(\"----------------------------\");","dump(\"supported cipher suites\", ss.getSupportedCipherSuites());","dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());","return ss;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/SYSTEM_COLUMN_SEQUENCE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["session.getGrantee().getColumnsForAllPrivileges(table);","if (columnList.isEmpty())","continue;","columnCount = table.getColumnCount();","for (int i = 0; i \< columnCount; i++)","ColumnSchema column = table.getColumn(i);","\n\t.....\n","continue;","row                   = t.getEmptyRowData();","row[table_cat]        = database.getCatalogName().name;","row[table_schem]      = table.getSchemaName().name;","row[table_name]       = table.getName().name;","row[column_name]      = column.getName().name;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/COLUMNS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["session.getGrantee().getColumnsForAllPrivileges(table);","if (columnList.isEmpty())","continue;","columnCount = table.getColumnCount();","for (int i = 0; i \< columnCount; i++)","ColumnSchema column = table.getColumn(i);","\n\t.....\n","continue;","row                   = t.getEmptyRowData();","row[table_cat]        = database.getCatalogName().name;","row[table_schem]      = table.getSchemaName().name;","row[table_name]       = table.getName().name;","row[column_name]      = column.getName().name;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ELEMENT_TYPES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["session.getGrantee().getColumnsForAllPrivileges(table);","if (columnList.isEmpty())","continue;","columnCount = table.getColumnCount();","for (int i = 0; i \< columnCount; i++)","ColumnSchema column = table.getColumn(i);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/SYSTEM_TEXTTABLES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator tables;","Table    table;","Object[] row;","tables =","database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);","while (tables.hasNext())","table = (Table) tables.next();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/COLUMN_COLUMN_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator tables;","Table    table;","Object[] row;","tables =","database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);","while (tables.hasNext())","table = (Table) tables.next();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/VIEW_TABLE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator tables;","Table    table;","Object[] row;","tables =","database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);","while (tables.hasNext())","table = (Table) tables.next();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/SYSTEM_TABLESTATS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["t.createPrimaryKeyConstraint(name, new int[]","0, 1, 2,",", false);","return t;","Iterator  tables;","Table     table;","Object[]  row;","\n\t.....\n","tables = allTables();","while (tables.hasNext())","table = (Table) tables.next();","if (!isAccessibleTable(session, table))","continue;","row                = t.getEmptyRowData();","row[table_catalog] = database.getCatalogName().name;","row[table_schema]  = table.getSchemaName().name;","row[table_name]    = table.getName().name;","switch (table.getTableType())","case TableBase.INFO_SCHEMA_TABLE :","case TableBase.VIEW_TABLE :","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/TABLES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["t.createPrimaryKeyConstraint(name, new int[]","0, 1, 2,",", false);","return t;","Iterator  tables;","Table     table;","Object[]  row;","\n\t.....\n","tables = allTables();","while (tables.hasNext())","table = (Table) tables.next();","if (!isAccessibleTable(session, table))","continue;","row                = t.getEmptyRowData();","row[table_catalog] = database.getCatalogName().name;","row[table_schema]  = table.getSchemaName().name;","row[table_name]    = table.getName().name;","switch (table.getTableType())","case TableBase.INFO_SCHEMA_TABLE :","case TableBase.VIEW_TABLE :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/AUTHORIZATIONS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["SchemaObject.INDEX);","t.createPrimaryKeyConstraint(name, new int[] 0 , true);","return t;","Iterator grantees;","Grantee  grantee;","Object[] row;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ENABLED_ROLES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["SchemaObject.INDEX);","t.createPrimaryKeyConstraint(name, new int[] 0 , true);","return t;","Iterator grantees;","Grantee  grantee;","Object[] row;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/CHECK_CONSTRAINTS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["tables =","database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);","while (tables.hasNext())","table = (Table) tables.next();","if (table.isView()","|| !session.getGrantee().isFullyAccessibleByRole(","table.getName()))","continue;","\n\t.....\n","Iterator it =","database.schemaManager.databaseObjectIterator(SchemaObject.DOMAIN);","while (it.hasNext())","Type domain = (Type) it.next();","if (!domain.isDomainType())","continue;","if (!session.getGrantee().isFullyAccessibleByRole(","domain.getName()))","continue;","\n\t.....\n","Constraint   constraint;","Object[]     row;","tables =","database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);","while (tables.hasNext())","table = (Table) tables.next();","if (table.isView()","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/CONSTRAINT_COLUMN_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["tables =","database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);","while (tables.hasNext())","table = (Table) tables.next();","if (table.isView()","|| !session.getGrantee().isFullyAccessibleByRole(","table.getName()))","continue;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/DOMAIN_CONSTRAINTS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator it =","database.schemaManager.databaseObjectIterator(SchemaObject.DOMAIN);","while (it.hasNext())","Type domain = (Type) it.next();","if (!domain.isDomainType())","continue;","if (!session.getGrantee().isFullyAccessibleByRole(","domain.getName()))","continue;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/REFERENTIAL_CONSTRAINTS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Constraint   constraint;","Object[]     row;","tables =","database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);","while (tables.hasNext())","table = (Table) tables.next();","if (table.isView()","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/COLUMN_DOMAIN_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["int      columnCount;","Iterator tables;","Table    table;","Object[] row;","Type     type;","HsqlName tableName;","tables = allTables();","Grantee grantee = session.getGrantee();","while (tables.hasNext())","table       = (Table) tables.next();","columnCount = table.getColumnCount();","tableName   = table.getName();","for (int i = 0; i \< columnCount; i++)","ColumnSchema column = table.getColumn(i);","type = column.getDataType();","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/COLUMN_UDT_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["int      columnCount;","Iterator tables;","Table    table;","Object[] row;","Type     type;","HsqlName tableName;","tables = allTables();","Grantee grantee = session.getGrantee();","while (tables.hasNext())","table       = (Table) tables.next();","columnCount = table.getColumnCount();","tableName   = table.getName();","for (int i = 0; i \< columnCount; i++)","ColumnSchema column = table.getColumn(i);","type = column.getDataType();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/COLUMNS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["((CharacterType) type).getCollation().getName().name;","else if (type.isNumberType())","row[numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","row[declared_numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","if (type.isExactNumberType())","row[numeric_scale] = row[declared_numeric_scale] =","ValuePool.getLong(type.scale);","row[numeric_precision_radix] =","ValuePool.getLong(type.getPrecisionRadix());","else if (type.isBooleanType())","else if (type.isDateTimeType())","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","\n\t.....\n","else if (type.isBinaryType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isBitType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isArrayType())","row[maximum_cardinality] =","ValuePool.getLong(type.arrayLimitCardinality());","row[data_type] = \"ARRAY\";","\n\t.....\n","int            columnCount;","Iterator       tables;","Table          table;","Object[]       row;","OrderedHashSet columnList;","Type           type;","tables = allTables();","while (tables.hasNext())","table = (Table) tables.next();","columnList =","\n\t.....\n","row[collation_name] =","((CharacterType) type).getCollation().getName().name;","else if (type.isNumberType())","row[numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","row[declared_numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","if (type.isExactNumberType())","row[numeric_scale] = row[declared_numeric_scale] =","ValuePool.getLong(type.scale);","row[numeric_precision_radix] =","ValuePool.getLong(type.getPrecisionRadix());","else if (type.isBooleanType())","else if (type.isDateTimeType())","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","\n\t.....\n","if (type.isCharacterType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision * 2);","row[character_set_catalog] =","database.getCatalogName().name;","row[character_set_schema] =","((CharacterType) type).getCharacterSet()",".getSchemaName().name;","row[character_set_name] =","((CharacterType) type).getCharacterSet().getName()",".name;","\n\t.....\n","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","row[interval_precision] =","ValuePool.getLong(type.precision);","\n\t.....\n","if (type.isCharacterType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision * 2);","row[character_set_catalog] =","database.getCatalogName().name;","row[character_set_schema] =","((CharacterType) type).getCharacterSet()",".getSchemaName().name;","row[character_set_name] =","((CharacterType) type).getCharacterSet().getName()",".name;","row[collation_catalog] = database.getCatalogName().name;","row[collation_schema] =","((CharacterType) type).getCollation().getSchemaName()",".name;","row[collation_name] =","((CharacterType) type).getCollation().getName().name;","else if (type.isNumberType())","row[numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","row[declared_numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","if (type.isExactNumberType())","row[numeric_scale] = row[declared_numeric_scale] =","ValuePool.getLong(type.scale);","row[numeric_precision_radix] =","ValuePool.getLong(type.getPrecisionRadix());","else if (type.isBooleanType())","else if (type.isDateTimeType())","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","row[interval_precision] =","ValuePool.getLong(type.precision);","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isBinaryType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isBitType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isArrayType())","row[maximum_cardinality] =","ValuePool.getLong(type.arrayLimitCardinality());","row[data_type] = \"ARRAY\";","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/DOMAINS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["((CharacterType) type).getCollation().getName().name;","else if (type.isNumberType())","row[numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","row[declared_numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","if (type.isExactNumberType())","row[numeric_scale] = row[declared_numeric_scale] =","ValuePool.getLong(type.scale);","row[numeric_precision_radix] =","ValuePool.getLong(type.getPrecisionRadix());","else if (type.isBooleanType())","else if (type.isDateTimeType())","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","\n\t.....\n","else if (type.isBinaryType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isBitType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isArrayType())","row[maximum_cardinality] =","ValuePool.getLong(type.arrayLimitCardinality());","row[data_type] = \"ARRAY\";","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ELEMENT_TYPES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["int            columnCount;","Iterator       tables;","Table          table;","Object[]       row;","OrderedHashSet columnList;","Type           type;","tables = allTables();","while (tables.hasNext())","table = (Table) tables.next();","columnList =","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/addTypeInfo(java.lang.Object%5B%5D,org.hsqldb.types.Type)|,["row[collation_name] =","((CharacterType) type).getCollation().getName().name;","else if (type.isNumberType())","row[numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","row[declared_numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","if (type.isExactNumberType())","row[numeric_scale] = row[declared_numeric_scale] =","ValuePool.getLong(type.scale);","row[numeric_precision_radix] =","ValuePool.getLong(type.getPrecisionRadix());","else if (type.isBooleanType())","else if (type.isDateTimeType())","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/PARAMETERS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (type.isCharacterType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision * 2);","row[character_set_catalog] =","database.getCatalogName().name;","row[character_set_schema] =","((CharacterType) type).getCharacterSet()",".getSchemaName().name;","row[character_set_name] =","((CharacterType) type).getCharacterSet().getName()",".name;","\n\t.....\n","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","row[interval_precision] =","ValuePool.getLong(type.precision);","\n\t.....\n","else if (type.isBinaryType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isBitType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isArrayType())","row[maximum_cardinality] =","ValuePool.getLong(type.arrayLimitCardinality());","row[data_type] = \"ARRAY\";","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (type.isCharacterType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision * 2);","row[character_set_catalog] =","database.getCatalogName().name;","row[character_set_schema] =","((CharacterType) type).getCharacterSet()",".getSchemaName().name;","row[character_set_name] =","((CharacterType) type).getCharacterSet().getName()",".name;","row[collation_catalog] = database.getCatalogName().name;","row[collation_schema] =","((CharacterType) type).getCollation().getSchemaName()",".name;","row[collation_name] =","((CharacterType) type).getCollation().getName().name;","else if (type.isNumberType())","row[numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","row[declared_numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","if (type.isExactNumberType())","row[numeric_scale] = row[declared_numeric_scale] =","ValuePool.getLong(type.scale);","row[numeric_precision_radix] =","ValuePool.getLong(type.getPrecisionRadix());","else if (type.isBooleanType())","else if (type.isDateTimeType())","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","row[interval_precision] =","ValuePool.getLong(type.precision);","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isBinaryType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isBitType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isArrayType())","row[maximum_cardinality] =","ValuePool.getLong(type.arrayLimitCardinality());","row[data_type] = \"ARRAY\";","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/USER_DEFINED_TYPES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["((CharacterType) type).getCollation().getName().name;","else if (type.isNumberType())","row[numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","row[declared_numeric_precision] = ValuePool.getLong(","((NumberType) type).getNumericPrecisionInRadix());","if (type.isExactNumberType())","row[numeric_scale] = row[declared_numeric_scale] =","ValuePool.getLong(type.scale);","row[numeric_precision_radix] =","ValuePool.getLong(type.getPrecisionRadix());","else if (type.isBooleanType())","else if (type.isDateTimeType())","row[datetime_precision] = ValuePool.getLong(type.scale);","else if (type.isIntervalType())","row[data_type] = \"INTERVAL\";","row[interval_type] =","((IntervalType) type).getQualifier(type.typeCode);","\n\t.....\n","else if (type.isBinaryType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isBitType())","row[character_maximum_length] =","ValuePool.getLong(type.precision);","row[character_octet_length] =","ValuePool.getLong(type.precision);","else if (type.isArrayType())","row[maximum_cardinality] =","ValuePool.getLong(type.arrayLimitCardinality());","row[data_type] = \"ARRAY\";","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/DOMAINS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);","addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);","addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);","\n\t.....\n","addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);","addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);","addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);","addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n","if (type.isCharacterType())","row[character_octet_length] = ValuePool.getLong(type.precision","row[character_set_catalog] = database.getCatalogName().name;","row[character_set_schema] =","((CharacterType) type).getCharacterSet().getSchemaName()",".name;","row[character_set_name] =","((CharacterType) type).getCharacterSet().getName().name;","row[collation_catalog] = database.getCatalogName().name;","row[collation_schema] =","((CharacterType) type).getCollation().getSchemaName().name;","row[collation_name] =","row[interval_precision] = ValuePool.getLong(type.precision);","row[datetime_precision] = ValuePool.getLong(type.scale);","row[character_maximum_length] =","ValuePool.getLong(type.precision);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ELEMENT_TYPES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);","addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);","addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);","\n\t.....\n","addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);","addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);","addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);","addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/PARAMETERS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);","addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);","addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);","\n\t.....\n","addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);","addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);","addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);","addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/USER_DEFINED_TYPES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);","addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);","addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);","addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);","\n\t.....\n","if (type.isCharacterType())","row[character_octet_length] = ValuePool.getLong(type.precision","row[character_set_catalog] = database.getCatalogName().name;","row[character_set_schema] =","((CharacterType) type).getCharacterSet().getSchemaName()",".name;","row[character_set_name] =","((CharacterType) type).getCharacterSet().getName().name;","row[collation_catalog] = database.getCatalogName().name;","row[collation_schema] =","((CharacterType) type).getCollation().getSchemaName().name;","row[collation_name] =","row[interval_precision] = ValuePool.getLong(type.precision);","row[datetime_precision] = ValuePool.getLong(type.scale);","row[character_maximum_length] =","ValuePool.getLong(type.precision);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ELEMENT_TYPES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);","addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/PARAMETERS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);","addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/PARAMETERS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["int           columnCount;","Iterator      routines;","RoutineSchema routineSchema;","Routine       routine;","Object[]      row;","Type          type;","\n\t.....\n","SchemaObject.ROUTINE);","while (routines.hasNext())","routineSchema = (RoutineSchema) routines.next();","if (!session.getGrantee().isAccessible(routineSchema))","continue;","Routine[] specifics = routineSchema.getSpecificRoutines();","for (int i = 0; i \< specifics.length; i++)","routine     = specifics[i];","columnCount = routine.getParameterCount();","for (int j = 0; j \< columnCount; j++)","ColumnSchema column = routine.getParameter(j);","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/SYSTEM_PROCEDURECOLUMNS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["int           columnCount;","Iterator      routines;","RoutineSchema routineSchema;","Routine       routine;","Object[]      row;","Type          type;","\n\t.....\n","SchemaObject.ROUTINE);","while (routines.hasNext())","routineSchema = (RoutineSchema) routines.next();","if (!session.getGrantee().isAccessible(routineSchema))","continue;","Routine[] specifics = routineSchema.getSpecificRoutines();","for (int i = 0; i \< specifics.length; i++)","routine     = specifics[i];","columnCount = routine.getParameterCount();","for (int j = 0; j \< columnCount; j++)","ColumnSchema column = routine.getParameter(j);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROLE_COLUMN_GRANTS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null","addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null","addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null","addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null","addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/COLUMN_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null","addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null","addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null","addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null","addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROLE_TABLE_GRANTS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null","addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null","addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null","addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null","addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/TABLE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not null","addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not null","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null","addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not null","addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null","addColumn(t, \"WITH_HIERARCHY\", YES_OR_NO);","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROLE_USAGE_GRANTS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null","addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null","addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null","addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null","addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);","addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/USAGE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not null","addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not null","addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not null","addColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not null","addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);","addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_COLUMN_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = routine.getSchemaName().name;","row[specific_name]    = routine.getSpecificName().name;","row[routine_catalog]  = database.getCatalogName().name;","row[routine_schema]   = routine.getSchemaName().name;","row[routine_name]     = routine.getName().name;","\n\t.....\n","addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);","\n\t.....\n",", false);","return t;","final int specific_catalog = 0;","final int specific_schema  = 1;","final int specific_name    = 2;","final int routine_catalog  = 3;","final int routine_schema   = 4;","final int routine_name     = 5;","\n\t.....\n","Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.SPECIFIC_ROUTINE);","while (it.hasNext())","Routine        routine = (Routine) it.next();","OrderedHashSet set     = routine.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n","addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);","\n\t.....\n",", false);","return t;","final int specific_catalog = 0;","final int specific_schema  = 1;","final int specific_name    = 2;","final int routine_catalog  = 3;","final int routine_schema   = 4;","final int routine_name     = 5;","final int table_catalog    = 6;","final int table_schema     = 7;","final int table_name       = 8;","\n\t.....\n","row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = routine.getSchemaName().name;","row[specific_name]    = routine.getSpecificName().name;","row[routine_catalog]  = database.getCatalogName().name;","row[routine_schema]   = routine.getSchemaName().name;","row[routine_name]     = routine.getName().name;","row[table_catalog]    = database.getCatalogName().name;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = routine.getSchemaName().name;","row[specific_name]    = routine.getSpecificName().name;","row[routine_catalog]  = database.getCatalogName().name;","row[routine_schema]   = routine.getSchemaName().name;","row[routine_name]     = routine.getName().name;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_ROUTINE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);","\n\t.....\n",", false);","return t;","final int specific_catalog = 0;","final int specific_schema  = 1;","final int specific_name    = 2;","final int routine_catalog  = 3;","final int routine_schema   = 4;","final int routine_name     = 5;","\n\t.....\n","Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.SPECIFIC_ROUTINE);","while (it.hasNext())","Routine        routine = (Routine) it.next();","OrderedHashSet set     = routine.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_SEQUENCE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.SPECIFIC_ROUTINE);","while (it.hasNext())","Routine        routine = (Routine) it.next();","OrderedHashSet set     = routine.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_TABLE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);","\n\t.....\n",", false);","return t;","final int specific_catalog = 0;","final int specific_schema  = 1;","final int specific_name    = 2;","final int routine_catalog  = 3;","final int routine_schema   = 4;","final int routine_name     = 5;","final int table_catalog    = 6;","final int table_schema     = 7;","final int table_name       = 8;","\n\t.....\n","Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.SPECIFIC_ROUTINE);","while (it.hasNext())","Routine        routine = (Routine) it.next();","OrderedHashSet set     = routine.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n","row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = routine.getSchemaName().name;","row[specific_name]    = routine.getSpecificName().name;","row[routine_catalog]  = database.getCatalogName().name;","row[routine_schema]   = routine.getSchemaName().name;","row[routine_name]     = routine.getName().name;","row[table_catalog]    = database.getCatalogName().name;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);","\n\t.....\n","row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = routine.getSchemaName().name;","row[specific_name]    = routine.getSpecificName().name;","row[routine_catalog]  = database.getCatalogName().name;","row[routine_schema]   = routine.getSchemaName().name;","row[routine_name]     = routine.getName().name;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (!grants.isEmpty())","grants.addAll(rights);","rights = grants;","for (int j = 0; j \< rights.size(); j++)","Right right          = (Right) rights.get(j);","Right grantableRight = right.getGrantableRights();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/USAGE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (!grants.isEmpty())","grants.addAll(rights);","rights = grants;","for (int j = 0; j \< rights.size(); j++)","Right right          = (Right) rights.get(j);","Right grantableRight = right.getGrantableRights();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/COLUMN_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (!grants.isEmpty())","grants.addAll(rights);","rights = grants;","for (int j = 0; j \< rights.size(); j++)","Right right          = (Right) rights.get(j);","Right grantableRight = right.getGrantableRights();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/TABLE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (!grants.isEmpty())","grants.addAll(rights);","rights = grants;","for (int j = 0; j \< rights.size(); j++)","Right right          = (Right) rights.get(j);","Right grantableRight = right.getGrantableRights();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_JAR_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["SchemaObject.INDEX);","t.createPrimaryKeyConstraint(name, new int[]","0, 1, 2, 3, 4, 5",", false);","return t;","final int specific_catalog = 0;","final int specific_schema  = 1;","final int specific_name    = 2;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_SEQUENCE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["SchemaObject.INDEX);","t.createPrimaryKeyConstraint(name, new int[]","0, 1, 2, 3, 4, 5",", false);","return t;","final int specific_catalog = 0;","final int specific_schema  = 1;","final int specific_name    = 2;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_ROUTINE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["continue;","if (!session.getGrantee().isFullyAccessibleByRole(refName))","continue;","row                   = t.getEmptyRowData();","row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = routine.getSchemaName().name;","row[specific_name]    = routine.getSpecificName().name;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_SEQUENCE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["continue;","if (!session.getGrantee().isFullyAccessibleByRole(refName))","continue;","row                   = t.getEmptyRowData();","row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = routine.getSchemaName().name;","row[specific_name]    = routine.getSpecificName().name;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/ROUTINE_SEQUENCE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["row[sequence_catalog] = database.getCatalogName().name;","row[sequence_schema]  = refName.schema.name;","row[sequence_name]    = refName.name;","try","t.insertSys(session, store, row);","catch (HsqlException e)","return t;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGER_SEQUENCE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["row[sequence_catalog] = database.getCatalogName().name;","row[sequence_schema]  = refName.schema.name;","row[sequence_name]    = refName.name;","try","t.insertSys(session, store, row);","catch (HsqlException e)","return t;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGER_COLUMN_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.TRIGGER);","while (it.hasNext())","TriggerDef trigger = (TriggerDef) it.next();","if (!session.getGrantee().isFullyAccessibleByRole(","trigger.getName()))","continue;","OrderedHashSet set = trigger.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n","addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null","\n\t.....\n",", false);","return t;","final int trigger_catalog = 0;","final int trigger_schema  = 1;","final int trigger_name    = 2;","final int table_catalog   = 3;","final int table_schema    = 4;","final int table_name      = 5;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGER_ROUTINE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.TRIGGER);","while (it.hasNext())","TriggerDef trigger = (TriggerDef) it.next();","if (!session.getGrantee().isFullyAccessibleByRole(","trigger.getName()))","continue;","OrderedHashSet set = trigger.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGER_SEQUENCE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.TRIGGER);","while (it.hasNext())","TriggerDef trigger = (TriggerDef) it.next();","if (!session.getGrantee().isFullyAccessibleByRole(","trigger.getName()))","continue;","OrderedHashSet set = trigger.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGER_TABLE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null","addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null","\n\t.....\n",", false);","return t;","final int trigger_catalog = 0;","final int trigger_schema  = 1;","final int trigger_name    = 2;","final int table_catalog   = 3;","final int table_schema    = 4;","final int table_name      = 5;","\n\t.....\n","Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.TRIGGER);","while (it.hasNext())","TriggerDef trigger = (TriggerDef) it.next();","if (!session.getGrantee().isFullyAccessibleByRole(","trigger.getName()))","continue;","OrderedHashSet set = trigger.getReferences();","for (int i = 0; i \< set.size(); i++)","HsqlName refName = (HsqlName) set.get(i);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGERS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.TRIGGER);","while (it.hasNext())","TriggerDef trigger = (TriggerDef) it.next();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGERED_UPDATE_COLUMNS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["Iterator it;","Object[] row;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.TRIGGER);","while (it.hasNext())","TriggerDef trigger = (TriggerDef) it.next();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/TRIGGER_ROUTINE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = refName.schema.name;","row[specific_name]    = refName.name;","try","t.insertSys(session, store, row);","catch (HsqlException e)","return t;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/VIEW_ROUTINE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["row[specific_catalog] = database.getCatalogName().name;","row[specific_schema]  = refName.schema.name;","row[specific_name]    = refName.name;","try","t.insertSys(session, store, row);","catch (HsqlException e)","return t;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/UDT_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["for (int i = 0; i \< grantees.size(); i++)","Grantee granteeObject = (Grantee) grantees.get(i);","OrderedHashSet rights =","granteeObject.getAllDirectPrivileges(object);","OrderedHashSet grants =","granteeObject.getAllGrantedPrivileges(object);","\n\t.....\n","row[privilege_type] = Tokens.T_USAGE;","row[is_grantable] =","right.getGrantee() == object.getOwner()","|| grantableRight.isFull() ? Tokens.T_YES",": Tokens.T_NO;;","try","t.insertSys(session, store, row);","catch (HsqlException e)","return t;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/USAGE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["for (int i = 0; i \< grantees.size(); i++)","Grantee granteeObject = (Grantee) grantees.get(i);","OrderedHashSet rights =","granteeObject.getAllDirectPrivileges(object);","OrderedHashSet grants =","granteeObject.getAllGrantedPrivileges(object);","\n\t.....\n","row[privilege_type] = Tokens.T_USAGE;","row[is_grantable] =","right.getGrantee() == object.getOwner()","|| grantableRight.isFull() ? Tokens.T_YES",": Tokens.T_NO;;","try","t.insertSys(session, store, row);","catch (HsqlException e)","return t;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/VIEW_COLUMN_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["final int view_catalog  = 0;","final int view_schema   = 1;","final int view_name     = 2;","final int table_catalog = 3;","final int table_schema  = 4;","final int table_name    = 5;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationFull/VIEW_TABLE_USAGE(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["final int view_catalog  = 0;","final int view_schema   = 1;","final int view_name     = 2;","final int table_catalog = 3;","final int table_schema  = 4;","final int table_name    = 5;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobFile/length()|,["catch (Exception ex)","throw JDBCUtil.sqlException(ex);","finally","if (adapter != null)","try","adapter.close();","catch (Exception ex)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobFile/truncate(long)|,["catch (Exception ex)","throw JDBCUtil.sqlException(ex);","finally","if (adapter != null)","try","adapter.close();","catch (Exception ex)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobFile/getSubString(long,int)|,["catch (SQLException ex)","throw ex;","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","finally","if (reader != null)","try","reader.close();","catch (Exception ex)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClobFile/position(char%5B%5D,long)|,["catch (SQLException ex)","throw ex;","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","finally","if (reader != null)","try","reader.close();","catch (Exception ex)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobFile/getAsciiStream()|,["public void close() throws IOException","try","super.close();","finally","m_streams.remove(this);",";","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","m_streams.add(stream);","return stream;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/jdbc/JDBCClobFile/setAsciiStream(long)|,["public void close() throws IOException","try","super.close();","finally","m_streams.remove(this);",";","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","m_streams.add(stream);","return stream;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCClobFile/setCharacterStream(long)|,["public void close() throws IOException","try","super.close();","finally","m_streams.remove(this);",";","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCClobFile/getCharacterStream(long,long)|,["public void close() throws IOException","try","super.close();","finally","m_streams.remove(this);",";","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCBlobFile/setBinaryStream(long)|,["public void close() throws IOException","try","super.close();","finally","m_streams.remove(this);",";","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCBlobFile/getBinaryStream(long,long)|,["public void close() throws IOException","try","super.close();","finally","m_streams.remove(this);",";","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobFile/position(char%5B%5D,long)|,["final long start) throws SQLException","if (start \< 1)","throw JDBCUtil.outOfRangeArgument(\"start: \" + start);","else if (pattern == null || pattern.length == 0","|| start \> length())","return -1L;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCBlobFile/position(byte%5B%5D,long)|,["final long start) throws SQLException","if (start \< 1)","throw JDBCUtil.outOfRangeArgument(\"start: \" + start);","else if (pattern == null || pattern.length == 0","|| start \> length())","return -1L;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobFile/free()|,["public synchronized void free() throws SQLException","if (m_closed)","return;","m_closed = true;","final List streams = new ArrayList();","streams.addAll(m_streams);","m_streams = null;","for (Iterator itr = streams.iterator(); itr.hasNext(); )","final Object stream = itr.next();","if (stream instanceof InputStream)","try","((InputStream) stream).close();","catch (Exception ex)","else if (stream instanceof OutputStream)","try","((OutputStream) stream).close();","catch (Exception ex)","if (m_deleteOnFree)","try","m_file.delete();","catch (Exception e)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCBlobFile/free()|,["public synchronized void free() throws SQLException","if (m_closed)","return;","m_closed = true;","final List streams = new ArrayList();","streams.addAll(m_streams);","m_streams = null;","for (Iterator itr = streams.iterator(); itr.hasNext(); )","final Object stream = itr.next();","if (stream instanceof InputStream)","try","((InputStream) stream).close();","catch (Exception ex)","else if (stream instanceof OutputStream)","try","((OutputStream) stream).close();","catch (Exception ex)","if (m_deleteOnFree)","try","m_file.delete();","catch (Exception e)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobFile/checkIsFile(boolean)|,["protected final void checkIsFile(boolean checkExists) throws SQLException","boolean exists = false;","boolean isFile = false;","try","exists = m_file.exists();","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","if (exists)","try","isFile = m_file.isFile();","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","if (exists)","if (!isFile)","throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);","else if (checkExists)","throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCBlobFile/checkIsFile(boolean)|,["protected final void checkIsFile(boolean checkExists) throws SQLException","boolean exists = false;","boolean isFile = false;","try","exists = m_file.exists();","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","if (exists)","try","isFile = m_file.isFile();","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","if (exists)","if (!isFile)","throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);","else if (checkExists)","throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClobFile/createFile()|,["try","if (!m_file.exists())","FileUtil.getFileUtil().makeParentDirectories(m_file);","m_file.createNewFile();","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","checkIsFile( /*checkExists*/true);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCBlobFile/createFile()|,["try","if (!m_file.exists())","FileUtil.getFileUtil().makeParentDirectories(m_file);","m_file.createNewFile();","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","checkIsFile( /*checkExists*/true);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Table/getSQL()|,["for (int j = 0; j \< columnCount; j++)","ColumnSchema column  = getColumn(j);","String       colname = column.getName().statementName;","Type         type    = column.getDataType();","if (j \> 0)","sb.append(\',\');","sb.append(colname);","sb.append(\' \');","sb.append(type.getTypeDefinition());","\n\t.....\n"],[<|java+method:///org/hsqldb/Table/getColumnListWithTypeSQL()|,["for (int j = 0; j \< columnCount; j++)","ColumnSchema column  = getColumn(j);","String       colname = column.getName().statementName;","Type         type    = column.getDataType();","if (j \> 0)","sb.append(\',\');","sb.append(colname);","sb.append(\' \');","sb.append(type.getTypeDefinition());","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Table/collectFKReadLocks(int%5B%5D,org.hsqldb.lib.OrderedHashSet)|,["for (int i = 0; i \< fkMainConstraints.length; i++)","Constraint constraint  = fkMainConstraints[i];","Table      ref         = constraint.getRef();","int[]      mainColumns = constraint.getMainColumns();","if (ref == this)","continue;","if (columnMap == null)","if (constraint.core.hasDeleteAction)","int[] cols =","constraint.core.deleteAction","== SchemaObject.ReferentialAction.CASCADE ? null",": constraint",".getRefColumns();","if (set.add(ref.getName()))","\n\t.....\n"],[<|java+method:///org/hsqldb/Table/collectFKWriteLocks(int%5B%5D,org.hsqldb.lib.OrderedHashSet)|,["for (int i = 0; i \< fkMainConstraints.length; i++)","Constraint constraint  = fkMainConstraints[i];","Table      ref         = constraint.getRef();","int[]      mainColumns = constraint.getMainColumns();","if (ref == this)","continue;","if (columnMap == null)","if (constraint.core.hasDeleteAction)","int[] cols =","constraint.core.deleteAction","== SchemaObject.ReferentialAction.CASCADE ? null",": constraint",".getRefColumns();","if (set.add(ref.getName()))","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Table/getIndexForColumn(org.hsqldb.Session,int)|,["switch (tableType)","case TableBase.FUNCTION_TABLE :","case TableBase.SYSTEM_SUBQUERY :","case TableBase.INFO_SCHEMA_TABLE :","case TableBase.VIEW_TABLE :","case TableBase.TEMP_TABLE :","\n\t.....\n","if (i \> -1)","return indexList[i];","switch (tableType)","case TableBase.FUNCTION_TABLE :","case TableBase.SYSTEM_SUBQUERY :","case TableBase.INFO_SCHEMA_TABLE :","case TableBase.VIEW_TABLE :","case TableBase.TEMP_TABLE :","\n\t.....\n"],[
    <|java+method:///org/hsqldb/Table/indexTypeForColumn(org.hsqldb.Session,int)|,["switch (tableType)","case TableBase.FUNCTION_TABLE :","case TableBase.SYSTEM_SUBQUERY :","case TableBase.INFO_SCHEMA_TABLE :","case TableBase.VIEW_TABLE :","case TableBase.TEMP_TABLE :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/Table/getIndexForColumns(org.hsqldb.Session,int%5B%5D)|,["if (i \> -1)","return indexList[i];","switch (tableType)","case TableBase.FUNCTION_TABLE :","case TableBase.SYSTEM_SUBQUERY :","case TableBase.INFO_SCHEMA_TABLE :","case TableBase.VIEW_TABLE :","case TableBase.TEMP_TABLE :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/Table/getIndexForColumns(org.hsqldb.Session,org.hsqldb.lib.OrderedIntHashSet,int,boolean)|,["switch (tableType)","case TableBase.FUNCTION_TABLE :","case TableBase.SYSTEM_SUBQUERY :","case TableBase.INFO_SCHEMA_TABLE :","case TableBase.VIEW_TABLE :","case TableBase.TEMP_TABLE :","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/Table/fireTriggers(org.hsqldb.Session,int,org.hsqldb.navigator.RowSetNavigatorDataChange)|,["if (!database.isReferentialIntegrity())","return;","TriggerDef[] trigVec = triggerLists[trigVecIndex];","for (int i = 0, size = trigVec.length; i \< size; i++)","TriggerDef td         = trigVec[i];","boolean    sqlTrigger = td instanceof TriggerDefSQL;","if (td.hasOldTable())","td.pushPair(session, null, null);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/Table/fireTriggers(org.hsqldb.Session,int,org.hsqldb.navigator.RowSetNavigator)|,["if (!database.isReferentialIntegrity())","return;","TriggerDef[] trigVec = triggerLists[trigVecIndex];","for (int i = 0, size = trigVec.length; i \< size; i++)","TriggerDef td         = trigVec[i];","boolean    sqlTrigger = td instanceof TriggerDefSQL;","if (td.hasOldTable())","td.pushPair(session, null, null);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/Table/fireTriggers(org.hsqldb.Session,int,java.lang.Object%5B%5D,java.lang.Object%5B%5D,int%5B%5D)|,["if (!database.isReferentialIntegrity())","return;","TriggerDef[] trigVec = triggerLists[trigVecIndex];","for (int i = 0, size = trigVec.length; i \< size; i++)","TriggerDef td         = trigVec[i];","boolean    sqlTrigger = td instanceof TriggerDefSQL;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/main(java.lang.String%5B%5D)|,["public static void main(String[] arg)","System.getProperties().put(\"sun.java2d.noddraw\", \"true\");","String  currentArg;","String  lowerArg;","String  urlid        = null;","String  rcFile       = null;","boolean autoConnect  = false;","boolean urlidConnect = false;","bMustExit = true;","for (int i = 0; i \< arg.length; i++)","currentArg = arg[i];","\n\t.....\n","if (lowerArg.startsWith(\"--\"))","lowerArg = lowerArg.substring(1);","if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\"))","else if (i == arg.length - 1)","throw new IllegalArgumentException(\"No value for argument \"","+ currentArg);","i++;","if (lowerArg.equals(\"-driver\"))","defDriver   = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-url\"))","defURL      = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-user\"))","defUser     = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-password\"))","defPassword = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-urlid\"))","urlid        = arg[i];","urlidConnect = true;","else if (lowerArg.equals(\"-rcfile\"))","rcFile       = arg[i];","urlidConnect = true;","else if (lowerArg.equals(\"-dir\"))","defDirectory = arg[i];","else if (lowerArg.equals(\"-script\"))","defScript = arg[i];","else if (lowerArg.equals(\"-noexit\"))","bMustExit = false;","i--;","else if (lowerArg.equals(\"-help\"))","showUsage();","return;","else","throw new IllegalArgumentException(","\"invalid argrument \" + currentArg + \" try:  java... \"","+ DatabaseManagerSwing.class.getName() + \" --help\");","\n\t.....\n","defUser, defPassword);","else if (urlidConnect)","if (urlid == null)","throw new IllegalArgumentException(","\"You must specify an \'urlid\' to use an RC file\");","autoConnect = true;","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/main(java.lang.String%5B%5D)|,["public static void main(String[] arg)","System.getProperties().put(\"sun.java2d.noddraw\", \"true\");","String  currentArg;","String  lowerArg;","String  urlid        = null;","String  rcFile       = null;","boolean autoConnect  = false;","boolean urlidConnect = false;","bMustExit = true;","for (int i = 0; i \< arg.length; i++)","currentArg = arg[i];","\n\t.....\n","if (lowerArg.startsWith(\"--\"))","lowerArg = lowerArg.substring(1);","if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\"))","else if (i == arg.length - 1)","throw new IllegalArgumentException(\"No value for argument \"","+ currentArg);","i++;","if (lowerArg.equals(\"-driver\"))","defDriver   = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-url\"))","defURL      = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-user\"))","defUser     = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-password\"))","defPassword = arg[i];","autoConnect = true;","else if (lowerArg.equals(\"-urlid\"))","urlid        = arg[i];","urlidConnect = true;","else if (lowerArg.equals(\"-rcfile\"))","rcFile       = arg[i];","urlidConnect = true;","else if (lowerArg.equals(\"-dir\"))","defDirectory = arg[i];","else if (lowerArg.equals(\"-script\"))","defScript = arg[i];","else if (lowerArg.equals(\"-noexit\"))","bMustExit = false;","i--;","else if (lowerArg.equals(\"-help\"))","showUsage();","return;","else","throw new IllegalArgumentException(","\"invalid argrument \" + currentArg + \" try:  java... \"","+ DatabaseManagerSwing.class.getName() + \" --help\");","\n\t.....\n","defUser, defPassword);","else if (urlidConnect)","if (urlid == null)","throw new IllegalArgumentException(","\"You must specify an \'urlid\' to use an RC file\");","autoConnect = true;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/showUsage()|,["+ \"where options include:\\n\"","+ \"    --help                show this message\\n\"","+ \"    --driver \<classname\>  jdbc driver class\\n\"","+ \"    --url \<name\>          jdbc url\\n\"","+ \"    --user \<name\>         username used for connection\\n\"","+ \"    --password \<password\> password for this user\\n\"","+ \"    --urlid \<urlid\>       use url/user/password/driver in rc file\\n\"","+ \"    --rcfile \<file\>       (defaults to \'dbmanager.rc\' in home dir)\\n\"","+ \"    --dir \<path\>          default directory\\n\"","+ \"    --script \<file\>       reads from script file\\n\"","+ \"    --noexit              do not call system.exit()\");","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/showUsage()|,["+ \"where options include:\\n\"","+ \"    --help                show this message\\n\"","+ \"    --driver \<classname\>  jdbc driver class\\n\"","+ \"    --url \<name\>          jdbc url\\n\"","+ \"    --user \<name\>         username used for connection\\n\"","+ \"    --password \<password\> password for this user\\n\"","+ \"    --urlid \<urlid\>       use url/user/password/driver in rc file\\n\"","+ \"    --rcfile \<file\>       (defaults to \'dbmanager.rc\' in home dir)\\n\"","+ \"    --dir \<path\>          default directory\\n\"","+ \"    --script \<file\>       reads from script file\\n\"","+ \"    --noexit              do not call system.exit()\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/actionPerformed(java.awt.event.ActionEvent)|,["else if (s.equals(\"Exit\"))","windowClosing(null);","else if (s.equals(\"Transfer\"))","Transfer.work(null);","else if (s.equals(\"Dump\"))","Transfer.work(new String[] \"-d\" );","else if (s.equals(\"Restore\"))","\n\t.....\n","showHelp(DatabaseManagerCommon.selectHelp);","else if (s.equals(\"INSERT\"))","showHelp(DatabaseManagerCommon.insertHelp);","else if (s.equals(\"UPDATE\"))","showHelp(DatabaseManagerCommon.updateHelp);","else if (s.equals(\"DELETE\"))","showHelp(DatabaseManagerCommon.deleteHelp);","\n\t.....\n","showHelp(DatabaseManagerCommon.createTableHelp);","else if (s.equals(\"DROP TABLE\"))","showHelp(DatabaseManagerCommon.dropTableHelp);","else if (s.equals(\"CREATE INDEX\"))","showHelp(DatabaseManagerCommon.createIndexHelp);","else if (s.equals(\"DROP INDEX\"))","showHelp(DatabaseManagerCommon.dropIndexHelp);","\n\t.....\n","else if (s.equals(\"SCRIPT\"))","showHelp(DatabaseManagerCommon.scriptHelp);","else if (s.equals(\"SHUTDOWN\"))","showHelp(DatabaseManagerCommon.shutdownHelp);","else if (s.equals(\"SET\"))","showHelp(DatabaseManagerCommon.setHelp);","else if (s.equals(\"Test Script\"))","showHelp(DatabaseManagerCommon.testHelp);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/actionPerformed(java.awt.event.ActionEvent)|,["else if (s.equals(\"Exit\"))","windowClosing(null);","else if (s.equals(\"Transfer\"))","Transfer.work(null);","else if (s.equals(\"Dump\"))","Transfer.work(new String[] \"-d\" );","else if (s.equals(\"Restore\"))","\n\t.....\n","showHelp(DatabaseManagerCommon.selectHelp);","else if (s.equals(\"INSERT\"))","showHelp(DatabaseManagerCommon.insertHelp);","else if (s.equals(\"UPDATE\"))","showHelp(DatabaseManagerCommon.updateHelp);","else if (s.equals(\"DELETE\"))","showHelp(DatabaseManagerCommon.deleteHelp);","\n\t.....\n","showHelp(DatabaseManagerCommon.createTableHelp);","else if (s.equals(\"DROP TABLE\"))","showHelp(DatabaseManagerCommon.dropTableHelp);","else if (s.equals(\"CREATE INDEX\"))","showHelp(DatabaseManagerCommon.createIndexHelp);","else if (s.equals(\"DROP INDEX\"))","showHelp(DatabaseManagerCommon.dropIndexHelp);","\n\t.....\n","else if (s.equals(\"SCRIPT\"))","showHelp(DatabaseManagerCommon.scriptHelp);","else if (s.equals(\"SHUTDOWN\"))","showHelp(DatabaseManagerCommon.shutdownHelp);","else if (s.equals(\"SET\"))","showHelp(DatabaseManagerCommon.setHelp);","else if (s.equals(\"Test Script\"))","showHelp(DatabaseManagerCommon.testHelp);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/execute()|,["if (r == -1)","ResultSet rs = sStatement.getResultSet();","try","formatResultSet(rs);","catch (Throwable t)","g[0] = \"Error displaying the ResultSet\";","gResult.setHead(g);","String s = t.getMessage();","g[0] = s;","gResult.addRow(g);","else","g[0] = \"update count\";","gResult.setHead(g);","\n\t.....\n","catch (SQLException e)","lTime = System.currentTimeMillis() - lTime;","g[0]  = \"SQL Error\";","gResult.setHead(g);","String s = e.getMessage();","s    += \" / Error Code: \" + e.getErrorCode();","s    += \" / State: \" + e.getSQLState();","g[0] = s;","gResult.addRow(g);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/executeSQL()|,["if (r == -1)","ResultSet rs = sStatement.getResultSet();","try","formatResultSet(rs);","catch (Throwable t)","g[0] = \"Error displaying the ResultSet\";","gResult.setHead(g);","String s = t.getMessage();","g[0] = s;","gResult.addRow(g);","else","g[0] = \"update count\";","gResult.setHead(g);","\n\t.....\n","catch (SQLException e)","lTime = System.currentTimeMillis() - lTime;","g[0]  = \"SQL Error\";","gResult.setHead(g);","String s = e.getMessage();","s    += \" / Error Code: \" + e.getErrorCode();","s    += \" / State: \" + e.getSQLState();","g[0] = s;","gResult.addRow(g);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/formatResultSet(java.sql.ResultSet)|,["if (r == null)","String[] g = new String[1];","g[0] = \"Result\";","gResult.setHead(g);","g[0] = \"(empty)\";","gResult.addRow(g);","return;","try","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/formatResultSet(java.sql.ResultSet)|,["if (r == null)","String[] g = new String[1];","g[0] = \"Result\";","gResult.setHead(g);","g[0] = \"(empty)\";","gResult.addRow(g);","return;","try","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/testPerformance()|,["String       all   = txtCommand.getText();","StringBuffer b     = new StringBuffer();","long         total = 0;","for (int i = 0; i \< all.length(); i++)","char c = all.charAt(i);","if (c != \'\\n\')","b.append(c);","all = b.toString();","String[] g = new String[4];","g[0] = \"ms\";","g[1] = \"count\";","g[2] = \"sql\";","g[3] = \"error\";","gResult.setHead(g);","int max = 1;","lTime = System.currentTimeMillis() - lTime;","while (!all.equals(\"\"))","int    i = all.indexOf(\';\');","String sql;","if (i != -1)","sql = all.substring(0, i);","all = all.substring(i + 1);","else","sql = all;","all = \"\";","if (sql.startsWith(\"--#\"))","max = Integer.parseInt(sql.substring(3));","continue;","else if (sql.startsWith(\"--\"))","continue;","g[2] = sql;","long l = 0;","try","l = DatabaseManagerCommon.testStatement(sStatement, sql, max);","total += l;","\n\t.....\n","System.out.println(l + \" ms : \" + sql);","g[0] = \"\" + total;","g[1] = \"total\";","g[2] = \"\";","gResult.addRow(g);","lTime = System.currentTimeMillis() - lTime;","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/testPerformance()|,["String       all   = txtCommand.getText();","StringBuffer b     = new StringBuffer();","long         total = 0;","for (int i = 0; i \< all.length(); i++)","char c = all.charAt(i);","if (c != \'\\n\')","b.append(c);","all = b.toString();","String[] g = new String[4];","g[0] = \"ms\";","g[1] = \"count\";","g[2] = \"sql\";","g[3] = \"error\";","gResult.setHead(g);","int max = 1;","lTime = System.currentTimeMillis() - lTime;","while (!all.equals(\"\"))","int    i = all.indexOf(\';\');","String sql;","if (i != -1)","sql = all.substring(0, i);","all = all.substring(i + 1);","else","sql = all;","all = \"\";","if (sql.startsWith(\"--#\"))","max = Integer.parseInt(sql.substring(3));","continue;","else if (sql.startsWith(\"--\"))","continue;","g[2] = sql;","long l = 0;","try","l = DatabaseManagerCommon.testStatement(sStatement, sql, max);","total += l;","\n\t.....\n","System.out.println(l + \" ms : \" + sql);","g[0] = \"\" + total;","g[1] = \"total\";","g[2] = \"\";","gResult.addRow(g);","lTime = System.currentTimeMillis() - lTime;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/showResultInText()|,["b.append(\' \');","b.append(NL);","for (int i = 0; i \< width; i++)","for (int l = 0; l \< size[i]; l++)","b.append(\'-\');","b.append(\' \');","b.append(NL);","for (int i = 0; i \< height; i++)","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/showResultInText()|,["b.append(\' \');","b.append(NL);","for (int i = 0; i \< width; i++)","for (int l = 0; l \< size[i]; l++)","b.append(\'-\');","b.append(\' \');","b.append(NL);","for (int i = 0; i \< height; i++)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManager/addToRecent(java.lang.String)|,["private void addToRecent(String s)","for (int i = 0; i \< iMaxRecent; i++)","if (s.equals(sRecent[i]))","return;","if (sRecent[iRecent] != null)","mRecent.remove(iRecent);","sRecent[iRecent] = s;","if (s.length() \> 43)","s = s.substring(0, 40) + \"...\";","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/addToRecent(java.lang.String)|,["private void addToRecent(String s)","for (int i = 0; i \< iMaxRecent; i++)","if (s.equals(sRecent[i]))","return;","if (sRecent[iRecent] != null)","mRecent.remove(iRecent);","sRecent[iRecent] = s;","if (s.length() \> 43)","s = s.substring(0, 40) + \"...\";","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ExpressionColumn/replaceAliasInOrderBy(org.hsqldb.Session,org.hsqldb.Expression%5B%5D,int)|,["Expression replaceAliasInOrderBy(Session session, Expression[] columns,","int length)","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] == null)","continue;","nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,","length);","\n\t.....\n"],[<|java+method:///org/hsqldb/Expression/replaceAliasInOrderBy(org.hsqldb.Session,org.hsqldb.Expression%5B%5D,int)|,["Expression replaceAliasInOrderBy(Session session, Expression[] columns,","int length)","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] == null)","continue;","nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,","length);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/DataFileCacheSession/close()|,["throw Error.error(t, ErrorCode.FILE_IO_ERROR,","ErrorCode.M_DataFileCache_close, new Object[]","t.toString(), dataFileName",");","finally","writeLock.unlock();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/persist/DataFileCache/close()|,["throw Error.error(t, ErrorCode.FILE_IO_ERROR,","ErrorCode.M_DataFileCache_close, new Object[]","t.toString(), dataFileName",");","finally","writeLock.unlock();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/persist/DataFileCache/reset()|,["throw Error.error(t, ErrorCode.FILE_IO_ERROR,","ErrorCode.M_DataFileCache_close, new Object[]","t.toString(), dataFileName",");","finally","writeLock.unlock();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ExpressionArrayAggregate/getSQL()|,["sb.append(left).append(\')\');","break;","default :","throw Error.runtimeError(ErrorCode.U_S0500,","\"ExpressionAggregate\");","return sb.toString();","\n\t.....\n"],[<|java+method:///org/hsqldb/ExpressionAggregate/getSQL()|,["sb.append(left).append(\')\');","break;","default :","throw Error.runtimeError(ErrorCode.U_S0500,","\"ExpressionAggregate\");","return sb.toString();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ExpressionArrayAggregate/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer(64);","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","switch (opType)","\n\t.....\n","break;","if (getLeftNode() != null)","sb.append(\" arg=[\");","sb.append(nodes[LEFT].describe(session, blanks + 1));","sb.append(\']\');","return sb.toString();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/Expression/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer(64);","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","switch (opType)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionAggregate/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer(64);","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","switch (opType)","\n\t.....\n","break;","if (getLeftNode() != null)","sb.append(\" arg=[\");","sb.append(nodes[LEFT].describe(session, blanks + 1));","sb.append(\']\');","return sb.toString();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionLogical/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer(64);","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","switch (opType)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionArithmetic/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer(64);","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","switch (opType)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionValue/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer(64);","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","switch (opType)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionOp/describe(org.hsqldb.Session,int)|,["protected String describe(Session session, int blanks)","StringBuffer sb = new StringBuffer(64);","sb.append(\'\\n\');","for (int i = 0; i \< blanks; i++)","sb.append(\' \');","switch (opType)","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ExpressionArrayAggregate/resolveColumnReferences(org.hsqldb.Session,org.hsqldb.RangeGroup,int,org.hsqldb.RangeGroup%5B%5D,org.hsqldb.lib.HsqlList,boolean)|,["rangeGroup, rangeCount, rangeGroups, null, false);","if (conditionSet != null)","ExpressionColumn.checkColumnsResolved(conditionSet);","if (unresolvedSet == null)","unresolvedSet = new ArrayListIdentity();","unresolvedSet.add(this);","return unresolvedSet;","\n\t.....\n"],[<|java+method:///org/hsqldb/ExpressionAggregate/resolveColumnReferences(org.hsqldb.Session,org.hsqldb.RangeGroup,int,org.hsqldb.RangeGroup%5B%5D,org.hsqldb.lib.HsqlList,boolean)|,["rangeGroup, rangeCount, rangeGroups, null, false);","if (conditionSet != null)","ExpressionColumn.checkColumnsResolved(conditionSet);","if (unresolvedSet == null)","unresolvedSet = new ArrayListIdentity();","unresolvedSet.add(this);","return unresolvedSet;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/result/Result/newResult(org.hsqldb.Session,java.io.DataInput,org.hsqldb.rowio.RowInputBinary,int)|,["break;","case ResultConstants.DISCONNECT :","case ResultConstants.RESETSESSION :","case ResultConstants.STARTTRAN :","break;","case ResultConstants.PREPARE :","\n\t.....\n","break;","case ResultConstants.TX_COMMIT :","case ResultConstants.TX_ROLLBACK :","case ResultConstants.TX_COMMIT_AND_CHAIN :","case ResultConstants.TX_ROLLBACK_AND_CHAIN :","break;","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/result/Result/write(org.hsqldb.SessionInterface,org.hsqldb.lib.DataOutputStream,org.hsqldb.rowio.RowOutputInterface)|,["break;","case ResultConstants.DISCONNECT :","case ResultConstants.RESETSESSION :","case ResultConstants.STARTTRAN :","break;","case ResultConstants.PREPARE :","\n\t.....\n","break;","case ResultConstants.TX_COMMIT :","case ResultConstants.TX_ROLLBACK :","case ResultConstants.TX_COMMIT_AND_CHAIN :","case ResultConstants.TX_ROLLBACK_AND_CHAIN :","break;","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/LobManager/createBlob(org.hsqldb.Session,long)|,["writeLock.lock();","try","Long           lobID    = getNewLobID();","ResultMetaData meta     = createLob.getParametersMetaData();","Object         params[] = new Object[meta.getColumnCount()];","params[LOB_IDS.LOB_ID]          = lobID;","params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);","params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;","\n\t.....\n","Result result = sysLobSession.executeCompiledStatement(createLob,","params, 0);","usageChanged = true;","return lobID.longValue();","finally","writeLock.unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/LobManager/createClob(org.hsqldb.Session,long)|,["writeLock.lock();","try","Long           lobID    = getNewLobID();","ResultMetaData meta     = createLob.getParametersMetaData();","Object         params[] = new Object[meta.getColumnCount()];","params[LOB_IDS.LOB_ID]          = lobID;","params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);","params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;","\n\t.....\n","Result result = sysLobSession.executeCompiledStatement(createLob,","params, 0);","usageChanged = true;","return lobID.longValue();","finally","writeLock.unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/LobManager/getLength(long)|,["writeLock.lock();","try","Object[] data = getLobHeader(lobID);","if (data == null)","throw Error.error(ErrorCode.X_0F502);","long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();","return ResultLob.newLobSetResponse(lobID, length);","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/LobManager/getTruncateLength(long)|,["writeLock.lock();","try","Object[] data = getLobHeader(lobID);","if (data == null)","throw Error.error(ErrorCode.X_0F502);","long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();","return ResultLob.newLobSetResponse(lobID, length);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/LobManager/compare(org.hsqldb.types.BlobData,byte%5B%5D)|,["writeLock.lock();","try","Object[] data    = getLobHeader(a.getId());","long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","int[][] aAddresses = getBlockAddresses(a.getId(), 0,","Integer.MAX_VALUE);","int aIndex  = 0;","int bOffset = 0;","int aOffset = 0;","if (aLength == 0)","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/LobManager/compare(org.hsqldb.types.Collation,org.hsqldb.types.ClobData,java.lang.String)|,["writeLock.lock();","try","Object[] data    = getLobHeader(a.getId());","long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","int[][] aAddresses = getBlockAddresses(a.getId(), 0,","Integer.MAX_VALUE);","int aIndex  = 0;","int bOffset = 0;","int aOffset = 0;","if (aLength == 0)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/LobManager/compareBytesNormal(long,long)|,["Object[] data    = getLobHeader(aID);","long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","data = getLobHeader(bID);","long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);","int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);","int     aIndex     = 0;","int     bIndex     = 0;","int     aOffset    = 0;","int     bOffset    = 0;","if (aLength == 0)","return bLength == 0 ? 0",": -1;","if (bLength == 0)","return 1;","while (true)","int aBlockOffset = aAddresses[aIndex][LOBS.BLOCK_ADDR] + aOffset;","int bBlockOffset = bAddresses[bIndex][LOBS.BLOCK_ADDR] + bOffset;","byte[] aBytes    = getLobStore().getBlockBytes(aBlockOffset, 1);","byte[] bBytes    = getLobStore().getBlockBytes(bBlockOffset, 1);","\n\t.....\n","aOffset++;","bOffset++;","if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT])","aOffset = 0;","aIndex++;","if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT])","bOffset = 0;","bIndex++;","if (aIndex == aAddresses.length)","break;","if (bIndex == bAddresses.length)","break;","if (aLength == bLength)","return 0;","return aLength \> bLength ? 1",": -1;","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/LobManager/compareTextNormal(org.hsqldb.types.Collation,long,long)|,["Object[] data    = getLobHeader(aID);","long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","data = getLobHeader(bID);","long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();","int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);","int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);","int     aIndex     = 0;","int     bIndex     = 0;","int     aOffset    = 0;","int     bOffset    = 0;","if (aLength == 0)","return bLength == 0 ? 0",": -1;","if (bLength == 0)","return 1;","while (true)","int aBlockOffset = aAddresses[aIndex][LOBS.BLOCK_ADDR] + aOffset;","int bBlockOffset = bAddresses[bIndex][LOBS.BLOCK_ADDR] + bOffset;","byte[] aBytes    = getLobStore().getBlockBytes(aBlockOffset, 1);","byte[] bBytes    = getLobStore().getBlockBytes(bBlockOffset, 1);","\n\t.....\n","aOffset++;","bOffset++;","if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT])","aOffset = 0;","aIndex++;","if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT])","bOffset = 0;","bIndex++;","if (aIndex == aAddresses.length)","break;","if (bIndex == bAddresses.length)","break;","if (aLength == bLength)","return 0;","return aLength \> bLength ? 1",": -1;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/LobManager/createDuplicateLob(long,long)|,["if (byteBuffer == null)","throw Error.error(ErrorCode.DATA_IS_READONLY);","writeLock.lock();","try","Object[] data = getLobHeader(lobID);","if (data == null)","return Result.newErrorResult(Error.error(ErrorCode.X_0F502));","\n\t.....\n"],[
    <|java+method:///org/hsqldb/persist/LobManager/setBytes(long,long,byte%5B%5D,int)|,["if (byteBuffer == null)","throw Error.error(ErrorCode.DATA_IS_READONLY);","writeLock.lock();","try","Object[] data = getLobHeader(lobID);","if (data == null)","return Result.newErrorResult(Error.error(ErrorCode.X_0F502));","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/persist/LobManager/setChars(long,long,char%5B%5D,int)|,["if (byteBuffer == null)","throw Error.error(ErrorCode.DATA_IS_READONLY);","writeLock.lock();","try","Object[] data = getLobHeader(lobID);","if (data == null)","return Result.newErrorResult(Error.error(ErrorCode.X_0F502));","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/persist/LobManager/truncate(long,long)|,["if (byteBuffer == null)","throw Error.error(ErrorCode.DATA_IS_READONLY);","writeLock.lock();","try","Object[] data = getLobHeader(lobID);","if (data == null)","return Result.newErrorResult(Error.error(ErrorCode.X_0F502));","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/persist/LobManager/setBytes(long,long,byte%5B%5D,int)|,["if (result.isError())","return result;","if (offset + dataLength \> length)","length = offset + dataLength;","result = setLength(lobID, length);","if (result.isError())","return result;","return ResultLob.newLobSetResponse(lobID, length);","finally","writeLock.unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/LobManager/setChars(long,long,char%5B%5D,int)|,["if (result.isError())","return result;","if (offset + dataLength \> length)","length = offset + dataLength;","result = setLength(lobID, length);","if (result.isError())","return result;","return ResultLob.newLobSetResponse(lobID, length);","finally","writeLock.unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/LobManager/setBytesForNewBlob(long,java.io.InputStream,long)|,["long length)","if (length == 0)","return ResultLob.newLobSetResponse(lobID, 0);","if (byteBuffer == null)","throw Error.error(ErrorCode.DATA_IS_READONLY);","writeLock.lock();","try","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/LobManager/setCharsForNewClob(long,java.io.InputStream,long)|,["long length)","if (length == 0)","return ResultLob.newLobSetResponse(lobID, 0);","if (byteBuffer == null)","throw Error.error(ErrorCode.DATA_IS_READONLY);","writeLock.lock();","try","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerCommon/setWaitedSessionsTPL(org.hsqldb.Session,org.hsqldb.Statement)|,["for (int i = 0; i \< nameList.length; i++)","HsqlName name = nameList[i];","if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME)","continue;","Session holder = (Session) tableWriteLocks.get(name);","if (holder != null && holder != session)","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerCommon/hasLocks(org.hsqldb.Session,org.hsqldb.Statement)|,["for (int i = 0; i \< nameList.length; i++)","HsqlName name = nameList[i];","if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME)","continue;","Session holder = (Session) tableWriteLocks.get(name);","if (holder != null && holder != session)","\n\t.....\n","for (int i = 0; i \< nameList.length; i++)","HsqlName name = nameList[i];","if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME)","continue;","Session holder = (Session) tableWriteLocks.get(name);","if (holder != null && holder != session)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/pool/JDBCXADataSource/getReference()|,["public Reference getReference() throws NamingException","String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";","Reference ref   = new Reference(getClass().getName(), cname, null);","ref.add(new StringRefAddr(\"database\", getDatabase()));","ref.add(new StringRefAddr(\"user\", getUser()));","ref.add(new StringRefAddr(\"password\", password));","ref.add(new StringRefAddr(\"loginTimeout\",","Integer.toString(loginTimeout)));","return ref;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/jdbc/pool/JDBCPooledDataSource/getReference()|,["public Reference getReference() throws NamingException","String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";","Reference ref   = new Reference(getClass().getName(), cname, null);","ref.add(new StringRefAddr(\"database\", getDatabase()));","ref.add(new StringRefAddr(\"user\", getUser()));","ref.add(new StringRefAddr(\"password\", password));","ref.add(new StringRefAddr(\"loginTimeout\",","Integer.toString(loginTimeout)));","return ref;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCDataSource/getReference()|,["public Reference getReference() throws NamingException","String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";","Reference ref   = new Reference(getClass().getName(), cname, null);","ref.add(new StringRefAddr(\"database\", getDatabase()));","ref.add(new StringRefAddr(\"user\", getUser()));","ref.add(new StringRefAddr(\"password\", password));","ref.add(new StringRefAddr(\"loginTimeout\",","Integer.toString(loginTimeout)));","return ref;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/rowio/RowInputText/readSmallint()|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","return ValuePool.getInt(Integer.parseInt(s));","\n\t.....\n"],[
    <|java+method:///org/hsqldb/rowio/RowInputText/readInteger()|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","return ValuePool.getInt(Integer.parseInt(s));","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readBigint()|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readReal()|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readDecimal(org.hsqldb.types.Type)|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readTime(org.hsqldb.types.Type)|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readDate(org.hsqldb.types.Type)|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readTimestamp(org.hsqldb.types.Type)|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readYearMonthInterval(org.hsqldb.types.Type)|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readDaySecondInterval(org.hsqldb.types.Type)|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readBoole()|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readClob()|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/rowio/RowInputText/readBlob()|,["String s = readString();","if (s == null)","return null;","s = s.trim();","if (s.length() == 0)","return null;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/types/BinaryType/getDefinition()|,["public String getDefinition()","if (precision == 0)","return getNameString();","StringBuffer sb = new StringBuffer(16);","sb.append(getNameString());","sb.append(\'(\');","sb.append(precision);","sb.append(\')\');","return sb.toString();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/CharacterType/getDefinition()|,["public String getDefinition()","if (precision == 0)","return getNameString();","StringBuffer sb = new StringBuffer(16);","sb.append(getNameString());","sb.append(\'(\');","sb.append(precision);","sb.append(\')\');","return sb.toString();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/BitType/getDefinition()|,["public String getDefinition()","if (precision == 0)","return getNameString();","StringBuffer sb = new StringBuffer(16);","sb.append(getNameString());","sb.append(\'(\');","sb.append(precision);","sb.append(\')\');","return sb.toString();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/types/BinaryType/getCombinedType(org.hsqldb.Session,org.hsqldb.types.Type,int)|,["public Type getCombinedType(Session session, Type other, int operation)","if (operation != OpTypes.CONCAT)","return getAggregateType(other);","Type newType;","long newPrecision = this.precision + other.precision;","switch (other.typeCode)","case Types.SQL_ALL_TYPES :","return this;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/CharacterType/getCombinedType(org.hsqldb.Session,org.hsqldb.types.Type,int)|,["public Type getCombinedType(Session session, Type other, int operation)","if (operation != OpTypes.CONCAT)","return getAggregateType(other);","Type newType;","long newPrecision = this.precision + other.precision;","switch (other.typeCode)","case Types.SQL_ALL_TYPES :","return this;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/BinaryType/castOrConvertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type,boolean)|,["Object castOrConvertToType(SessionInterface session, Object a,","Type otherType, boolean cast)","BlobData b;","if (a == null)","return null;","switch (otherType.typeCode)","\n\t.....\n"],[<|java+method:///org/hsqldb/types/BitType/castOrConvertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type,boolean)|,["Object castOrConvertToType(SessionInterface session, Object a,","Type otherType, boolean cast)","BlobData b;","if (a == null)","return null;","switch (otherType.typeCode)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/BinaryType/substring(org.hsqldb.SessionInterface,org.hsqldb.types.BlobData,long,long,boolean)|,["throw Error.error(ErrorCode.X_22011);","if (offset \> end || end \< 0)","offset = 0;","end    = 0;","if (offset \< 0)","offset = 0;","if (end \> dataLength)","end = dataLength;","length = end - offset;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/CharacterType/substring(org.hsqldb.SessionInterface,java.lang.Object,long,long,boolean,boolean)|,["throw Error.error(ErrorCode.X_22011);","if (offset \> end || end \< 0)","offset = 0;","end    = 0;","if (offset \< 0)","offset = 0;","if (end \> dataLength)","end = dataLength;","length = end - offset;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/BitType/substring(org.hsqldb.SessionInterface,org.hsqldb.types.BlobData,long,long,boolean)|,["throw Error.error(ErrorCode.X_22011);","if (offset \> end || end \< 0)","offset = 0;","end    = 0;","if (offset \< 0)","offset = 0;","if (end \> dataLength)","end = dataLength;","length = end - offset;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/StatementSet/execute(org.hsqldb.Session)|,["public Result execute(Session session)","Result result;","try","if (subqueries.length \> 0)","materializeSubQueries(session);","result = getResult(session);","catch (Throwable t)","result = Result.newErrorResult(t, null);","if (result.isError())","result.getException().setStatementType(group, type);","return result;","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementExpression/execute(org.hsqldb.Session)|,["public Result execute(Session session)","Result result;","try","if (subqueries.length \> 0)","materializeSubQueries(session);","result = getResult(session);","catch (Throwable t)","result = Result.newErrorResult(t, null);","if (result.isError())","result.getException().setStatementType(group, type);","return result;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementSet/collectTableNamesForRead(org.hsqldb.lib.OrderedHashSet)|,["Table    rangeTable = rangeVariables[i].rangeTable;","HsqlName name       = rangeTable.getName();","if (rangeTable.isDataReadOnly() || rangeTable.isTemp())","continue;","if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME)","continue;","set.add(name);","for (int i = 0; i \< subqueries.length; i++)","if (subqueries[i].queryExpression != null)","subqueries[i].queryExpression.getBaseTableNames(set);","for (int i = 0; i \< routines.length; i++)","set.addAll(routines[i].getTableNamesForRead());","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementDML/collectTableNamesForRead(org.hsqldb.lib.OrderedHashSet)|,["Table    rangeTable = rangeVariables[i].rangeTable;","HsqlName name       = rangeTable.getName();","if (rangeTable.isDataReadOnly() || rangeTable.isTemp())","continue;","if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME)","continue;","set.add(name);","for (int i = 0; i \< subqueries.length; i++)","if (subqueries[i].queryExpression != null)","subqueries[i].queryExpression.getBaseTableNames(set);","for (int i = 0; i \< routines.length; i++)","set.addAll(routines[i].getTableNamesForRead());","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementDML/executeUpdateStatement(org.hsqldb.Session)|,["Result          resultOut          = null;","RowSetNavigator generatedNavigator = null;","if (generatedIndexes != null)","resultOut = Result.newUpdateCountResult(generatedResultMetaData,","0);","generatedNavigator = resultOut.getChainedResult().getNavigator();","\n\t.....\n","session.addWarning(HsqlException.noDataCondition);","return Result.updateZeroResult;","return new Result(ResultConstants.UPDATECOUNT, count);","else","resultOut.setUpdateCount(count);","if (count == 0)","session.addWarning(HsqlException.noDataCondition);","return resultOut;","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementDML/executeMergeStatement(org.hsqldb.Session)|,["Result          resultOut          = null;","RowSetNavigator generatedNavigator = null;","if (generatedIndexes != null)","resultOut = Result.newUpdateCountResult(generatedResultMetaData,","0);","generatedNavigator = resultOut.getChainedResult().getNavigator();","\n\t.....\n","session.addWarning(HsqlException.noDataCondition);","return Result.updateZeroResult;","return new Result(ResultConstants.UPDATECOUNT, count);","else","resultOut.setUpdateCount(count);","if (count == 0)","session.addWarning(HsqlException.noDataCondition);","return resultOut;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/auth/AuthBeanMultiplexer/getUniqueNameFor(java.sql.Connection)|,["finally","if (rs != null) try","rs.close();","catch (SQLException se)","logger.error(","\"Failed to close ResultSet for retrieving db name\");","rs = null;  // Encourage GC","\n\t.....\n"],[<|java+method:///org/hsqldb/auth/AuthUtils/getEnabledRoles(java.sql.Connection)|,["finally","if (rs != null) try","rs.close();","catch (SQLException se)","logger.error(","\"Failed to close ResultSet for retrieving db name\");","rs = null;  // Encourage GC","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/HsqlArrayList/get(int)|,["if (index \>= elementCount)","throw new IndexOutOfBoundsException(\"Index out of bounds: \"","+ index + \" \>= \"","+ elementCount);","if (index \< 0)","throw new IndexOutOfBoundsException(\"Index out of bounds: \"","+ index + \" \< 0\");","\n\t.....\n"],[
    <|java+method:///org/hsqldb/lib/HsqlArrayList/remove(int)|,["if (index \>= elementCount)","throw new IndexOutOfBoundsException(\"Index out of bounds: \"","+ index + \" \>= \"","+ elementCount);","if (index \< 0)","throw new IndexOutOfBoundsException(\"Index out of bounds: \"","+ index + \" \< 0\");","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/HsqlArrayList/set(int,java.lang.Object)|,["if (index \>= elementCount)","throw new IndexOutOfBoundsException(\"Index out of bounds: \"","+ index + \" \>= \"","+ elementCount);","if (index \< 0)","throw new IndexOutOfBoundsException(\"Index out of bounds: \"","+ index + \" \< 0\");","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/RowAVLDiskData/insertNode(int)|,["public NodeAVL insertNode(int index)","NodeAVL backnode = getNode(index - 1);","NodeAVL newnode  = new NodeAVL(this);","newnode.nNext  = backnode.nNext;","backnode.nNext = newnode;","return newnode;","\n\t.....\n"],[<|java+method:///org/hsqldb/RowAVL/insertNode(int)|,["public NodeAVL insertNode(int index)","NodeAVL backnode = getNode(index - 1);","NodeAVL newnode  = new NodeAVL(this);","newnode.nNext  = backnode.nNext;","backnode.nNext = newnode;","return newnode;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLDiskData/commitRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["break;","case RowAction.ACTION_INSERT_DELETE :","if (txModel == TransactionManager.LOCKS)","remove(row);","else","delete(session, row);","remove(row);","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RowStoreAVLDiskData/rollbackRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["break;","case RowAction.ACTION_INSERT_DELETE :","if (txModel == TransactionManager.LOCKS)","remove(row);","else","delete(session, row);","remove(row);","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/prepareCommitActions(org.hsqldb.Session)|,["if (session.abortTransaction)","return false;","writeLock.lock();","try","int limit = session.rowActionList.size();","for (int i = 0; i \< limit; i++)","RowAction action = (RowAction) session.rowActionList.get(i);","if (!action.canCommit(session, session.tempSet))","return false;","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMVCC/commitTransaction(org.hsqldb.Session)|,["if (session.abortTransaction)","return false;","writeLock.lock();","try","int limit = session.rowActionList.size();","for (int i = 0; i \< limit; i++)","RowAction action = (RowAction) session.rowActionList.get(i);","if (!action.canCommit(session, session.tempSet))","return false;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/commitTransaction(org.hsqldb.Session)|,["adjustLobUsage(session);","persistCommit(session);","int newLimit = session.rowActionList.size();","if (newLimit \> limit)","Object[] list = session.rowActionList.getArray();","mergeTransaction(list, limit, newLimit,","session.actionTimestamp);","finaliseRows(session, list, limit, newLimit);","session.rowActionList.setSize(limit);","if (session == lobSession","|| getFirstLiveTransactionTimestamp()","\> session.actionTimestamp)","Object[] list = session.rowActionList.getArray();","mergeTransaction(list, 0, limit, session.actionTimestamp);","finaliseRows(session, list, 0, limit);","else","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/commitTransaction(org.hsqldb.Session)|,["adjustLobUsage(session);","persistCommit(session);","int newLimit = session.rowActionList.size();","if (newLimit \> limit)","Object[] list = session.rowActionList.getArray();","mergeTransaction(list, limit, newLimit,","session.actionTimestamp);","finaliseRows(session, list, limit, newLimit);","session.rowActionList.setSize(limit);","if (session == lobSession","|| getFirstLiveTransactionTimestamp()","\> session.actionTimestamp)","Object[] list = session.rowActionList.getArray();","mergeTransaction(list, 0, limit, session.actionTimestamp);","finaliseRows(session, list, 0, limit);","else","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/rollback(org.hsqldb.Session)|,["public void rollback(Session session)","writeLock.lock();","try","session.abortTransaction        = false;","session.actionTimestamp         = getNextGlobalChangeTimestamp();","session.transactionEndTimestamp = session.actionTimestamp;","rollbackPartial(session, 0, session.transactionTimestamp);","endTransaction(session);","endTransactionTPL(session);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/rollback(org.hsqldb.Session)|,["public void rollback(Session session)","writeLock.lock();","try","session.abortTransaction        = false;","session.actionTimestamp         = getNextGlobalChangeTimestamp();","session.transactionEndTimestamp = session.actionTimestamp;","rollbackPartial(session, 0, session.transactionTimestamp);","endTransaction(session);","endTransactionTPL(session);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/rollbackSavepoint(org.hsqldb.Session,int)|,["public void rollbackSavepoint(Session session, int index)","long timestamp = session.sessionContext.savepointTimestamps.get(index);","Integer oi = (Integer) session.sessionContext.savepoints.get(index);","int     start  = oi.intValue();","while (session.sessionContext.savepoints.size() \> index + 1)","session.sessionContext.savepoints.remove(","session.sessionContext.savepoints.size() - 1);","session.sessionContext.savepointTimestamps.removeLast();","rollbackPartial(session, start, timestamp);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/TransactionManager2PL/rollbackSavepoint(org.hsqldb.Session,int)|,["public void rollbackSavepoint(Session session, int index)","long timestamp = session.sessionContext.savepointTimestamps.get(index);","Integer oi = (Integer) session.sessionContext.savepoints.get(index);","int     start  = oi.intValue();","while (session.sessionContext.savepoints.size() \> index + 1)","session.sessionContext.savepoints.remove(","session.sessionContext.savepoints.size() - 1);","session.sessionContext.savepointTimestamps.removeLast();","rollbackPartial(session, start, timestamp);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/TransactionManagerMV2PL/rollbackSavepoint(org.hsqldb.Session,int)|,["public void rollbackSavepoint(Session session, int index)","long timestamp = session.sessionContext.savepointTimestamps.get(index);","Integer oi = (Integer) session.sessionContext.savepoints.get(index);","int     start  = oi.intValue();","while (session.sessionContext.savepoints.size() \> index + 1)","session.sessionContext.savepoints.remove(","session.sessionContext.savepoints.size() - 1);","session.sessionContext.savepointTimestamps.removeLast();","rollbackPartial(session, start, timestamp);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/rollbackPartial(org.hsqldb.Session,int,long)|,["public void rollbackPartial(Session session, int start, long timestamp)","int limit = session.rowActionList.size();","if (start == limit)","return;","for (int i = start; i \< limit; i++)","RowAction action = (RowAction) session.rowActionList.get(i);","if (action == null)","\n\t.....\n","action.rollback(session, timestamp);","writeLock.lock();","try","Object[] list = session.rowActionList.getArray();","mergeRolledBackTransaction(session, timestamp, list, start, limit);","finally","writeLock.unlock();","session.rowActionList.setSize(start);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/rollbackPartial(org.hsqldb.Session,int,long)|,["public void rollbackPartial(Session session, int start, long timestamp)","int limit = session.rowActionList.size();","if (start == limit)","return;","for (int i = start; i \< limit; i++)","RowAction action = (RowAction) session.rowActionList.get(i);","if (action == null)","\n\t.....\n","action.rollback(session, timestamp);","writeLock.lock();","try","Object[] list = session.rowActionList.getArray();","mergeRolledBackTransaction(session, timestamp, list, start, limit);","finally","writeLock.unlock();","session.rowActionList.setSize(start);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/canRead(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,long,int)|,["public boolean canRead(Session session, PersistentStore store, long id,","int mode)","if (store.getTable().tableType == TableBase.TEMP_TABLE)","return true;","RowAction action = (RowAction) rowActionMap.get(id);","if (action == null)","return true;","return action.canRead(session, mode);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/canRead(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,long,int)|,["public boolean canRead(Session session, PersistentStore store, long id,","int mode)","if (store.getTable().tableType == TableBase.TEMP_TABLE)","return true;","RowAction action = (RowAction) rowActionMap.get(id);","if (action == null)","return true;","return action.canRead(session, mode);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/setTransactionInfo(org.hsqldb.persist.PersistentStore,org.hsqldb.persist.CachedObject)|,["public void setTransactionInfo(PersistentStore store,","CachedObject object)","if (object.isMemory())","return;","Row row = (Row) object;","if (row.getTable().tableType == TableBase.CACHED_TABLE)","RowAction rowact = (RowAction) rowActionMap.get(row.getPos());","row.rowAction = rowact;","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/setTransactionInfo(org.hsqldb.persist.PersistentStore,org.hsqldb.persist.CachedObject)|,["public void setTransactionInfo(PersistentStore store,","CachedObject object)","if (object.isMemory())","return;","Row row = (Row) object;","if (row.getTable().tableType == TableBase.CACHED_TABLE)","RowAction rowact = (RowAction) rowActionMap.get(row.getPos());","row.rowAction = rowact;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/removeTransactionInfo(long)|,["public void removeTransactionInfo(long id)","rowActionMap.getWriteLock().lock();","try","RowAction action = (RowAction) rowActionMap.get(id);","synchronized (action)","if (action.type == RowActionBase.ACTION_NONE)","rowActionMap.remove(id);","finally","rowActionMap.getWriteLock().unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/removeTransactionInfo(long)|,["public void removeTransactionInfo(long id)","rowActionMap.getWriteLock().lock();","try","RowAction action = (RowAction) rowActionMap.get(id);","synchronized (action)","if (action.type == RowActionBase.ACTION_NONE)","rowActionMap.remove(id);","finally","rowActionMap.getWriteLock().unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/addToCommittedQueue(org.hsqldb.Session,java.lang.Object%5B%5D)|,["void addToCommittedQueue(Session session, Object[] list)","synchronized (committedTransactionTimestamps)","committedTransactions.addLast(list);","committedTransactionTimestamps.addLast(session.actionTimestamp);","if (committedTransactions.size() \> 64)","System.out.println(\"******* excessive transaction queue\");","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/addToCommittedQueue(org.hsqldb.Session,java.lang.Object%5B%5D)|,["void addToCommittedQueue(Session session, Object[] list)","synchronized (committedTransactionTimestamps)","committedTransactions.addLast(list);","committedTransactionTimestamps.addLast(session.actionTimestamp);","if (committedTransactions.size() \> 64)","System.out.println(\"******* excessive transaction queue\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/mergeExpiredTransactions(org.hsqldb.Session)|,["synchronized (committedTransactionTimestamps)","if (committedTransactionTimestamps.isEmpty())","break;","commitTimestamp = committedTransactionTimestamps.getFirst();","if (commitTimestamp \< timestamp)","committedTransactionTimestamps.removeFirst();","actions = (Object[]) committedTransactions.removeFirst();","else","break;","mergeTransaction(actions, 0, actions.length, commitTimestamp);","finaliseRows(session, actions, 0, actions.length);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/mergeExpiredTransactions(org.hsqldb.Session)|,["synchronized (committedTransactionTimestamps)","if (committedTransactionTimestamps.isEmpty())","break;","commitTimestamp = committedTransactionTimestamps.getFirst();","if (commitTimestamp \< timestamp)","committedTransactionTimestamps.removeFirst();","actions = (Object[]) committedTransactions.removeFirst();","else","break;","mergeTransaction(actions, 0, actions.length, commitTimestamp);","finaliseRows(session, actions, 0, actions.length);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/beginTransaction(org.hsqldb.Session)|,["public void beginTransaction(Session session)","writeLock.lock();","try","if (!session.isTransaction)","session.actionTimestamp      = getNextGlobalChangeTimestamp();","session.transactionTimestamp = session.actionTimestamp;","session.isTransaction        = true;","\n\t.....\n","session.transactionTimestamp = session.actionTimestamp;","session.isTransaction        = true;","liveTransactionTimestamps.addLast(","session.transactionTimestamp);","transactionCount++;","finally","writeLock.unlock();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/TransactionManagerMV2PL/beginTransaction(org.hsqldb.Session)|,["public void beginTransaction(Session session)","writeLock.lock();","try","if (!session.isTransaction)","session.actionTimestamp      = getNextGlobalChangeTimestamp();","session.transactionTimestamp = session.actionTimestamp;","session.isTransaction        = true;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/TransactionManagerMV2PL/beginActionResume(org.hsqldb.Session)|,["session.transactionTimestamp = session.actionTimestamp;","session.isTransaction        = true;","liveTransactionTimestamps.addLast(","session.transactionTimestamp);","transactionCount++;","finally","writeLock.unlock();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/beginAction(org.hsqldb.Session,org.hsqldb.Statement)|,["return;","writeLock.lock();","try","if (cs.getCompileTimestamp()","\< database.schemaManager.getSchemaChangeTimestamp())","cs = session.statementManager.getStatement(session, cs);","session.sessionContext.currentStatement = cs;","if (cs == null)","return;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/TransactionManager2PL/beginAction(org.hsqldb.Session,org.hsqldb.Statement)|,["return;","writeLock.lock();","try","if (cs.getCompileTimestamp()","\< database.schemaManager.getSchemaChangeTimestamp())","cs = session.statementManager.getStatement(session, cs);","session.sessionContext.currentStatement = cs;","if (cs == null)","return;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/TransactionManagerMV2PL/beginAction(org.hsqldb.Session,org.hsqldb.Statement)|,["return;","writeLock.lock();","try","if (cs.getCompileTimestamp()","\< database.schemaManager.getSchemaChangeTimestamp())","cs = session.statementManager.getStatement(session, cs);","session.sessionContext.currentStatement = cs;","if (cs == null)","return;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/TransactionManagerMVCC/addDeleteActionToRow(org.hsqldb.Session,org.hsqldb.Table,org.hsqldb.persist.PersistentStore,org.hsqldb.Row,int%5B%5D)|,["break;","case TableBase.TEMP_TABLE :","action = RowAction.addDeleteAction(session, table, row,","colMap);","store.delete(session, row);","row.rowAction = null;","break;","case TableBase.MEMORY_TABLE :","default :","action = RowAction.addDeleteAction(session, table, row,","colMap);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/addDeleteAction(org.hsqldb.Session,org.hsqldb.Table,org.hsqldb.persist.PersistentStore,org.hsqldb.Row,int%5B%5D)|,["break;","case TableBase.TEMP_TABLE :","action = RowAction.addDeleteAction(session, table, row,","colMap);","store.delete(session, row);","row.rowAction = null;","break;","case TableBase.MEMORY_TABLE :","default :","action = RowAction.addDeleteAction(session, table, row,","colMap);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RAShadowFile/InputStreamShadow/read(byte%5B%5D,int,int)|,["if (fetchedSize == limitSize)","return -1;","if (limitSize \>= 0 && limitSize - fetchedSize \< length)","length = (int) (limitSize - fetchedSize);","int count = is.read(bytes, offset, length);","if (count \< 0)","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/InputStreamWrapper/read(byte%5B%5D,int,int)|,["if (fetchedSize == limitSize)","return -1;","if (limitSize \>= 0 && limitSize - fetchedSize \< length)","length = (int) (limitSize - fetchedSize);","int count = is.read(bytes, offset, length);","if (count \< 0)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/LongKeyHashMap/get(long)|,["int lookup = getLookup(key);","if (lookup != -1)","return objectValueTable[lookup];","return null;","finally","readLock.unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/IntKeyHashMapConcurrent/get(int)|,["int lookup = getLookup(key);","if (lookup != -1)","return objectValueTable[lookup];","return null;","finally","readLock.unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/TransferTable/transferStructure()|,["catch (Exception e)","try","if (!destDb.getAutoCommit())","destDb.rollback();","catch (Exception e1)","throw (e);","if (!destDb.getAutoCommit())","destDb.commit();","try","destDb.setAutoCommit(true);","catch (Exception e)","\n\t.....\n","String Statement = new String(\"\");","if (destDb.helper.needTransferTransaction())","try","destDb.setAutoCommit(false);","catch (Exception e)","if (Stmts.bTransfer == false)","tracer.trace(\"Table \" + Stmts.sSourceTable + \" not transfered\");","return;","\n\t.....\n","nextsemicolon);","while (Statement.charAt(Statement.length() - 1) == \';\')","Statement = Statement.substring(0, Statement.length()","- 1);","try","tracer.trace(\"Executing \" + Statement);","destDb.execute(Statement);","catch (Exception e)","tracer.trace(\"Ignoring error \" + e.getMessage());","lastsemicolon = nextsemicolon + 1;","nextsemicolon = lastsemicolon","\n\t.....\n","lastsemicolon).indexOf(\';\');","catch (Exception e)","try","if (!destDb.getAutoCommit())","destDb.rollback();","catch (Exception e1)","throw (e);","if (!destDb.getAutoCommit())","destDb.commit();","try","destDb.setAutoCommit(true);","catch (Exception e)","\n\t.....\n"],[
    <|java+method:///org/hsqldb/util/TransferTable/transferData(int)|,["catch (Exception e)","try","if (!destDb.getAutoCommit())","destDb.rollback();","catch (Exception e1)","throw (e);","if (!destDb.getAutoCommit())","destDb.commit();","try","destDb.setAutoCommit(true);","catch (Exception e)","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/util/TransferTable/transferAlter()|,["String Statement = new String(\"\");","if (destDb.helper.needTransferTransaction())","try","destDb.setAutoCommit(false);","catch (Exception e)","if (Stmts.bTransfer == false)","tracer.trace(\"Table \" + Stmts.sSourceTable + \" not transfered\");","return;","\n\t.....\n","nextsemicolon);","while (Statement.charAt(Statement.length() - 1) == \';\')","Statement = Statement.substring(0, Statement.length()","- 1);","try","tracer.trace(\"Executing \" + Statement);","destDb.execute(Statement);","catch (Exception e)","tracer.trace(\"Ignoring error \" + e.getMessage());","lastsemicolon = nextsemicolon + 1;","nextsemicolon = lastsemicolon","\n\t.....\n","nextsemicolon);","while (Statement.charAt(Statement.length() - 1) == \';\')","Statement = Statement.substring(0, Statement.length()","- 1);","try","tracer.trace(\"Executing \" + Statement);","destDb.execute(Statement);","catch (Exception e)","tracer.trace(\"Ignoring error \" + e.getMessage());","lastsemicolon = nextsemicolon + 1;","nextsemicolon = lastsemicolon","\n\t.....\n","nextsemicolon);","while (Statement.charAt(Statement.length() - 1) == \';\')","Statement = Statement.substring(0, Statement.length()","- 1);","try","tracer.trace(\"Executing \" + Statement);","destDb.execute(Statement);","catch (Exception e)","tracer.trace(\"Ignoring error \" + e.getMessage());","lastsemicolon = nextsemicolon + 1;","nextsemicolon = lastsemicolon","\n\t.....\n","lastsemicolon).indexOf(\';\');","catch (Exception e)","try","if (!destDb.getAutoCommit())","destDb.rollback();","catch (Exception e1)","throw (e);","if (!destDb.getAutoCommit())","destDb.commit();","try","destDb.setAutoCommit(true);","catch (Exception e)","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/persist/RAFileNIO/length()|,["catch (Throwable e)","database.logger.logWarningEvent(JVM_ERROR, e);","IOException io = new IOException(e.toString());","try","io.initCause(e);","catch (Throwable e1)","throw io;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/persist/RAFileNIO/getFilePointer()|,["catch (Throwable e)","database.logger.logWarningEvent(JVM_ERROR, e);","IOException io = new IOException(e.toString());","try","io.initCause(e);","catch (Throwable e1)","throw io;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/persist/RAFileNIO/read()|,["catch (Throwable e)","database.logger.logWarningEvent(JVM_ERROR, e);","IOException io = new IOException(e.toString());","try","io.initCause(e);","catch (Throwable e1)","throw io;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/persist/RAFileNIO/read(byte%5B%5D,int,int)|,["positionBufferMove((int) transferLength);","length -= transferLength;","offset += transferLength;","if (length == 0)","break;","catch (Throwable t)","database.logger.logWarningEvent(JVM_ERROR, t);","IOException io = JavaSystem.toIOException(t);","throw io;","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RAFileNIO/write(byte%5B%5D,int,int)|,["positionBufferMove((int) transferLength);","length -= transferLength;","offset += transferLength;","if (length == 0)","break;","catch (Throwable t)","database.logger.logWarningEvent(JVM_ERROR, t);","IOException io = JavaSystem.toIOException(t);","throw io;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/KMPSearchAlgorithm/search(java.io.InputStream,byte%5B%5D,int%5B%5D)|,["patternIndex++;","else if (patternIndex \> 0)","patternIndex = table[patternIndex];","patternIndex++;","if (patternIndex == patternLength)","return streamIndex - (patternLength - 1);","return -1;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/KMPSearchAlgorithm/search(java.io.Reader,char%5B%5D,int%5B%5D)|,["patternIndex++;","else if (patternIndex \> 0)","patternIndex = table[patternIndex];","patternIndex++;","if (patternIndex == patternLength)","return streamIndex - (patternLength - 1);","return -1;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/KMPSearchAlgorithm/search(byte%5B%5D,byte%5B%5D,int%5B%5D,int)|,["return sourceIndex;","return -1;","int matchStart   = start;","int patternIndex = 0;","if (table == null)","table = computeTable(pattern);","while ((sourceIndex \< sourceLength)","&& (patternIndex \< patternLength))","if (source[sourceIndex] == pattern[patternIndex])","patternIndex++;","else","\n\t.....\n","patternIndex++;","sourceIndex = (matchStart + patternIndex);","if (patternIndex == patternLength)","return matchStart;","else","return -1;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/KMPSearchAlgorithm/search(char%5B%5D,char%5B%5D,int%5B%5D,int)|,["return sourceIndex;","return -1;","int matchStart   = start;","int patternIndex = 0;","if (table == null)","table = computeTable(pattern);","while ((sourceIndex \< sourceLength)","&& (patternIndex \< patternLength))","if (source[sourceIndex] == pattern[patternIndex])","patternIndex++;","else","\n\t.....\n","patternIndex++;","sourceIndex = (matchStart + patternIndex);","if (patternIndex == patternLength)","return matchStart;","else","return -1;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/KMPSearchAlgorithm/computeTable(byte%5B%5D)|,["table[0] = -1;","table[1] = 0;","while (i \< pattern.length)","if (pattern[i - 1] == pattern[j])","table[i] = j + 1;","j++;","i++;","else if (j \> 0)","j = table[j];","else","table[i] = 0;","i++;","j = 0;","return table;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/lib/KMPSearchAlgorithm/computeTable(char%5B%5D)|,["table[0] = -1;","table[1] = 0;","while (i \< pattern.length)","if (pattern[i - 1] == pattern[j])","table[i] = j + 1;","j++;","i++;","else if (j \> 0)","j = table[j];","else","table[i] = 0;","i++;","j = 0;","return table;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/KMPSearchAlgorithm/computeTable(java.lang.String)|,["table[i] = j + 1;","j++;","i++;","else if (j \> 0)","j = table[j];","else","table[i] = 0;","i++;","j = 0;","return table;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/util/ConnectionDialogSwing/create()|,["if (d.width \>= 640)","setLocation((d.width - size.width) / 2,","(d.height - size.height) / 2);","else","setLocation(0, 0);","setSize(d);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/ConnectionDialog/create()|,["if (d.width \>= 640)","setLocation((d.width - size.width) / 2,","(d.height - size.height) / 2);","else","setLocation(0, 0);","setSize(d);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/ConnectionDialogSwing/actionPerformed(java.awt.event.ActionEvent)|,["if (setting != null)","mName.setText(setting.getName());","mDriver.setText(setting.getDriver());","mURL.setText(setting.getUrl());","mUser.setText(setting.getUser());","mPassword.setText(setting.getPassword());","\n\t.....\n"],[
    <|java+method:///org/hsqldb/util/ConnectionDialog/create()/$anonymous1/itemStateChanged(java.awt.event.ItemEvent)|,["if (setting != null)","mName.setText(setting.getName());","mDriver.setText(setting.getDriver());","mURL.setText(setting.getUrl());","mUser.setText(setting.getUser());","mPassword.setText(setting.getPassword());","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/util/ConnectionDialog/create()|,["if (setting != null)","mName.setText(setting.getName());","mDriver.setText(setting.getDriver());","mURL.setText(setting.getUrl());","mUser.setText(setting.getUser());","mPassword.setText(setting.getPassword());","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/util/ConnectionDialogSwing/itemStateChanged(java.awt.event.ItemEvent)|,["public void itemStateChanged(ItemEvent e)","String s = (String) e.getItem();","for (int i = 0; i \< connTypes.length; i++)","if (s.equals(connTypes[i][0]))","mDriver.setText(connTypes[i][1]);","mURL.setText(connTypes[i][2]);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/ConnectionDialog/itemStateChanged(java.awt.event.ItemEvent)|,["public void itemStateChanged(ItemEvent e)","String s = (String) e.getItem();","for (int i = 0; i \< connTypes.length; i++)","if (s.equals(connTypes[i][0]))","mDriver.setText(connTypes[i][1]);","mURL.setText(connTypes[i][2]);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Routine/getMethod(java.lang.String,org.hsqldb.Routine,boolean%5B%5D,boolean)|,["if (param.isArray())","if (!byte[].class.equals(param))","param = param.getComponentType();","if (param.isPrimitive())","method = null;","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/Routine/getMethods(java.lang.String)|,["if (param.isArray())","if (!byte[].class.equals(param))","param = param.getComponentType();","if (param.isPrimitive())","method = null;","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/IndexAVLMemory/checkIndex(org.hsqldb.persist.PersistentStore)|,["public void checkIndex(PersistentStore store)","readLock.lock();","try","NodeAVL p = getAccessor(store);","NodeAVL f = null;","while (p != null)","f = p;","checkNodes(store, p);","\n\t.....\n","p = f;","while (f != null)","checkNodes(store, f);","f = next(store, f);","finally","readLock.unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/index/IndexAVL/checkIndex(org.hsqldb.persist.PersistentStore)|,["public void checkIndex(PersistentStore store)","readLock.lock();","try","NodeAVL p = getAccessor(store);","NodeAVL f = null;","while (p != null)","f = p;","checkNodes(store, p);","\n\t.....\n","p = f;","while (f != null)","checkNodes(store, f);","f = next(store, f);","finally","readLock.unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/IndexAVLMemory/checkNodes(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["if (l != null && l.getBalance(store) == -2)","System.out.print(\"broken index - deleted\");","if (r != null && r.getBalance(store) == -2)","System.out.print(\"broken index -deleted\");","if (l != null && !p.equals(l.getParent(store)))","System.out.print(\"broken index - no parent\");","if (r != null && !p.equals(r.getParent(store)))","System.out.print(\"broken index - no parent\");","\n\t.....\n"],[<|java+method:///org/hsqldb/index/IndexAVL/checkNodes(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["if (l != null && l.getBalance(store) == -2)","System.out.print(\"broken index - deleted\");","if (r != null && r.getBalance(store) == -2)","System.out.print(\"broken index -deleted\");","if (l != null && !p.equals(l.getParent(store)))","System.out.print(\"broken index - no parent\");","if (r != null && !p.equals(r.getParent(store)))","System.out.print(\"broken index - no parent\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/IndexAVLMemory/insert(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,org.hsqldb.Row)|,["n = getAccessor(store);","x = n;","if (n == null)","store.setAccessor(this, ((RowAVL) row).getNode(position));","return;","while (true)","\n\t.....\n","currentRow,","compareRowId, 0);","if (compare == 0 && session != null && !compareRowId","&& session.database.txManager.isMVRows())","if (!isEqualReadable(session, store, n))","compareRowId = true;","compare = compareRowForInsertOrDelete(session, row,","currentRow,","compareRowId,","colIndex.length);","if (compare == 0)","\n\t.....\n"],[<|java+method:///org/hsqldb/index/IndexAVL/insert(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,org.hsqldb.Row)|,["n = getAccessor(store);","x = n;","if (n == null)","store.setAccessor(this, ((RowAVL) row).getNode(position));","return;","while (true)","\n\t.....\n","currentRow,","compareRowId, 0);","if (compare == 0 && session != null && !compareRowId","&& session.database.txManager.isMVRows())","if (!isEqualReadable(session, store, n))","compareRowId = true;","compare = compareRowForInsertOrDelete(session, row,","currentRow,","compareRowId,","colIndex.length);","if (compare == 0)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/SYSTEM_BESTROWIDENTIFIER(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (translateTTI)","if (type.isIntervalType())","type = ((IntervalType) type).getCharacterType();","else if (type.isDateTimeTypeWithZone())","type = ((DateTimeType) type)",".getDateTimeTypeWithoutZone();","\n\t.....\n","addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);","addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);","addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null","addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null","\n\t.....\n"],[
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/SYSTEM_COLUMNS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (translateTTI)","if (type.isIntervalType())","type = ((IntervalType) type).getCharacterType();","else if (type.isDateTimeTypeWithZone())","type = ((DateTimeType) type)",".getDateTimeTypeWithoutZone();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/SYSTEM_PROCEDURECOLUMNS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["if (translateTTI)","if (type.isIntervalType())","type = ((IntervalType) type).getCharacterType();","else if (type.isDateTimeTypeWithZone())","type = ((DateTimeType) type)",".getDateTimeTypeWithoutZone();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/SYSTEM_VERSIONCOLUMNS(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);","addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);","addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null","addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);","addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/COLUMN_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,[", false);","return t;","String  tableCatalog;","String  tableSchema;","String  tableName;","Grantee granteeObject;","\n\t.....\n","Iterator tables;","Table    table;","Object[] row;","final int grantor        = 0;","final int grantee        = 1;","final int table_catalog  = 2;","final int table_schema   = 3;","final int table_name     = 4;","\n\t.....\n","OrderedHashSet grantees =","session.getGrantee().getGranteeAndAllRolesWithPublic();","tables = allTables();","while (tables.hasNext())","table        = (Table) tables.next();","tableName    = table.getName().name;","\n\t.....\n","tableSchema  = table.getSchemaName().name;","for (int i = 0; i \< grantees.size(); i++)","granteeObject = (Grantee) grantees.get(i);","OrderedHashSet rights =","granteeObject.getAllDirectPrivileges(table);","OrderedHashSet grants =","granteeObject.getAllGrantedPrivileges(table);","for (int k = 0; k \< Right.privilegeTypes.length; k++)","\n\t.....\n","row                 = t.getEmptyRowData();","row[grantor] = right.getGrantor().getName().name;","row[grantee] = right.getGrantee().getName().name;","row[table_catalog]  = tableCatalog;","row[table_schema]   = tableSchema;","row[table_name]     = tableName;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/TABLE_PRIVILEGES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,[", false);","return t;","String  tableCatalog;","String  tableSchema;","String  tableName;","Grantee granteeObject;","\n\t.....\n","Iterator tables;","Table    table;","Object[] row;","final int grantor        = 0;","final int grantee        = 1;","final int table_catalog  = 2;","final int table_schema   = 3;","final int table_name     = 4;","\n\t.....\n","OrderedHashSet grantees =","session.getGrantee().getGranteeAndAllRolesWithPublic();","tables = allTables();","while (tables.hasNext())","table        = (Table) tables.next();","tableName    = table.getName().name;","\n\t.....\n","tableSchema  = table.getSchemaName().name;","for (int i = 0; i \< grantees.size(); i++)","granteeObject = (Grantee) grantees.get(i);","OrderedHashSet rights =","granteeObject.getAllDirectPrivileges(table);","OrderedHashSet grants =","granteeObject.getAllGrantedPrivileges(table);","for (int k = 0; k \< Right.privilegeTypes.length; k++)","\n\t.....\n","row                 = t.getEmptyRowData();","row[grantor] = right.getGrantor().getName().name;","row[grantee] = right.getGrantee().getName().name;","row[table_catalog]  = tableCatalog;","row[table_schema]   = tableSchema;","row[table_name]     = tableName;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/SEQUENCES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);","addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);","addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);","addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);","addColumn(t, \"INCREMENT\", CHARACTER_DATA);","addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);","addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);","addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"START_WITH\", CHARACTER_DATA);","addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n","t.createPrimaryKeyConstraint(name, new int[]","0, 1, 2",", false);","return t;","final int sequence_catalog           = 0;","final int sequence_schema            = 1;","final int sequence_name              = 2;","final int data_type                  = 3;","final int numeric_precision          = 4;","final int numeric_precision_radix    = 5;","final int numeric_scale              = 6;","final int maximum_value              = 7;","final int minimum_value              = 8;","final int increment                  = 9;","final int cycle_option               = 10;","final int declared_data_type         = 11;","final int declared_numeric_precision = 12;","final int declared_numeric_scale     = 13;","final int start_with                 = 14;","final int next_value                 = 15;","Iterator       it;","Object[]       row;","NumberSequence sequence;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.SEQUENCE);","while (it.hasNext())","sequence = (NumberSequence) it.next();","if (!session.getGrantee().isAccessible(sequence))","continue;","row = t.getEmptyRowData();","NumberType type = (NumberType) sequence.getDataType();","int radix =","(type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types",".SQL_DECIMAL) ? 10",": 2;","row[sequence_catalog] = database.getCatalogName().name;","row[sequence_schema]  = sequence.getSchemaName().name;","row[sequence_name]    = sequence.getName().name;","row[data_type]        = sequence.getDataType().getFullNameString();","row[numeric_precision] =","ValuePool.getInt((int) type.getPrecision());","row[numeric_precision_radix]    = ValuePool.getInt(radix);","row[numeric_scale]              = ValuePool.INTEGER_0;","row[maximum_value] = String.valueOf(sequence.getMaxValue());","row[minimum_value] = String.valueOf(sequence.getMinValue());","row[increment] = String.valueOf(sequence.getIncrement());","row[cycle_option]               = sequence.isCycle() ? \"YES\"",": \"NO\";","row[declared_data_type]         = row[data_type];","row[declared_numeric_precision] = row[numeric_precision];","row[declared_numeric_scale]     = row[declared_numeric_scale];","row[start_with] = String.valueOf(sequence.getStartValue());","row[next_value]                 = String.valueOf(sequence.peek());","t.insertSys(session, store, row);","return t;","\n\t.....\n"],[<|java+method:///org/hsqldb/dbinfo/DatabaseInformationMain/SYSTEM_SEQUENCES(org.hsqldb.Session,org.hsqldb.persist.PersistentStore)|,["addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);","addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);","addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);","addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);","addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);","addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);","addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);","addColumn(t, \"INCREMENT\", CHARACTER_DATA);","addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);","addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);","addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);","addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);","addColumn(t, \"START_WITH\", CHARACTER_DATA);","addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);","HsqlName name = HsqlNameManager.newInfoSchemaObjectName(","\n\t.....\n","t.createPrimaryKeyConstraint(name, new int[]","0, 1, 2",", false);","return t;","final int sequence_catalog           = 0;","final int sequence_schema            = 1;","final int sequence_name              = 2;","final int data_type                  = 3;","final int numeric_precision          = 4;","final int numeric_precision_radix    = 5;","final int numeric_scale              = 6;","final int maximum_value              = 7;","final int minimum_value              = 8;","final int increment                  = 9;","final int cycle_option               = 10;","final int declared_data_type         = 11;","final int declared_numeric_precision = 12;","final int declared_numeric_scale     = 13;","final int start_with                 = 14;","final int next_value                 = 15;","Iterator       it;","Object[]       row;","NumberSequence sequence;","it = database.schemaManager.databaseObjectIterator(","SchemaObject.SEQUENCE);","while (it.hasNext())","sequence = (NumberSequence) it.next();","if (!session.getGrantee().isAccessible(sequence))","continue;","row = t.getEmptyRowData();","NumberType type = (NumberType) sequence.getDataType();","int radix =","(type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types",".SQL_DECIMAL) ? 10",": 2;","row[sequence_catalog] = database.getCatalogName().name;","row[sequence_schema]  = sequence.getSchemaName().name;","row[sequence_name]    = sequence.getName().name;","row[data_type]        = sequence.getDataType().getFullNameString();","row[numeric_precision] =","ValuePool.getInt((int) type.getPrecision());","row[numeric_precision_radix]    = ValuePool.getInt(radix);","row[numeric_scale]              = ValuePool.INTEGER_0;","row[maximum_value] = String.valueOf(sequence.getMaxValue());","row[minimum_value] = String.valueOf(sequence.getMinValue());","row[increment] = String.valueOf(sequence.getIncrement());","row[cycle_option]               = sequence.isCycle() ? \"YES\"",": \"NO\";","row[declared_data_type]         = row[data_type];","row[declared_numeric_precision] = row[numeric_precision];","row[declared_numeric_scale]     = row[declared_numeric_scale];","row[start_with] = String.valueOf(sequence.getStartValue());","row[next_value]                 = String.valueOf(sequence.peek());","t.insertSys(session, store, row);","return t;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/RowType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["Object[] arra   = (Object[]) a;","Object[] arrb   = (Object[]) b;","int      length = arra.length;","if (arrb.length \< length)","length = arrb.length;","for (int i = 0; i \< length; i++)","\n\t.....\n","if (result != 0)","return result;","if (arra.length \> arrb.length)","return 1;","else if (arra.length \< arrb.length)","return -1;","return 0;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/ArrayType/compare(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["Object[] arra   = (Object[]) a;","Object[] arrb   = (Object[]) b;","int      length = arra.length;","if (arrb.length \< length)","length = arrb.length;","for (int i = 0; i \< length; i++)","\n\t.....\n","if (result != 0)","return result;","if (arra.length \> arrb.length)","return 1;","else if (arra.length \< arrb.length)","return -1;","return 0;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/RowType/convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)|,["public Object convertToType(SessionInterface session, Object a,","Type otherType)","if (a == null)","return null;","if (otherType == null)","return a;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/ArrayType/convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)|,["public Object convertToType(SessionInterface session, Object a,","Type otherType)","if (a == null)","return null;","if (otherType == null)","return a;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/RowType/canConvertFrom(org.hsqldb.types.Type)|,["if (otherType == null)","return true;","if (!otherType.isRowType())","return false;","Type[] otherTypes = ((RowType) otherType).getTypesArray();","if (dataTypes.length != otherTypes.length)","return false;","for (int i = 0; i \< dataTypes.length; i++)","\n\t.....\n"],[<|java+method:///org/hsqldb/types/RowType/canBeAssignedFrom(org.hsqldb.types.Type)|,["if (otherType == null)","return true;","if (!otherType.isRowType())","return false;","Type[] otherTypes = ((RowType) otherType).getTypesArray();","if (dataTypes.length != otherTypes.length)","return false;","for (int i = 0; i \< dataTypes.length; i++)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/RowType/getAggregateType(org.hsqldb.types.Type)|,["return this;","if (!other.isRowType())","throw Error.error(ErrorCode.X_42562);","Type[] newTypes   = new Type[dataTypes.length];","Type[] otherTypes = ((RowType) other).getTypesArray();","if (dataTypes.length != otherTypes.length)","throw Error.error(ErrorCode.X_42564);","for (int i = 0; i \< dataTypes.length; i++)","newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);","return new RowType(newTypes);","\n\t.....\n"],[<|java+method:///org/hsqldb/types/RowType/getCombinedType(org.hsqldb.Session,org.hsqldb.types.Type,int)|,["return this;","if (!other.isRowType())","throw Error.error(ErrorCode.X_42562);","Type[] newTypes   = new Type[dataTypes.length];","Type[] otherTypes = ((RowType) other).getTypesArray();","if (dataTypes.length != otherTypes.length)","throw Error.error(ErrorCode.X_42564);","for (int i = 0; i \< dataTypes.length; i++)","newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);","return new RowType(newTypes);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/readTargetSpecificationList(org.hsqldb.lib.OrderedHashSet,org.hsqldb.RangeVariable%5B%5D,org.hsqldb.lib.LongDeque)|,["while (true)","Expression target = XreadTargetSpecification(rangeVars,","colIndexList);","if (!targets.add(target))","ColumnSchema col = target.getColumn();","throw Error.error(ErrorCode.X_42579, col.getName().name);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDML/readGetClauseList(org.hsqldb.RangeVariable%5B%5D,org.hsqldb.lib.OrderedHashSet,org.hsqldb.lib.LongDeque,org.hsqldb.lib.HsqlArrayList)|,["while (true)","Expression target = XreadTargetSpecification(rangeVars,","colIndexList);","if (!targets.add(target))","ColumnSchema col = target.getColumn();","throw Error.error(ErrorCode.X_42579, col.getName().name);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadUnsignedValueSpecificationOrNull()|,["case Tokens.COLON :","read();","if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER","|| token.tokenType == Tokens.X_IDENTIFIER)","else","throw unexpectedToken(Tokens.T_COLON);","case Tokens.QUESTION :","ExpressionColumn p =","new ExpressionColumn(OpTypes.DYNAMIC_PARAM);","compileContext.addParameter(p, getPosition());","read();","return p;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/XreadSimpleValueSpecificationOrNull()|,["case Tokens.COLON :","read();","if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER","|| token.tokenType == Tokens.X_IDENTIFIER)","else","throw unexpectedToken(Tokens.T_COLON);","case Tokens.QUESTION :","ExpressionColumn p =","new ExpressionColumn(OpTypes.DYNAMIC_PARAM);","compileContext.addParameter(p, getPosition());","read();","return p;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadSimpleValueExpressionPrimary()|,["read();","readThis(Tokens.OPENBRACKET);","String  spec    = readQuotedString();","Scanner scanner = session.getScanner();","scanner.reset(spec);","scanner.scanNext();","\n\t.....\n","readThis(Tokens.CLOSEBRACKET);","catch (HsqlException ex)","ex.setLevel(compileContext.subqueryDepth);","if (lastError == null","|| lastError.getLevel() \< ex.getLevel())","lastError = ex;","rewind(position);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserDQL/readNextvalFunction()|,["read();","readThis(Tokens.OPENBRACKET);","String  spec    = readQuotedString();","Scanner scanner = session.getScanner();","scanner.reset(spec);","scanner.scanNext();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDQL/XreadBooleanPrimaryOrNull()|,["readThis(Tokens.CLOSEBRACKET);","catch (HsqlException ex)","ex.setLevel(compileContext.subqueryDepth);","if (lastError == null","|| lastError.getLevel() \< ex.getLevel())","lastError = ex;","rewind(position);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDQL/readExpression(org.hsqldb.lib.HsqlArrayList,short%5B%5D,int,int,boolean)|,["catch (HsqlException ex)","ex.setLevel(compileContext.subqueryDepth);","if (lastError == null","|| lastError.getLevel() \< ex.getLevel())","lastError = ex;","rewind(position);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadAllTypesPrimary(boolean)|,["case Tokens.EXTRACT :","case Tokens.CHAR_LENGTH :","case Tokens.CHARACTER_LENGTH :","case Tokens.OCTET_LENGTH :","case Tokens.CARDINALITY :","case Tokens.ABS :","case Tokens.MOD :","case Tokens.LN :","case Tokens.EXP :","case Tokens.POWER :","case Tokens.SQRT :","case Tokens.FLOOR :","case Tokens.CEILING :","case Tokens.CEIL :","case Tokens.WIDTH_BUCKET :","FunctionSQL function =","FunctionSQL.newSQLFunction(token.tokenString,","compileContext);","if (function == null)","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/XreadNumericPrimary()|,["case Tokens.EXTRACT :","case Tokens.CHAR_LENGTH :","case Tokens.CHARACTER_LENGTH :","case Tokens.OCTET_LENGTH :","case Tokens.CARDINALITY :","case Tokens.ABS :","case Tokens.MOD :","case Tokens.LN :","case Tokens.EXP :","case Tokens.POWER :","case Tokens.SQRT :","case Tokens.FLOOR :","case Tokens.CEILING :","case Tokens.CEIL :","case Tokens.WIDTH_BUCKET :","FunctionSQL function =","FunctionSQL.newSQLFunction(token.tokenString,","compileContext);","if (function == null)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadValueExpression()|,["if (token.tokenType == Tokens.LEFTBRACKET)","read();","Expression e1 = XreadNumericValueExpression();","readThis(Tokens.RIGHTBRACKET);","e = new ExpressionAccessor(e, e1);","return e;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/XreadArrayElementReference(org.hsqldb.Expression)|,["if (token.tokenType == Tokens.LEFTBRACKET)","read();","Expression e1 = XreadNumericValueExpression();","readThis(Tokens.RIGHTBRACKET);","e = new ExpressionAccessor(e, e1);","return e;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadAllTypesFactor(boolean)|,["else if (token.tokenType == Tokens.UNKNOWN)","read();","unknown = true;","else","throw unexpectedToken();","if (unknown)","e = new ExpressionLogical(OpTypes.IS_NULL, e);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/XreadBooleanTestOrNull()|,["else if (token.tokenType == Tokens.UNKNOWN)","read();","unknown = true;","else","throw unexpectedToken();","if (unknown)","e = new ExpressionLogical(OpTypes.IS_NULL, e);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadNumericValueExpression()|,["while (true)","int type;","if (token.tokenType == Tokens.PLUS)","type = OpTypes.ADD;","else if (token.tokenType == Tokens.MINUS)","type = OpTypes.SUBTRACT;","else","break;","read();","Expression a = e;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserDQL/XreadDatetimeValueExpression()|,["while (true)","int type;","if (token.tokenType == Tokens.PLUS)","type = OpTypes.ADD;","else if (token.tokenType == Tokens.MINUS)","type = OpTypes.SUBTRACT;","else","break;","read();","Expression a = e;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserDQL/XreadIntervalValueExpression()|,["while (true)","int type;","if (token.tokenType == Tokens.PLUS)","type = OpTypes.ADD;","else if (token.tokenType == Tokens.MINUS)","type = OpTypes.SUBTRACT;","else","break;","read();","Expression a = e;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadDateTimeIntervalTerm()|,["switch (token.tokenType)","case Tokens.CURRENT_DATE :","case Tokens.CURRENT_TIME :","case Tokens.CURRENT_TIMESTAMP :","case Tokens.LOCALTIME :","case Tokens.LOCALTIMESTAMP :","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/XreadDateTimeValueFunctionOrNull()|,["switch (token.tokenType)","case Tokens.CURRENT_DATE :","case Tokens.CURRENT_TIME :","case Tokens.CURRENT_TIMESTAMP :","case Tokens.LOCALTIME :","case Tokens.LOCALTIMESTAMP :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/XreadQuantifiedComparisonRightPart(int,org.hsqldb.Expression)|,["case Tokens.TABLE :","case Tokens.VALUES :","case Tokens.SELECT :","rewind(position);","TableDerived td = XreadSubqueryTableBody(OpTypes.IN);","e = new Expression(OpTypes.TABLE_SUBQUERY, td);","readThis(Tokens.CLOSEBRACKET);","break;","default :","rewind(position);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/XreadInPredicateRightPart(org.hsqldb.Expression)|,["case Tokens.TABLE :","case Tokens.VALUES :","case Tokens.SELECT :","rewind(position);","TableDerived td = XreadSubqueryTableBody(OpTypes.IN);","e = new Expression(OpTypes.TABLE_SUBQUERY, td);","readThis(Tokens.CLOSEBRACKET);","break;","default :","rewind(position);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/readColumnOrFunctionExpression()|,["HsqlArrayList list = new HsqlArrayList();","readThis(Tokens.OPENBRACKET);","if (token.tokenType == Tokens.CLOSEBRACKET)","read();","else","while (true)","Expression e = XreadValueExpression();","list.add(e);","if (token.tokenType == Tokens.COMMA)","read();","else","readThis(Tokens.CLOSEBRACKET);","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDML/compileCallStatement(org.hsqldb.RangeGroup%5B%5D,boolean)|,["HsqlArrayList list = new HsqlArrayList();","readThis(Tokens.OPENBRACKET);","if (token.tokenType == Tokens.CLOSEBRACKET)","read();","else","while (true)","Expression e = XreadValueExpression();","list.add(e);","if (token.tokenType == Tokens.COMMA)","read();","else","readThis(Tokens.CLOSEBRACKET);","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/readConcatExpressionOrNull()|,["if (token.tokenType == Tokens.COMMA)","readThis(Tokens.COMMA);","else if (token.tokenType == Tokens.CLOSEBRACKET)","readThis(Tokens.CLOSEBRACKET);","break;","while (true);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/readConcatSeparatorExpressionOrNull()|,["if (token.tokenType == Tokens.COMMA)","readThis(Tokens.COMMA);","else if (token.tokenType == Tokens.CLOSEBRACKET)","readThis(Tokens.CLOSEBRACKET);","break;","while (true);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/readLeastExpressionOrNull()|,["int position = getPosition();","read();","if (!readIfThis(Tokens.OPENBRACKET))","rewind(position);","return null;","Expression casewhen = null;","do","\n\t.....\n","if (token.tokenType == Tokens.COMMA)","readThis(Tokens.COMMA);","else","break;","while (true);","readThis(Tokens.CLOSEBRACKET);","return casewhen;","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/readGreatestExpressionOrNull()|,["int position = getPosition();","read();","if (!readIfThis(Tokens.OPENBRACKET))","rewind(position);","return null;","Expression casewhen = null;","do","\n\t.....\n","if (token.tokenType == Tokens.COMMA)","readThis(Tokens.COMMA);","else","break;","while (true);","readThis(Tokens.CLOSEBRACKET);","return casewhen;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ParserDQL/readIfNullExpressionOrNull()|,["int position = getPosition();","read();","if (!readIfThis(Tokens.OPENBRACKET))","rewind(position);","return null;","Expression c = XreadValueExpression();","readThis(Tokens.COMMA);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDQL/readIfNull2ExpressionOrNull()|,["int position = getPosition();","read();","if (!readIfThis(Tokens.OPENBRACKET))","rewind(position);","return null;","Expression c = XreadValueExpression();","readThis(Tokens.COMMA);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SessionData/setResultSetProperties(org.hsqldb.result.Result,org.hsqldb.result.Result)|,["int required = command.rsProperties;","int returned = result.rsProperties;","if (required != returned)","if (ResultProperties.isReadOnly(required))","returned = ResultProperties.addHoldable(returned,","ResultProperties.isHoldable(required));","else","\n\t.....\n"],[<|java+method:///org/hsqldb/SessionData/getDataResultHead(org.hsqldb.result.Result,org.hsqldb.result.Result,boolean)|,["int required = command.rsProperties;","int returned = result.rsProperties;","if (required != returned)","if (ResultProperties.isReadOnly(required))","returned = ResultProperties.addHoldable(returned,","ResultProperties.isHoldable(required));","else","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Expression/getSQL()|,["public String getSQL()","StringBuffer sb = new StringBuffer(64);","switch (opType)","case OpTypes.VALUE :","if (valueData == null)","return Tokens.T_NULL;","\n\t.....\n","for (int i = 0; i \< nodes.length; i++)","if (i \> 0)","sb.append(\',\');","sb.append(nodes[i].getSQL());","sb.append(\')\');","return sb.toString();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ExpressionArithmetic/getSQL()|,["public String getSQL()","StringBuffer sb = new StringBuffer(64);","switch (opType)","case OpTypes.VALUE :","if (valueData == null)","return Tokens.T_NULL;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/FunctionCustom/getSQLSimple()|,["for (int i = 0; i \< nodes.length; i++)","if (i \> 0)","sb.append(\',\');","sb.append(nodes[i].getSQL());","sb.append(\')\');","return sb.toString();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/Expression/isComposedOf(org.hsqldb.Expression%5B%5D,int,int,org.hsqldb.lib.OrderedIntHashSet)|,["case OpTypes.COUNT :","case OpTypes.SUM :","case OpTypes.MIN :","case OpTypes.MAX :","case OpTypes.AVG :","case OpTypes.EVERY :","case OpTypes.SOME :","case OpTypes.STDDEV_POP :","case OpTypes.STDDEV_SAMP :","case OpTypes.VAR_POP :","case OpTypes.VAR_SAMP :","return false;","\n\t.....\n","case OpTypes.MATCH_SIMPLE :","case OpTypes.MATCH_PARTIAL :","case OpTypes.MATCH_FULL :","case OpTypes.MATCH_UNIQUE_SIMPLE :","case OpTypes.MATCH_UNIQUE_PARTIAL :","case OpTypes.MATCH_UNIQUE_FULL :","\n\t.....\n"],[
    <|java+method:///org/hsqldb/Expression/isComposedOf(org.hsqldb.lib.OrderedHashSet,org.hsqldb.RangeGroup%5B%5D,org.hsqldb.lib.OrderedIntHashSet)|,["case OpTypes.COUNT :","case OpTypes.SUM :","case OpTypes.MIN :","case OpTypes.MAX :","case OpTypes.AVG :","case OpTypes.EVERY :","case OpTypes.SOME :","case OpTypes.STDDEV_POP :","case OpTypes.STDDEV_SAMP :","case OpTypes.VAR_POP :","case OpTypes.VAR_SAMP :","return false;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionLogical/describe(org.hsqldb.Session,int)|,["case OpTypes.MATCH_SIMPLE :","case OpTypes.MATCH_PARTIAL :","case OpTypes.MATCH_FULL :","case OpTypes.MATCH_UNIQUE_SIMPLE :","case OpTypes.MATCH_UNIQUE_PARTIAL :","case OpTypes.MATCH_UNIQUE_FULL :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionLogical/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["case OpTypes.MATCH_SIMPLE :","case OpTypes.MATCH_PARTIAL :","case OpTypes.MATCH_FULL :","case OpTypes.MATCH_UNIQUE_SIMPLE :","case OpTypes.MATCH_UNIQUE_PARTIAL :","case OpTypes.MATCH_UNIQUE_FULL :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionLogical/getValue(org.hsqldb.Session)|,["case OpTypes.MATCH_SIMPLE :","case OpTypes.MATCH_PARTIAL :","case OpTypes.MATCH_FULL :","case OpTypes.MATCH_UNIQUE_SIMPLE :","case OpTypes.MATCH_UNIQUE_PARTIAL :","case OpTypes.MATCH_UNIQUE_FULL :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionLogical/costFactor(org.hsqldb.Session,org.hsqldb.RangeVariable,int)|,["case OpTypes.MATCH_SIMPLE :","case OpTypes.MATCH_PARTIAL :","case OpTypes.MATCH_FULL :","case OpTypes.MATCH_UNIQUE_SIMPLE :","case OpTypes.MATCH_UNIQUE_PARTIAL :","case OpTypes.MATCH_UNIQUE_FULL :","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/Expression/resolveColumnReferences(org.hsqldb.Session,org.hsqldb.RangeGroup,int,org.hsqldb.RangeGroup%5B%5D,org.hsqldb.lib.HsqlList,boolean)|,["return unresolvedSet;","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] == null)","continue;","unresolvedSet = nodes[i].resolveColumnReferences(session,","rangeGroup, rangeCount, rangeGroups, unresolvedSet,","acceptsSequences);","\n\t.....\n","public HsqlList resolveColumnReferences(Session session,","RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,","HsqlList unresolvedSet, boolean acceptsSequences)","if (opType == OpTypes.VALUE)","return unresolvedSet;","switch (opType)","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ExpressionArithmetic/resolveColumnReferences(org.hsqldb.Session,org.hsqldb.RangeGroup,int,org.hsqldb.RangeGroup%5B%5D,org.hsqldb.lib.HsqlList,boolean)|,["return unresolvedSet;","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] == null)","continue;","unresolvedSet = nodes[i].resolveColumnReferences(session,","rangeGroup, rangeCount, rangeGroups, unresolvedSet,","acceptsSequences);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionOp/resolveColumnReferences(org.hsqldb.Session,org.hsqldb.RangeGroup,int,org.hsqldb.RangeGroup%5B%5D,org.hsqldb.lib.HsqlList,boolean)|,["public HsqlList resolveColumnReferences(Session session,","RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,","HsqlList unresolvedSet, boolean acceptsSequences)","if (opType == OpTypes.VALUE)","return unresolvedSet;","switch (opType)","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/Expression/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["public void resolveTypes(Session session, Expression parent)","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] != null)","nodes[i].resolveTypes(session, this);","switch (opType)","case OpTypes.VALUE :","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/ExpressionArithmetic/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["public void resolveTypes(Session session, Expression parent)","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] != null)","nodes[i].resolveTypes(session, this);","switch (opType)","case OpTypes.VALUE :","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Expression/getValue(org.hsqldb.Session)|,["public Object getValue(Session session)","switch (opType)","case OpTypes.VALUE :","return valueData;","case OpTypes.SIMPLE_COLUMN :","Object value =","session.sessionContext.rangeIterators[rangePosition]",".getCurrent(columnIndex);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ExpressionLogical/getValue(org.hsqldb.Session)|,["public Object getValue(Session session)","switch (opType)","case OpTypes.VALUE :","return valueData;","case OpTypes.SIMPLE_COLUMN :","Object value =","session.sessionContext.rangeIterators[rangePosition]",".getCurrent(columnIndex);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionArithmetic/getValue(org.hsqldb.Session)|,["public Object getValue(Session session)","switch (opType)","case OpTypes.VALUE :","return valueData;","case OpTypes.SIMPLE_COLUMN :","Object value =","session.sessionContext.rangeIterators[rangePosition]",".getCurrent(columnIndex);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLHybridExtended/add(org.hsqldb.Session,org.hsqldb.persist.CachedObject,boolean)|,["public void add(Session session, CachedObject object, boolean tx)","if (isCached)","int size = object.getRealSize(cache.rowOut);","size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;","size = cache.rowOut.getStorageSize(size);","object.setStorageSize(size);","long pos = tableSpace.getFilePosition(size, false);","object.setPos(pos);","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RowStoreAVLHybrid/add(org.hsqldb.Session,org.hsqldb.persist.CachedObject,boolean)|,["public void add(Session session, CachedObject object, boolean tx)","if (isCached)","int size = object.getRealSize(cache.rowOut);","size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;","size = cache.rowOut.getStorageSize(size);","object.setStorageSize(size);","long pos = tableSpace.getFilePosition(size, false);","object.setPos(pos);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLHybridExtended/commitRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["public void commitRow(Session session, Row row, int changeAction,","int txModel)","switch (changeAction)","case RowAction.ACTION_DELETE :","remove(row);","break;","case RowAction.ACTION_INSERT :","break;","case RowAction.ACTION_INSERT_DELETE :","remove(row);","break;","case RowAction.ACTION_DELETE_FINAL :","delete(session, row);","remove(row);","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RowStoreAVLHybrid/commitRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["public void commitRow(Session session, Row row, int changeAction,","int txModel)","switch (changeAction)","case RowAction.ACTION_DELETE :","remove(row);","break;","case RowAction.ACTION_INSERT :","break;","case RowAction.ACTION_INSERT_DELETE :","remove(row);","break;","case RowAction.ACTION_DELETE_FINAL :","delete(session, row);","remove(row);","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLHybridExtended/rollbackRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["((RowAVL) row).setNewNodes(this);","row.keepInMemory(false);","indexRow(session, row);","break;","case RowAction.ACTION_INSERT :","delete(session, row);","\n\t.....\n","indexRow(session, row);","break;","case RowAction.ACTION_INSERT :","delete(session, row);","remove(row);","break;","case RowAction.ACTION_INSERT_DELETE :","remove(row);","break;","\n\t.....\n","public void rollbackRow(Session session, Row row, int changeAction,","int txModel)","switch (changeAction)","case RowAction.ACTION_DELETE :","row = (Row) get(row, true);","((RowAVL) row).setNewNodes(this);","row.keepInMemory(false);","indexRow(session, row);","break;","case RowAction.ACTION_INSERT :","delete(session, row);","remove(row);","break;","case RowAction.ACTION_INSERT_DELETE :","remove(row);","break;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/persist/RowStoreAVLDisk/rollbackRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["((RowAVL) row).setNewNodes(this);","row.keepInMemory(false);","indexRow(session, row);","break;","case RowAction.ACTION_INSERT :","delete(session, row);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/persist/RowStoreAVLMemory/rollbackRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["indexRow(session, row);","break;","case RowAction.ACTION_INSERT :","delete(session, row);","remove(row);","break;","case RowAction.ACTION_INSERT_DELETE :","remove(row);","break;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/persist/RowStoreAVLHybrid/rollbackRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["public void rollbackRow(Session session, Row row, int changeAction,","int txModel)","switch (changeAction)","case RowAction.ACTION_DELETE :","row = (Row) get(row, true);","((RowAVL) row).setNewNodes(this);","row.keepInMemory(false);","indexRow(session, row);","break;","case RowAction.ACTION_INSERT :","delete(session, row);","remove(row);","break;","case RowAction.ACTION_INSERT_DELETE :","remove(row);","break;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLHybridExtended/resetAccessorKeys(org.hsqldb.Session,org.hsqldb.index.Index%5B%5D)|,["public synchronized void resetAccessorKeys(Session session, Index[] keys)","if (indexList.length == 0 || accessorList[0] == null)","indexList    = keys;","accessorList = new CachedObject[indexList.length];","return;","if (isCached)","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RowStoreAVLHybrid/resetAccessorKeys(org.hsqldb.Session,org.hsqldb.index.Index%5B%5D)|,["public synchronized void resetAccessorKeys(Session session, Index[] keys)","if (indexList.length == 0 || accessorList[0] == null)","indexList    = keys;","accessorList = new CachedObject[indexList.length];","return;","if (isCached)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/rights/Right/canAccessFully(int)|,["if (isFull)","return true;","switch (privilegeType)","case GrantConstants.DELETE :","return isFullDelete;","case GrantConstants.SELECT :","\n\t.....\n"],[<|java+method:///org/hsqldb/rights/Right/canAccess(int)|,["if (isFull)","return true;","switch (privilegeType)","case GrantConstants.DELETE :","return isFullDelete;","case GrantConstants.SELECT :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLDisk/indexRow(org.hsqldb.Session,org.hsqldb.Row)|,["public void indexRow(Session session, Row row)","try","row = (Row) get(row, true);","super.indexRow(session, row);","row.keepInMemory(false);","catch (HsqlException e)","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RowStoreAVLHybrid/indexRow(org.hsqldb.Session,org.hsqldb.Row)|,["public void indexRow(Session session, Row row)","try","row = (Row) get(row, true);","super.indexRow(session, row);","row.keepInMemory(false);","catch (HsqlException e)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLDisk/commitRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["public void commitRow(Session session, Row row, int changeAction,","int txModel)","Object[] data = row.getData();","switch (changeAction)","case RowAction.ACTION_DELETE :","database.logger.writeDeleteStatement(session, (Table) table,","data);","\n\t.....\n","break;","case RowAction.ACTION_INSERT :","database.logger.writeInsertStatement(session, row,","(Table) table);","break;","case RowAction.ACTION_INSERT_DELETE :","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RowStoreAVLMemory/commitRow(org.hsqldb.Session,org.hsqldb.Row,int,int)|,["public void commitRow(Session session, Row row, int changeAction,","int txModel)","Object[] data = row.getData();","switch (changeAction)","case RowAction.ACTION_DELETE :","database.logger.writeDeleteStatement(session, (Table) table,","data);","\n\t.....\n","break;","case RowAction.ACTION_INSERT :","database.logger.writeInsertStatement(session, row,","(Table) table);","break;","case RowAction.ACTION_INSERT_DELETE :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/RowStoreAVLDisk/getAccessor(org.hsqldb.index.Index)|,["public CachedObject getAccessor(Index key)","NodeAVL node = (NodeAVL) accessorList[key.getPosition()];","if (node == null)","return null;","RowAVL row = (RowAVL) get(node.getRow(this), false);","node                            = row.getNode(key.getPosition());","accessorList[key.getPosition()] = node;","return node;","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/RowStoreAVLHybrid/getAccessor(org.hsqldb.index.Index)|,["public CachedObject getAccessor(Index key)","NodeAVL node = (NodeAVL) accessorList[key.getPosition()];","if (node == null)","return null;","RowAVL row = (RowAVL) get(node.getRow(this), false);","node                            = row.getNode(key.getPosition());","accessorList[key.getPosition()] = node;","return node;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/TransferDb/commit()|,["if (srcStatement != null)","try","srcStatement.close();","catch (SQLException e)","srcStatement = null;","try","\n\t.....\n"],[<|java+method:///org/hsqldb/util/TransferDb/rollback()|,["if (srcStatement != null)","try","srcStatement.close();","catch (SQLException e)","srcStatement = null;","try","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/TransferDb/getSchemas()|,["catch (SQLException e)","result = null;","try","if (result != null)","while (result.next())","ret.addElement(result.getString(1));","result.close();","catch (SQLException e)","throw new DataAccessPointException(e.toString());","return (ret);","\n\t.....\n","for (int i = 0; i \< len; i++)","int t = r.getColumnType(i + 1);","sLast = \"column=\" + r.getColumnName(i + 1) + \" datatype=\"","+ (String) helper.getSupportedTypes().get(new Integer(t));","Object o = r.getObject(i + 1);","if (o == null)","\n\t.....\n"],[
    <|java+method:///org/hsqldb/util/TransferDb/getCatalog()|,["catch (SQLException e)","result = null;","try","if (result != null)","while (result.next())","ret.addElement(result.getString(1));","result.close();","catch (SQLException e)","throw new DataAccessPointException(e.toString());","return (ret);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/util/TransferSQLText/transferRow(org.hsqldb.util.TransferResultSet)|,["for (int i = 0; i \< len; i++)","int t = r.getColumnType(i + 1);","sLast = \"column=\" + r.getColumnName(i + 1) + \" datatype=\"","+ (String) helper.getSupportedTypes().get(new Integer(t));","Object o = r.getObject(i + 1);","if (o == null)","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigator/absolute(int)|,["public boolean absolute(int position)","if (position \< 0)","position += size;","if (position \< 0)","beforeFirst();","return false;","if (position \>= size)","afterLast();","return false;","if (size == 0)","return false;","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorClient/absolute(int)|,["public boolean absolute(int position)","if (position \< 0)","position += size;","if (position \< 0)","beforeFirst();","return false;","if (position \>= size)","afterLast();","return false;","if (size == 0)","return false;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManagerSwing/directRefreshTree()|,["CommonSwing.errorMessage(se);","finally","if (result != null)","try","result.close();","catch (SQLException se)","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/updateSchemaList()|,["CommonSwing.errorMessage(se);","finally","if (result != null)","try","result.close();","catch (SQLException se)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/DatabaseManagerSwing/createToolBar()/$anonymous1/actionPerformed(java.awt.event.ActionEvent)|,["public void actionPerformed(ActionEvent actionevent)","if (sqlScriptBuffer == null","&& txtCommand.getText().length() \< 1)","CommonSwing.errorMessage(\"No SQL to clear\");","return;","clear();","\n\t.....\n"],[<|java+method:///org/hsqldb/util/DatabaseManagerSwing/createToolBar()|,["public void actionPerformed(ActionEvent actionevent)","if (sqlScriptBuffer == null","&& txtCommand.getText().length() \< 1)","CommonSwing.errorMessage(\"No SQL to clear\");","return;","clear();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/result/ResultLob/writeCreateByteSegments(org.hsqldb.SessionInterface,org.hsqldb.lib.DataOutputStream)|,["DataOutputStream dataOut)","throws IOException","int  bufferLength  = session.getStreamBlockSize();","long currentOffset = blockOffset;","dataOut.writeByte(mode);","dataOut.writeInt(databaseID);","dataOut.writeLong(sessionID);","dataOut.writeLong(lobID);","dataOut.writeInt(subType);","HsqlByteArrayOutputStream byteArrayOS =","new HsqlByteArrayOutputStream(bufferLength);","byteArrayOS.reset();","\n\t.....\n","if (byteArrayOS.size() == 0)","break;","dataOut.writeByte(mode);","dataOut.writeInt(databaseID);","dataOut.writeLong(sessionID);","dataOut.writeLong(lobID);","\n\t.....\n"],[<|java+method:///org/hsqldb/result/ResultLob/writeCreateCharSegments(org.hsqldb.SessionInterface,org.hsqldb.lib.DataOutputStream)|,["DataOutputStream dataOut)","throws IOException","int  bufferLength  = session.getStreamBlockSize();","long currentOffset = blockOffset;","dataOut.writeByte(mode);","dataOut.writeInt(databaseID);","dataOut.writeLong(sessionID);","dataOut.writeLong(lobID);","dataOut.writeInt(subType);","HsqlByteArrayOutputStream byteArrayOS =","new HsqlByteArrayOutputStream(bufferLength);","byteArrayOS.reset();","\n\t.....\n","if (byteArrayOS.size() == 0)","break;","dataOut.writeByte(mode);","dataOut.writeInt(databaseID);","dataOut.writeLong(sessionID);","dataOut.writeLong(lobID);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/BlobInputStream/read()|,["public int read() throws IOException","checkClosed();","if (currentPosition \>= availableLength)","return -1;","if (buffer == null","|| currentPosition \>= bufferOffset + buffer.length)","try","checkClosed();","readIntoBuffer();","catch (Exception e)","throw JavaSystem.toIOException(e);","\n\t.....\n"],[<|java+method:///org/hsqldb/types/ClobInputStream/read()|,["public int read() throws IOException","checkClosed();","if (currentPosition \>= availableLength)","return -1;","if (buffer == null","|| currentPosition \>= bufferOffset + buffer.length)","try","checkClosed();","readIntoBuffer();","catch (Exception e)","throw JavaSystem.toIOException(e);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/BlobInputStream/skip(long)|,["public long skip(long n) throws IOException","checkClosed();","if (n \<= 0)","return 0;","if (currentPosition + n \> availableLength)","n = availableLength - currentPosition;","currentPosition += n;","return n;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/ClobInputStream/skip(long)|,["public long skip(long n) throws IOException","checkClosed();","if (n \<= 0)","return 0;","if (currentPosition + n \> availableLength)","n = availableLength - currentPosition;","currentPosition += n;","return n;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/rowio/RowInputTextLog/readOther()|,["readFieldPrefix();","if (scanner.scanNull())","return null;","scanner.scanBinaryStringWithQuote();","if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING)","throw Error.error(ErrorCode.X_42587);","value = scanner.getValue();","\n\t.....\n"],[<|java+method:///org/hsqldb/rowio/RowInputTextLog/readBinary()|,["readFieldPrefix();","if (scanner.scanNull())","return null;","scanner.scanBinaryStringWithQuote();","if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING)","throw Error.error(ErrorCode.X_42587);","value = scanner.getValue();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddInteger(int)|,["if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","if (hashIndex.elementCount \>= threshold)","reset();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddLong(long)|,["if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","if (hashIndex.elementCount \>= threshold)","reset();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddString(java.lang.Object)|,["if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","if (hashIndex.elementCount \>= threshold)","reset();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddSubString(java.lang.String,int,int)|,["if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","if (hashIndex.elementCount \>= threshold)","reset();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddDate(long)|,["if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","if (hashIndex.elementCount \>= threshold)","reset();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddDouble(long)|,["if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","if (hashIndex.elementCount \>= threshold)","reset();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddObject(java.lang.Object)|,["if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","if (hashIndex.elementCount \>= threshold)","reset();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddString(java.lang.Object)|,["String testValue;","int    index      = hashIndex.getHashIndex(key.hashCode());","int    lookup     = hashIndex.hashTable[index];","int    lastLookup = -1;","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","testValue = (String) objectKeyTable[lookup];","if (key.equals(testValue))","return getOrAddString(key);","\n\t.....\n","lookup                 = hashIndex.linkNode(index, lastLookup);","objectKeyTable[lookup] = testValue;","if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddSubString(java.lang.String,int,int)|,["String testValue;","int    index      = hashIndex.getHashIndex(key.hashCode());","int    lookup     = hashIndex.hashTable[index];","int    lastLookup = -1;","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","testValue = (String) objectKeyTable[lookup];","if (key.equals(testValue))","return getOrAddString(key);","\n\t.....\n","lookup                 = hashIndex.linkNode(index, lastLookup);","objectKeyTable[lookup] = testValue;","if (accessCount \> ACCESS_MAX)","resetAccessCount();","accessTable[lookup] = accessCount++;","return testValue;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/map/ValuePoolHashMap/getOrAddObject(java.lang.Object)|,["int    index      = hashIndex.getHashIndex(key.hashCode());","int    lookup     = hashIndex.hashTable[index];","int    lastLookup = -1;","for (; lookup \>= 0;","lastLookup = lookup,","lookup = hashIndex.getNextLookup(lookup))","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/TableWorks/addPrimaryKey(org.hsqldb.Constraint)|,["emptySet);","moveData(table, tn, -1, 0);","table = tn;","database.schemaManager.addSchemaObject(constraint);","setNewTableInSchema(table);","updateConstraints(table, emptySet);","database.schemaManager.recompileDependentObjects(table);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/TableWorks/addUniqueConstraint(int%5B%5D,org.hsqldb.HsqlNameManager.HsqlName)|,["emptySet);","moveData(table, tn, -1, 0);","table = tn;","database.schemaManager.addSchemaObject(constraint);","setNewTableInSchema(table);","updateConstraints(table, emptySet);","database.schemaManager.recompileDependentObjects(table);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/TableWorks/addUniqueConstraint(org.hsqldb.Constraint)|,["moveData(table, tn, -1, 0);","table = tn;","database.schemaManager.addSchemaObject(constraint);","setNewTableInSchema(table);","updateConstraints(table, emptySet);","database.schemaManager.recompileDependentObjects(table);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/TableWorks/dropColumn(int,boolean)|,["setNewTableInSchema(tn);","setNewTablesInSchema(tableSet);","updateConstraints(tn, emptySet);","updateConstraints(tableSet, constraintNameSet);","database.schemaManager.recompileDependentObjects(tableSet);","database.schemaManager.recompileDependentObjects(tn);","\n\t.....\n"],[<|java+method:///org/hsqldb/TableWorks/dropConstraint(java.lang.String,boolean)|,["setNewTableInSchema(tn);","setNewTablesInSchema(tableSet);","updateConstraints(tn, emptySet);","updateConstraints(tableSet, constraintNameSet);","database.schemaManager.recompileDependentObjects(tableSet);","database.schemaManager.recompileDependentObjects(tn);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TableWorks/dropConstraint(java.lang.String,boolean)|,["Table      t = c.getMain();","if (t != table)","tableSet.add(t);","t = c.getRef();","if (t != table)","tableSet.add(t);","constraintNameSet.add(c.getMainName());","constraintNameSet.add(c.getRefName());","indexNameSet.add(c.getRefIndex().getName());","\n\t.....\n"],[<|java+method:///org/hsqldb/SchemaManager/dropTable(org.hsqldb.Session,org.hsqldb.Table,boolean)|,["Table      t = c.getMain();","if (t != table)","tableSet.add(t);","t = c.getRef();","if (t != table)","tableSet.add(t);","constraintNameSet.add(c.getMainName());","constraintNameSet.add(c.getRefName());","indexNameSet.add(c.getRefIndex().getName());","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/map/BitMap/and(byte%5B%5D,int,byte,int)|,["int shift     = pos & 0x07;","int mask      = (source & 0xff) \>\>\> shift;","int innermask = 0xff \>\> shift;","int index     = pos / 8;","if (count \< 8)","innermask = innermask \>\>\> (8 - count);","innermask = innermask \<\< (8 - count);","mask      &= innermask;","innermask = ~innermask;","if (index \>= map.length)","return;","byte b = map[index];","\n\t.....\n","if (shift == 0)","return;","shift = 8 - shift;","if (count \> shift)","mask           = ((source & 0xff) \<\< 8) \>\>\> shift;","innermask      = 0xff00 \>\>\> shift;","innermask      = ~innermask;","b              = map[index + 1];","\n\t.....\n"],[<|java+method:///org/hsqldb/map/BitMap/overlay(byte%5B%5D,int,byte,int)|,["int shift     = pos & 0x07;","int mask      = (source & 0xff) \>\>\> shift;","int innermask = 0xff \>\> shift;","int index     = pos / 8;","if (count \< 8)","innermask = innermask \>\>\> (8 - count);","innermask = innermask \<\< (8 - count);","mask      &= innermask;","innermask = ~innermask;","if (index \>= map.length)","return;","byte b = map[index];","\n\t.....\n","if (shift == 0)","return;","shift = 8 - shift;","if (count \> shift)","mask           = ((source & 0xff) \<\< 8) \>\>\> shift;","innermask      = 0xff00 \>\>\> shift;","innermask      = ~innermask;","b              = map[index + 1];","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/map/BitMap/or(byte%5B%5D,byte%5B%5D)|,["int    length      = a.length \> b.length ? a.length",": b.length;","int    shortLength = a.length \> b.length ? b.length",": a.length;","byte[] map         = new byte[length];","if (length != shortLength)","byte[] source = a.length \> b.length ? a",": b;","System.arraycopy(source, shortLength, map, shortLength,","length - shortLength);","for (int i = 0; i \< shortLength; i++)","\n\t.....\n"],[<|java+method:///org/hsqldb/map/BitMap/xor(byte%5B%5D,byte%5B%5D)|,["int    length      = a.length \> b.length ? a.length",": b.length;","int    shortLength = a.length \> b.length ? b.length",": a.length;","byte[] map         = new byte[length];","if (length != shortLength)","byte[] source = a.length \> b.length ? a",": b;","System.arraycopy(source, shortLength, map, shortLength,","length - shortLength);","for (int i = 0; i \< shortLength; i++)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorClient/getCurrent()|,["public Object[] getCurrent()","if (currentPos \< 0 || currentPos \>= size)","return null;","if (currentPos == currentOffset + table.length)","getBlock(currentOffset + table.length);","return table[currentPos - currentOffset];","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/getCurrent()|,["public Object[] getCurrent()","if (currentPos \< 0 || currentPos \>= size)","return null;","if (currentPos == currentOffset + table.length)","getBlock(currentOffset + table.length);","return table[currentPos - currentOffset];","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorClient/ensureCapacity()|,["private void ensureCapacity()","if (size == table.length)","int        newSize  = size == 0 ? 4",": size * 2;","Object[][] newTable = new Object[newSize][];","System.arraycopy(table, 0, newTable, 0, size);","table = newTable;","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/ensureCapacity()|,["private void ensureCapacity()","if (size == table.length)","int        newSize  = size == 0 ? 4",": size * 2;","Object[][] newTable = new Object[newSize][];","System.arraycopy(table, 0, newTable, 0, size);","table = newTable;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCConnection/rollback(java.sql.Savepoint)|,["if (savepoint == null)","throw JDBCUtil.nullArgument();","if (!(savepoint instanceof JDBCSavepoint))","String msg = Error.getMessage(ErrorCode.X_3B001);","throw JDBCUtil.invalidArgument(msg);","sp = (JDBCSavepoint) savepoint;","if (JDBCDatabaseMetaData.JDBC_MAJOR \>= 4 && sp.name == null)","String msg = Error.getMessage(ErrorCode.X_3B001);","throw JDBCUtil.invalidArgument(msg);","if (this != sp.connection)","String msg = Error.getMessage(ErrorCode.X_3B001);","throw JDBCUtil.invalidArgument(msg);","if (JDBCDatabaseMetaData.JDBC_MAJOR \>= 4 && getAutoCommit())","sp.name       = null;","sp.connection = null;","throw JDBCUtil.sqlException(ErrorCode.X_3B001);","try","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCConnection/releaseSavepoint(java.sql.Savepoint)|,["if (savepoint == null)","throw JDBCUtil.nullArgument();","if (!(savepoint instanceof JDBCSavepoint))","String msg = Error.getMessage(ErrorCode.X_3B001);","throw JDBCUtil.invalidArgument(msg);","sp = (JDBCSavepoint) savepoint;","if (JDBCDatabaseMetaData.JDBC_MAJOR \>= 4 && sp.name == null)","String msg = Error.getMessage(ErrorCode.X_3B001);","throw JDBCUtil.invalidArgument(msg);","if (this != sp.connection)","String msg = Error.getMessage(ErrorCode.X_3B001);","throw JDBCUtil.invalidArgument(msg);","if (JDBCDatabaseMetaData.JDBC_MAJOR \>= 4 && getAutoCommit())","sp.name       = null;","sp.connection = null;","throw JDBCUtil.sqlException(ErrorCode.X_3B001);","try","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/TransferSQLText/execute(java.lang.String)|,["if (WTextWrite == null)","try","WTextWrite = new BufferedWriter(new FileWriter(sFileName));","catch (IOException e)","throw new DataAccessPointException(e.getMessage());","try","\n\t.....\n"],[<|java+method:///org/hsqldb/util/TransferSQLText/putData(java.lang.String,org.hsqldb.util.TransferResultSet,int)|,["if (WTextWrite == null)","try","WTextWrite = new BufferedWriter(new FileWriter(sFileName));","catch (IOException e)","throw new DataAccessPointException(e.getMessage());","try","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/TransferSQLText/parseFileForTables()|,["try","WTextRead = new BufferedReader(new FileReader(sFileName));","catch (IOException e)","throw new DataAccessPointException(e.getMessage());","String        currentLine  = \"\";","String        Token        = \"\";","String        name         = \"\";","TransferTable relatedTable = null;","try","while ((currentLine = WTextRead.readLine()) != null)","currentLine = currentLine.trim() + \";\";","Tokenizer   = new StringTokenizer(currentLine);","try","Token = Tokenizer.nextToken();","catch (NoSuchElementException NSE)","continue;","if (Token == null)","continue;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/util/TransferSQLText/parseFileForTheRest(org.hsqldb.util.TransferTable,org.hsqldb.util.DataAccessPoint)|,["try","WTextRead = new BufferedReader(new FileReader(sFileName));","catch (IOException e)","throw new DataAccessPointException(e.getMessage());","String        currentLine  = \"\";","String        Token        = \"\";","String        name         = \"\";","TransferTable relatedTable = null;","try","while ((currentLine = WTextRead.readLine()) != null)","currentLine = currentLine.trim() + \";\";","Tokenizer   = new StringTokenizer(currentLine);","try","Token = Tokenizer.nextToken();","catch (NoSuchElementException NSE)","continue;","if (Token == null)","continue;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/util/TransferSQLText/parseFileForData(java.lang.String)|,["try","while ((currentLine = WTextRead.readLine()) != null)","currentLine = currentLine.trim() + \";\";","Tokenizer   = new StringTokenizer(currentLine);","try","Token = Tokenizer.nextToken();","catch (NoSuchElementException NSE)","continue;","if (Token == null)","continue;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/jdbc/JDBCArrayBasic/getArray(long,int)|,["public Object getArray(long index, int count) throws SQLException","checkClosed();","if (!JDBCClobClient.isInLimits(data.length, index - 1, count))","throw JDBCUtil.outOfRangeArgument();","Object[] slice = new Object[count];","for (int i = 0; i \< count; i++)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCArray/getArray(long,int)|,["public Object getArray(long index, int count) throws SQLException","checkClosed();","if (!JDBCClobClient.isInLimits(data.length, index - 1, count))","throw JDBCUtil.outOfRangeArgument();","Object[] slice = new Object[count];","for (int i = 0; i \< count; i++)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCArrayBasic/newColumnResult(long,int)|,["private Result newColumnResult(long position,","int count) throws SQLException","if (!JDBCClobClient.isInLimits(data.length, position, count))","throw JDBCUtil.outOfRangeArgument();","Type[] types = new Type[2];","types[0] = Type.SQL_INTEGER;","types[1] = elementType;","ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);","meta.columnLabels = new String[]","\"C1\", \"C2\"",";","meta.colIndexes   = new int[]","-1, -1",";","meta.columns      = new ColumnBase[2];","\n\t.....\n","RowSetNavigatorClient navigator = new RowSetNavigatorClient();","for (int i = (int) position; i \< position + count; i++)","Object[] rowData = new Object[2];","rowData[0] = Integer.valueOf(i + 1);","rowData[1] = data[i];","navigator.add(rowData);","Result result = Result.newDataResult(meta);","result.setNavigator(navigator);","return result;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCArray/newColumnResult(long,int)|,["private Result newColumnResult(long position,","int count) throws SQLException","if (!JDBCClobClient.isInLimits(data.length, position, count))","throw JDBCUtil.outOfRangeArgument();","Type[] types = new Type[2];","types[0] = Type.SQL_INTEGER;","types[1] = elementType;","ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);","meta.columnLabels = new String[]","\"C1\", \"C2\"",";","meta.colIndexes   = new int[]","-1, -1",";","meta.columns      = new ColumnBase[2];","\n\t.....\n","RowSetNavigatorClient navigator = new RowSetNavigatorClient();","for (int i = (int) position; i \< position + count; i++)","Object[] rowData = new Object[2];","rowData[0] = Integer.valueOf(i + 1);","rowData[1] = data[i];","navigator.add(rowData);","Result result = Result.newDataResult(meta);","result.setNavigator(navigator);","return result;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/BlobDataID/setBytes(org.hsqldb.SessionInterface,long,org.hsqldb.types.BlobData,long,long)|,["public void setBytes(SessionInterface session, long pos, BlobData b,","long offset, long length)","if (length \> Integer.MAX_VALUE)","throw new IndexOutOfBoundsException();","byte[] bytes = b.getBytes(session, offset, (int) length);","setBytes(session, pos, bytes, 0, bytes.length);","\n\t.....\n"],[<|java+method:///org/hsqldb/types/BinaryData/setBytes(org.hsqldb.SessionInterface,long,org.hsqldb.types.BlobData,long,long)|,["public void setBytes(SessionInterface session, long pos, BlobData b,","long offset, long length)","if (length \> Integer.MAX_VALUE)","throw new IndexOutOfBoundsException();","byte[] bytes = b.getBytes(session, offset, (int) length);","setBytes(session, pos, bytes, 0, bytes.length);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCBlob/position(byte%5B%5D,long)|,["final byte[] data = getData();","final int    dlen = data.length;","if (start \< MIN_POS)","throw JDBCUtil.outOfRangeArgument(\"start: \" + start);","else if (start \> dlen || pattern == null)","return -1L;","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCBlob/position(java.sql.Blob,long)|,["final byte[] data = getData();","final int    dlen = data.length;","if (start \< MIN_POS)","throw JDBCUtil.outOfRangeArgument(\"start: \" + start);","else if (start \> dlen || pattern == null)","return -1L;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCBlob/setBinaryStream(long)/$anonymous1/close()|,["public synchronized void close() throws java.io.IOException","try","JDBCBlob.this.setBytes(pos, toByteArray());","catch (SQLException se)","throw JavaSystem.toIOException(se);","finally","super.close();","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCBlob/setBinaryStream(long)|,["public synchronized void close() throws java.io.IOException","try","JDBCBlob.this.setBytes(pos, toByteArray());","catch (SQLException se)","throw JavaSystem.toIOException(se);","finally","super.close();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/BooleanType/convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)|,["Type otherType)","if (a == null)","return a;","switch (otherType.typeCode)","case Types.SQL_BOOLEAN :","return a;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/BooleanType/convertToTypeJDBC(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)|,["Type otherType)","if (a == null)","return a;","switch (otherType.typeCode)","case Types.SQL_BOOLEAN :","return a;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/server/Server/putPropertiesFromFile(java.lang.String,java.lang.String)|,["try","setProperties(p);","catch (Exception e)","throw Error.error(e, ErrorCode.GENERAL_ERROR,","ErrorCode.M_Message_Pair,","new String[] \"Failed to set properties\" );","\n\t.....\n"],[<|java+method:///org/hsqldb/server/Server/putPropertiesFromString(java.lang.String)|,["try","setProperties(p);","catch (Exception e)","throw Error.error(e, ErrorCode.GENERAL_ERROR,","ErrorCode.M_Message_Pair,","new String[] \"Failed to set properties\" );","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/server/Server/main(java.lang.String%5B%5D)|,["public static void main(String[] args)","HsqlProperties argProps = null;","argProps = HsqlProperties.argArrayToProps(args,","ServerProperties.sc_key_prefix);","String[] errors = argProps.getErrorKeys();","if (errors.length != 0)","System.out.println(\"no value for argument:\" + errors[0]);","\n\t.....\n","try","server.setProperties(props);","catch (Exception e)","server.printError(\"Failed to set properties\");","server.printStackTrace(e);","return;","server.print(\"Startup sequence initiated from main() method\");","if (fileProps != null)","server.print(\"Loaded properties from [\" + propsPath","\n\t.....\n"],[<|java+method:///org/hsqldb/server/WebServer/main(java.lang.String%5B%5D)|,["public static void main(String[] args)","HsqlProperties argProps = null;","argProps = HsqlProperties.argArrayToProps(args,","ServerProperties.sc_key_prefix);","String[] errors = argProps.getErrorKeys();","if (errors.length != 0)","System.out.println(\"no value for argument:\" + errors[0]);","\n\t.....\n","try","server.setProperties(props);","catch (Exception e)","server.printError(\"Failed to set properties\");","server.printStackTrace(e);","return;","server.print(\"Startup sequence initiated from main() method\");","if (fileProps != null)","server.print(\"Loaded properties from [\" + propsPath","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementDMQL/checkAccessRights(org.hsqldb.Session)|,["switch (type)","case StatementTypes.CALL :","break;","case StatementTypes.INSERT :","session.getGrantee().checkInsert(targetTable,","insertCheckColumns);","break;","case StatementTypes.SELECT_CURSOR :","break;","case StatementTypes.DELETE_WHERE :","session.getGrantee().checkDelete(targetTable);","break;","case StatementTypes.UPDATE_WHERE :","session.getGrantee().checkUpdate(targetTable,","updateCheckColumns);","break;","case StatementTypes.MERGE :","session.getGrantee().checkInsert(targetTable,","insertCheckColumns);","session.getGrantee().checkUpdate(targetTable,","updateCheckColumns);","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementResultUpdate/checkAccessRights(org.hsqldb.Session)|,["switch (type)","case StatementTypes.CALL :","break;","case StatementTypes.INSERT :","session.getGrantee().checkInsert(targetTable,","insertCheckColumns);","break;","case StatementTypes.SELECT_CURSOR :","break;","case StatementTypes.DELETE_WHERE :","session.getGrantee().checkDelete(targetTable);","break;","case StatementTypes.UPDATE_WHERE :","session.getGrantee().checkUpdate(targetTable,","updateCheckColumns);","break;","case StatementTypes.MERGE :","session.getGrantee().checkInsert(targetTable,","insertCheckColumns);","session.getGrantee().checkUpdate(targetTable,","updateCheckColumns);","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/ArrayType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (this == other)","return this;","\n\t.....\n"],[<|java+method:///org/hsqldb/types/NumberType/getAggregateType(org.hsqldb.types.Type)|,["public Type getAggregateType(Type other)","if (other == null)","return this;","if (other == SQL_ALL_TYPES)","return this;","if (this == other)","return this;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/server/OdbcUtil/hexCharsToOctalOctets(java.lang.String)|,["char c;","int octet;","for (int i = 0; i \< chars; i++)","octet = 0;","c = hexChars.charAt(i);","if (c \>= \'a\' && c \<= \'f\')","octet += 10 + c - \'a\';","else if (c \>= \'A\' && c \<= \'F\')","octet += 10 + c - \'A\';","else if (c \>= \'0\' && c \<= \'9\')","octet += c - \'0\';","else","\n\t.....\n","\"Non-hex character in input at offset \" + i + \": \" + c);","octet = octet \<\< 4;","c = hexChars.charAt(++i);","if (c \>= \'a\' && c \<= \'f\')","octet += 10 + c - \'a\';","else if (c \>= \'A\' && c \<= \'F\')","octet += 10 + c - \'A\';","else if (c \>= \'0\' && c \<= \'9\')","octet += c - \'0\';","else","\n\t.....\n"],[<|java+method:///org/hsqldb/cmdline/SqlFile/hexCharOctetsToBytes(java.lang.String)|,["char c;","int octet;","for (int i = 0; i \< chars; i++)","octet = 0;","c = hexChars.charAt(i);","if (c \>= \'a\' && c \<= \'f\')","octet += 10 + c - \'a\';","else if (c \>= \'A\' && c \<= \'F\')","octet += 10 + c - \'A\';","else if (c \>= \'0\' && c \<= \'9\')","octet += c - \'0\';","else","\n\t.....\n","\"Non-hex character in input at offset \" + i + \": \" + c);","octet = octet \<\< 4;","c = hexChars.charAt(++i);","if (c \>= \'a\' && c \<= \'f\')","octet += 10 + c - \'a\';","else if (c \>= \'A\' && c \<= \'F\')","octet += 10 + c - \'A\';","else if (c \>= \'0\' && c \<= \'9\')","octet += c - \'0\';","else","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/cmdline/sqltool/SqlFileScanner/zzUnpackAction(java.lang.String,int,int%5B%5D)|,["int i = 0;       /* index in packed string  */","int j = offset;  /* index in unpacked array */","int l = packed.length();","while (i \< l)","int count = packed.charAt(i++);","int value = packed.charAt(i++);","\n\t.....\n","int i = 0;       /* index in packed string  */","int j = offset;  /* index in unpacked array */","int l = packed.length();","while (i \< l)","int count = packed.charAt(i++);","int value = packed.charAt(i++);","do result[j++] = value; while (--count \> 0);","return j;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/cmdline/sqltool/SqlFileScanner/zzUnpackTrans(java.lang.String,int,int%5B%5D)|,["int i = 0;       /* index in packed string  */","int j = offset;  /* index in unpacked array */","int l = packed.length();","while (i \< l)","int count = packed.charAt(i++);","int value = packed.charAt(i++);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/cmdline/sqltool/SqlFileScanner/zzUnpackAttribute(java.lang.String,int,int%5B%5D)|,["int i = 0;       /* index in packed string  */","int j = offset;  /* index in unpacked array */","int l = packed.length();","while (i \< l)","int count = packed.charAt(i++);","int value = packed.charAt(i++);","do result[j++] = value; while (--count \> 0);","return j;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/lib/LongValueHashMap/get(java.lang.Object)|,["if (key == null)","throw new NoSuchElementException();","int hash   = key.hashCode();","int lookup = getLookup(key, hash);","if (lookup != -1)","return longValueTable[lookup];","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/LongValueHashMap/get(java.lang.Object,int)|,["if (key == null)","throw new NoSuchElementException();","int hash   = key.hashCode();","int lookup = getLookup(key, hash);","if (lookup != -1)","return longValueTable[lookup];","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/ConnectionDialog/create()/$anonymous2/actionPerformed(java.awt.event.ActionEvent)|,["public void actionPerformed(ActionEvent e)","ConnectionDialogCommon.deleteRecentConnectionSettings();","settings = new Hashtable();","recent.removeAll();","recent.add(ConnectionDialogCommon.emptySettingName);","mName.setText(null);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/ConnectionDialog/create()|,["public void actionPerformed(ActionEvent e)","ConnectionDialogCommon.deleteRecentConnectionSettings();","settings = new Hashtable();","recent.removeAll();","recent.add(ConnectionDialogCommon.emptySettingName);","mName.setText(null);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/IntervalType/add(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["if (a == null || b == null)","return null;","switch (typeCode)","case Types.SQL_INTERVAL_YEAR :","case Types.SQL_INTERVAL_YEAR_TO_MONTH :","case Types.SQL_INTERVAL_MONTH :","\n\t.....\n"],[<|java+method:///org/hsqldb/types/IntervalType/subtract(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["if (a == null || b == null)","return null;","switch (typeCode)","case Types.SQL_INTERVAL_YEAR :","case Types.SQL_INTERVAL_YEAR_TO_MONTH :","case Types.SQL_INTERVAL_MONTH :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/StringUtil/getList(java.lang.String%5B%5D,java.lang.String,java.lang.String)|,["for (int i = 0; i \< len; i++)","sb.append(quote);","sb.append(s[i]);","sb.append(quote);","if (i + 1 \< len)","sb.append(separator);","return sb.toString();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/lib/StringUtil/getList(int%5B%5D,java.lang.String,java.lang.String)|,["for (int i = 0; i \< len; i++)","sb.append(quote);","sb.append(s[i]);","sb.append(quote);","if (i + 1 \< len)","sb.append(separator);","return sb.toString();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/lib/StringUtil/getList(long%5B%5D,java.lang.String,java.lang.String)|,["for (int i = 0; i \< len; i++)","sb.append(quote);","sb.append(s[i]);","sb.append(quote);","if (i + 1 \< len)","sb.append(separator);","return sb.toString();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserCommand/compileSetDefault()|,["readThis(Tokens.TYPE);","int type = TableBase.MEMORY_TABLE;","switch (token.tokenType)","case Tokens.MEMORY :","break;","case Tokens.CACHED :","type = TableBase.CACHED_TABLE;","break;","default :","throw unexpectedToken();","read();","Object[] args = new Object[] ValuePool.getInt(type) ;","return new StatementCommand(","StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);","\n\t.....\n","case Tokens.RESULT :","read();","readThis(Tokens.MEMORY);","readThis(Tokens.ROWS);","Integer  size = readIntegerObject();","Object[] args = new Object[] size ;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserCommand/compileSet()|,["readThis(Tokens.TYPE);","int type = TableBase.MEMORY_TABLE;","switch (token.tokenType)","case Tokens.MEMORY :","break;","case Tokens.CACHED :","type = TableBase.CACHED_TABLE;","break;","default :","throw unexpectedToken();","read();","Object[] args = new Object[] ValuePool.getInt(type) ;","return new StatementCommand(","StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserCommand/compileSessionSettings()|,["case Tokens.RESULT :","read();","readThis(Tokens.MEMORY);","readThis(Tokens.ROWS);","Integer  size = readIntegerObject();","Object[] args = new Object[] size ;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserCommand/compileSet()|,["if (token.tokenType == Tokens.TRUE)","delay = database.getProperties().getDefaultWriteDelay();","read();","else if (token.tokenType == Tokens.FALSE)","delay = 0;","read();","else","delay = this.readInteger();","if (delay \< 0)","delay = 0;","if (token.tokenType == Tokens.MILLIS)","read();","else","delay *= 1000;","\n\t.....\n","if (!e.getDataType().isCharacterType())","throw Error.error(ErrorCode.X_0P000);","if (e.getType() != OpTypes.VALUE","&& (e.getType() != OpTypes.SQL_FUNCTION","|| !((FunctionSQL) e).isValueFunction()))","throw Error.error(ErrorCode.X_0P000);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ParserCommand/compileSetFilesProperty()|,["if (token.tokenType == Tokens.TRUE)","delay = database.getProperties().getDefaultWriteDelay();","read();","else if (token.tokenType == Tokens.FALSE)","delay = 0;","read();","else","delay = this.readInteger();","if (delay \< 0)","delay = 0;","if (token.tokenType == Tokens.MILLIS)","read();","else","delay *= 1000;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ParserCommand/compileSetRole()|,["if (!e.getDataType().isCharacterType())","throw Error.error(ErrorCode.X_0P000);","if (e.getType() != OpTypes.VALUE","&& (e.getType() != OpTypes.SQL_FUNCTION","|| !((FunctionSQL) e).isValueFunction()))","throw Error.error(ErrorCode.X_0P000);","\n\t.....\n","if (!e.getDataType().isCharacterType())","throw Error.error(ErrorCode.X_0P000);","if (e.getType() != OpTypes.VALUE","&& (e.getType() != OpTypes.SQL_FUNCTION","|| !((FunctionSQL) e).isValueFunction()))","throw Error.error(ErrorCode.X_0P000);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserCommand/compileCommit()|,["if (token.tokenType == Tokens.AND)","read();","if (token.tokenType == Tokens.NO)","read();","else","chain = true;","readThis(Tokens.CHAIN);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserCommand/compileRollback()|,["if (token.tokenType == Tokens.AND)","read();","if (token.tokenType == Tokens.NO)","read();","else","chain = true;","readThis(Tokens.CHAIN);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/ExpressionLogical/describe(org.hsqldb.Session,int)|,["if (getLeftNode() != null)","sb.append(\" arg_left=[\");","sb.append(nodes[LEFT].describe(session, blanks + 1));","sb.append(\']\');","if (getRightNode() != null)","sb.append(\" arg_right=[\");","sb.append(nodes[RIGHT].describe(session, blanks + 1));","sb.append(\']\');","return sb.toString();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/ExpressionArithmetic/describe(org.hsqldb.Session,int)|,["if (getLeftNode() != null)","sb.append(\" arg_left=[\");","sb.append(nodes[LEFT].describe(session, blanks + 1));","sb.append(\']\');","if (getRightNode() != null)","sb.append(\" arg_right=[\");","sb.append(nodes[RIGHT].describe(session, blanks + 1));","sb.append(\']\');","return sb.toString();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/ExpressionOp/describe(org.hsqldb.Session,int)|,["if (getLeftNode() != null)","sb.append(\" arg_left=[\");","sb.append(nodes[LEFT].describe(session, blanks + 1));","sb.append(\']\');","if (getRightNode() != null)","sb.append(\" arg_right=[\");","sb.append(nodes[RIGHT].describe(session, blanks + 1));","sb.append(\']\');","return sb.toString();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ExpressionLogical/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["for (int i = 0; i \< nodes.length; i++)","if (nodes[i] != null)","nodes[i].resolveTypes(session, this);","switch (opType)","case OpTypes.VALUE :","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/ExpressionOp/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["for (int i = 0; i \< nodes.length; i++)","if (nodes[i] != null)","nodes[i].resolveTypes(session, this);","switch (opType)","case OpTypes.VALUE :","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Scanner/scanBinaryStringPart()|,["if (c == \' \')","continue;","if (c == \'\\\'\')","complete = true;","currentPosition++;","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/Scanner/scanBitStringPart(org.hsqldb.map.BitMap)|,["if (c == \' \')","continue;","if (c == \'\\\'\')","complete = true;","currentPosition++;","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Scanner/scanBitStringPart(org.hsqldb.map.BitMap)|,["if (c == \'0\')","bitIndex++;","else if (c == \'1\')","map.set(bitIndex);","bitIndex++;","else","token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;","token.isMalformed = true;","\n\t.....\n"],[<|java+method:///org/hsqldb/Scanner/convertToBit(java.lang.String)|,["if (c == \'0\')","bitIndex++;","else if (c == \'1\')","map.set(bitIndex);","bitIndex++;","else","token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;","token.isMalformed = true;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Scanner/scanUnicodeString()|,["if (c == \'u\' || c == \'U\')","if (scanSpecialIdentifier(Tokens.T_UESCAPE))","scanSeparator();","escape = scanEscapeDefinition();","if (escape == -1)","token.tokenType   = Tokens.X_MALFORMED_UNICODE_ESCAPE;","token.isMalformed = true;","\n\t.....\n"],[<|java+method:///org/hsqldb/Scanner/scanUnicodeIdentifier()|,["if (c == \'u\' || c == \'U\')","if (scanSpecialIdentifier(Tokens.T_UESCAPE))","scanSeparator();","escape = scanEscapeDefinition();","if (escape == -1)","token.tokenType   = Tokens.X_MALFORMED_UNICODE_ESCAPE;","token.isMalformed = true;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Scanner/scanNumber()|,["case \'0\' :","case \'1\' :","case \'2\' :","case \'3\' :","case \'4\' :","case \'5\' :","case \'6\' :","case \'7\' :","case \'8\' :","case \'9\' :","\n\t.....\n"],[<|java+method:///org/hsqldb/Scanner/scanToken()|,["case \'0\' :","case \'1\' :","case \'2\' :","case \'3\' :","case \'4\' :","case \'5\' :","case \'6\' :","case \'7\' :","case \'8\' :","case \'9\' :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/Scanner/scanDateParts(int)|,["for (; currentPart \<= lastPart; )","boolean endOfPart = false;","if (i == intervalString.length())","if (currentPart == lastPart)","endOfPart = true;","else","\n\t.....\n","i++;","else if (character == separators[currentPart])","endOfPart = true;","if (currentPart != lastPart)","i++;","else if (currentPart == lastPart)","endOfPart = true;","else","\n\t.....\n"],[<|java+method:///org/hsqldb/Scanner/scanIntervalValue(org.hsqldb.types.IntervalType)|,["for (; currentPart \<= lastPart; )","boolean endOfPart = false;","if (i == intervalString.length())","if (currentPart == lastPart)","endOfPart = true;","else","\n\t.....\n","i++;","else if (character == separators[currentPart])","endOfPart = true;","if (currentPart != lastPart)","i++;","else if (currentPart == lastPart)","endOfPart = true;","else","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/RangeVariableJoined/describe(org.hsqldb.Session,int)|,["sb = new StringBuffer();","String temp = \"INNER\";","if (isLeftJoin)","temp = \"LEFT OUTER\";","if (isRightJoin)","temp = \"FULL\";","else if (isRightJoin)","temp = \"RIGHT OUTER\";","sb.append(b).append(\"join type=\").append(temp).append(\"\\n\");","sb.append(b).append(\"table=\").append(rangeTable.getName().name).append(","\"\\n\");","if (tableAlias != null)","sb.append(b).append(\"alias=\").append(tableAlias.name).append(\"\\n\");","\n\t.....\n"],[<|java+method:///org/hsqldb/RangeVariable/describe(org.hsqldb.Session,int)|,["sb = new StringBuffer();","String temp = \"INNER\";","if (isLeftJoin)","temp = \"LEFT OUTER\";","if (isRightJoin)","temp = \"FULL\";","else if (isRightJoin)","temp = \"RIGHT OUTER\";","sb.append(b).append(\"join type=\").append(temp).append(\"\\n\");","sb.append(b).append(\"table=\").append(rangeTable.getName().name).append(","\"\\n\");","if (tableAlias != null)","sb.append(b).append(\"alias=\").append(tableAlias.name).append(\"\\n\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDiskLarge/getParent(org.hsqldb.persist.PersistentStore)|,["NodeAVLDiskLarge node = this;","RowAVLDisk  row  = this.row;","if (!row.isInMemory())","row  = (RowAVLDisk) store.get(this.row, false);","node = (NodeAVLDiskLarge) row.getNode(iId);","if (node.iParent == NO_POS)","\n\t.....\n"],[<|java+method:///org/hsqldb/index/NodeAVLDiskLarge/isFromLeft(org.hsqldb.persist.PersistentStore)|,["NodeAVLDiskLarge node = this;","RowAVLDisk  row  = this.row;","if (!row.isInMemory())","row  = (RowAVLDisk) store.get(this.row, false);","node = (NodeAVLDiskLarge) row.getNode(iId);","if (node.iParent == NO_POS)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/NodeAVLDiskLarge/setParent(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["NodeAVLDiskLarge node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDiskLarge) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"],[
    <|java+method:///org/hsqldb/index/NodeAVLDiskLarge/setBalance(org.hsqldb.persist.PersistentStore,int)|,["NodeAVLDiskLarge node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDiskLarge) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/index/NodeAVLDiskLarge/setLeft(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["NodeAVLDiskLarge node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDiskLarge) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/index/NodeAVLDiskLarge/setRight(org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL)|,["NodeAVLDiskLarge node = this;","RowAVLDisk  row  = this.row;","if (!row.keepInMemory(true))","row  = (RowAVLDisk) store.get(this.row, true);","node = (NodeAVLDiskLarge) row.getNode(iId);","if (!row.isInMemory())","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/ParserDML/compileDeleteStatement(org.hsqldb.RangeGroup%5B%5D)|,["HsqlList unresolved = condition.resolveColumnReferences(session,","rangeGroup, rangeGroups, null);","ExpressionColumn.checkColumnsResolved(unresolved);","condition.resolveTypes(session, null);","if (condition.isUnresolvedParam())","condition.dataType = Type.SQL_BOOLEAN;","if (condition.getDataType() != Type.SQL_BOOLEAN)","throw Error.error(ErrorCode.X_42568);","\n\t.....\n","ExpressionLogical.andExpressions(baseSelect.queryCondition,","condition);","rangeVariables = baseSelect.rangeVariables;","if (condition != null)","rangeVariables[0].addJoinCondition(condition);","RangeVariableResolver resolver =","new RangeVariableResolver(rangeVariables, null,","compileContext, false);","resolver.processConditions(session);","rangeVariables = resolver.rangeVariables;","for (int i = 0; i \< rangeVariables.length; i++)","rangeVariables[i].resolveRangeTableTypes(session,","RangeVariable.emptyArray);","\n\t.....\n"],[<|java+method:///org/hsqldb/ParserDML/compileUpdateStatement(org.hsqldb.RangeGroup%5B%5D)|,["HsqlList unresolved = condition.resolveColumnReferences(session,","rangeGroup, rangeGroups, null);","ExpressionColumn.checkColumnsResolved(unresolved);","condition.resolveTypes(session, null);","if (condition.isUnresolvedParam())","condition.dataType = Type.SQL_BOOLEAN;","if (condition.getDataType() != Type.SQL_BOOLEAN)","throw Error.error(ErrorCode.X_42568);","\n\t.....\n","ExpressionLogical.andExpressions(baseSelect.queryCondition,","condition);","rangeVariables = baseSelect.rangeVariables;","if (condition != null)","rangeVariables[0].addJoinCondition(condition);","RangeVariableResolver resolver =","new RangeVariableResolver(rangeVariables, null,","compileContext, false);","resolver.processConditions(session);","rangeVariables = resolver.rangeVariables;","for (int i = 0; i \< rangeVariables.length; i++)","rangeVariables[i].resolveRangeTableTypes(session,","RangeVariable.emptyArray);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/RefCapablePropertyResourceBundle/getExpandedString(java.lang.String,int)|,["case EMPTYSTRING_BEHAVIOR:","varValue = \"\";","break;","case NOOP_BEHAVIOR:","break;","default:","throw new RuntimeException(","\"Undefined value for behavior: \" + behavior);","sb.append(s.substring(previousEnd, matcher.start())","+ ((varValue == null) ? matcher.group() : varValue));","previousEnd = matcher.end();","return (previousEnd \< 1) ? s",": (sb.toString() + s.substring(previousEnd));","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/RefCapablePropertyResourceBundle/posSubst(java.lang.String,java.lang.String%5B%5D,int)|,["case EMPTYSTRING_BEHAVIOR:","varValue = \"\";","break;","case NOOP_BEHAVIOR:","break;","default:","throw new RuntimeException(","\"Undefined value for behavior: \" + behavior);","sb.append(s.substring(previousEnd, matcher.start())","+ ((varValue == null) ? matcher.group() : varValue));","previousEnd = matcher.end();","return (previousEnd \< 1) ? s",": (sb.toString() + s.substring(previousEnd));","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementCompound/executeBlock(org.hsqldb.Session)|,["for (int i = 0; i \< statements.length; i++)","result = executeProtected(session, statements[i]);","result = handleCondition(session, result);","if (result.isError())","break;","if (result.getType() == ResultConstants.VALUE)","break;","if (result.getType() == ResultConstants.DATA)","break;","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementCompound/executeForLoop(org.hsqldb.Session)|,["for (int i = 0; i \< statements.length; i++)","result = executeProtected(session, statements[i]);","result = handleCondition(session, result);","if (result.isError())","break;","if (result.getType() == ResultConstants.VALUE)","break;","if (result.getType() == ResultConstants.DATA)","break;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementCompound/executeForLoop(org.hsqldb.Session)|,["if (result.isError())","break;","if (result.getType() == ResultConstants.VALUE)","if (result.getErrorCode() == StatementTypes.ITERATE)","if (result.getMainString() == null)","continue;","if (label != null","&& label.name.equals(result.getMainString()))","continue;","break;","if (result.getErrorCode() == StatementTypes.LEAVE)","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementCompound/executeLoop(org.hsqldb.Session)|,["if (result.isError())","break;","if (result.getType() == ResultConstants.VALUE)","if (result.getErrorCode() == StatementTypes.ITERATE)","if (result.getMainString() == null)","continue;","if (label != null","&& label.name.equals(result.getMainString()))","continue;","break;","if (result.getErrorCode() == StatementTypes.LEAVE)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManager2PL/commitTransaction(org.hsqldb.Session)|,["public boolean commitTransaction(Session session)","if (session.abortTransaction)","return false;","writeLock.lock();","try","int limit = session.rowActionList.size();","session.actionTimestamp         = getNextGlobalChangeTimestamp();","session.transactionEndTimestamp = session.actionTimestamp;","endTransaction(session);","for (int i = 0; i \< limit; i++)","RowAction action = (RowAction) session.rowActionList.get(i);","action.commit(session);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/commitTransaction(org.hsqldb.Session)|,["public boolean commitTransaction(Session session)","if (session.abortTransaction)","return false;","writeLock.lock();","try","int limit = session.rowActionList.size();","session.actionTimestamp         = getNextGlobalChangeTimestamp();","session.transactionEndTimestamp = session.actionTimestamp;","endTransaction(session);","for (int i = 0; i \< limit; i++)","RowAction action = (RowAction) session.rowActionList.get(i);","action.commit(session);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManager2PL/addInsertAction(org.hsqldb.Session,org.hsqldb.Table,org.hsqldb.persist.PersistentStore,org.hsqldb.Row,int%5B%5D)|,["public void addInsertAction(Session session, Table table,","PersistentStore store, Row row,","int[] changedColumns)","RowAction action = row.rowAction;","if (action == null)","System.out.println(\"null insert action \" + session + \" \"","+ session.actionTimestamp);","throw Error.runtimeError(ErrorCode.GENERAL_ERROR,","\"null insert action \");","store.indexRow(session, row);","session.rowActionList.add(action);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/addInsertAction(org.hsqldb.Session,org.hsqldb.Table,org.hsqldb.persist.PersistentStore,org.hsqldb.Row,int%5B%5D)|,["public void addInsertAction(Session session, Table table,","PersistentStore store, Row row,","int[] changedColumns)","RowAction action = row.rowAction;","if (action == null)","System.out.println(\"null insert action \" + session + \" \"","+ session.actionTimestamp);","throw Error.runtimeError(ErrorCode.GENERAL_ERROR,","\"null insert action \");","store.indexRow(session, row);","session.rowActionList.add(action);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/TransactionManager2PL/beginAction(org.hsqldb.Session,org.hsqldb.Statement)|,["public void beginAction(Session session, Statement cs)","if (session.hasLocks(cs))","boolean canProceed = setWaitedSessionsTPL(session, cs);","if (canProceed)","if (session.tempSet.isEmpty())","lockTablesTPL(session, cs);","else","setWaitingSessionTPL(session);","\n\t.....\n"],[<|java+method:///org/hsqldb/TransactionManagerMV2PL/beginAction(org.hsqldb.Session,org.hsqldb.Statement)|,["public void beginAction(Session session, Statement cs)","if (session.hasLocks(cs))","boolean canProceed = setWaitedSessionsTPL(session, cs);","if (canProceed)","if (session.tempSet.isEmpty())","lockTablesTPL(session, cs);","else","setWaitingSessionTPL(session);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/navigator/RowSetNavigatorData/intersectAll(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["Object[]    compareData = null;","RowIterator it;","Object[]    otherData = null;","sortFull(session);","other.sortFull(session);","it = queryExpression.fullIndex.emptyIterator();","while (hasNext())","Object[] currentData = getNext();","boolean newGroup =","compareData == null","|| queryExpression.fullIndex.compareRowNonUnique(","session, currentData, compareData,","\n\t.....\n","if (newGroup)","compareData = currentData;","it          = other.findFirstRow(currentData);","otherData = it.getNext();","if (otherData != null","&& queryExpression.fullIndex.compareRowNonUnique(","session, currentData, otherData,","\n\t.....\n"],[<|java+method:///org/hsqldb/navigator/RowSetNavigatorData/exceptAll(org.hsqldb.Session,org.hsqldb.navigator.RowSetNavigatorData)|,["Object[]    compareData = null;","RowIterator it;","Object[]    otherData = null;","sortFull(session);","other.sortFull(session);","it = queryExpression.fullIndex.emptyIterator();","while (hasNext())","Object[] currentData = getNext();","boolean newGroup =","compareData == null","|| queryExpression.fullIndex.compareRowNonUnique(","session, currentData, compareData,","\n\t.....\n","if (newGroup)","compareData = currentData;","it          = other.findFirstRow(currentData);","otherData = it.getNext();","if (otherData != null","&& queryExpression.fullIndex.compareRowNonUnique(","session, currentData, otherData,","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/rights/Grantee/getAllDirectPrivileges(org.hsqldb.SchemaObject)|,["if (rights.hasNext())","OrderedHashSet set = new OrderedHashSet();","while (rights.hasNext())","set.add(rights.next());","return set;","return Right.emptySet;","\n\t.....\n"],[<|java+method:///org/hsqldb/rights/Grantee/getAllGrantedPrivileges(org.hsqldb.SchemaObject)|,["if (rights.hasNext())","OrderedHashSet set = new OrderedHashSet();","while (rights.hasNext())","set.add(rights.next());","return set;","return Right.emptySet;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/rights/Grantee/checkReferences(org.hsqldb.SchemaObject,boolean%5B%5D)|,["if (object instanceof Table)","Table table = (Table) object;","if (isFullyAccessibleByRole(table.getName()))","return;","Right right = (Right) fullRightsMap.get(table.getName());","if (right != null && right.canReference(table, checkList))","return;","throw Error.error(ErrorCode.X_42501, object.getName().name);","\n\t.....\n"],[<|java+method:///org/hsqldb/rights/Grantee/checkTrigger(org.hsqldb.SchemaObject,boolean%5B%5D)|,["if (object instanceof Table)","Table table = (Table) object;","if (isFullyAccessibleByRole(table.getName()))","return;","Right right = (Right) fullRightsMap.get(table.getName());","if (right != null && right.canReference(table, checkList))","return;","throw Error.error(ErrorCode.X_42501, object.getName().name);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/rights/Grantee/addToFullRights(org.hsqldb.lib.HashMap)|,["if (existing == null)","existing = add.duplicate();","fullRightsMap.put(key, existing);","else","existing.add(add);","if (add.grantableRights == null)","continue;","if (existing.grantableRights == null)","existing.grantableRights = add.grantableRights.duplicate();","else","existing.grantableRights.add(add.grantableRights);","\n\t.....\n"],[<|java+method:///org/hsqldb/rights/Grantee/addToFullRights(org.hsqldb.lib.MultiValueHashMap)|,["if (existing == null)","existing = add.duplicate();","fullRightsMap.put(key, existing);","else","existing.add(add);","if (add.grantableRights == null)","continue;","if (existing.grantableRights == null)","existing.grantableRights = add.grantableRights.duplicate();","else","existing.grantableRights.add(add.grantableRights);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/FunctionCustom/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["public void resolveTypes(Session session, Expression parent)","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] != null)","nodes[i].resolveTypes(session, this);","switch (funcType)","case FUNC_POSITION_CHAR :","\n\t.....\n"],[<|java+method:///org/hsqldb/FunctionSQL/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["public void resolveTypes(Session session, Expression parent)","for (int i = 0; i \< nodes.length; i++)","if (nodes[i] != null)","nodes[i].resolveTypes(session, this);","switch (funcType)","case FUNC_POSITION_CHAR :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCDatabaseMetaData/getVersionColumns(java.lang.String,java.lang.String,java.lang.String)|,["String table) throws SQLException","if (table == null)","throw JDBCUtil.nullArgument(\"table\");","catalog = translateCatalog(catalog);","schema  = translateSchema(schema);","StringBuffer select =","\n\t.....\n"],[
    <|java+method:///org/hsqldb/jdbc/JDBCDatabaseMetaData/getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)|,["String table) throws SQLException","if (table == null)","throw JDBCUtil.nullArgument(\"table\");","catalog = translateCatalog(catalog);","schema  = translateSchema(schema);","StringBuffer select =","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/jdbc/JDBCDatabaseMetaData/getExportedKeys(java.lang.String,java.lang.String,java.lang.String)|,["String table) throws SQLException","if (table == null)","throw JDBCUtil.nullArgument(\"table\");","catalog = translateCatalog(catalog);","schema  = translateSchema(schema);","StringBuffer select =","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/util/preprocessor/Defines/defineSingle(java.lang.String)|,["if (!tokenizer.isToken(Token.EOI))","throw new PreprocessorException(\"Illegal trailing \"","+ \"characters at position: \"","+ tokenizer.getStartIndex()","+ \" in [\"","+ expression","+ \"]\"); // NOI18N","\n\t.....\n"],[<|java+method:///org/hsqldb/util/preprocessor/Defines/evaluate(java.lang.String)|,["if (!tokenizer.isToken(Token.EOI))","throw new PreprocessorException(\"Illegal trailing \"","+ \"characters at position: \"","+ tokenizer.getStartIndex()","+ \" in [\"","+ expression","+ \"]\"); // NOI18N","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/Crypto/decode(byte%5B%5D,int,int,byte%5B%5D,int)|,["destOffset);","catch (java.security.InvalidKeyException e)","throw Error.error(ErrorCode.X_S0531, e);","catch (BadPaddingException e)","throw Error.error(ErrorCode.X_S0531, e);","catch (IllegalBlockSizeException e)","throw Error.error(ErrorCode.X_S0531, e);","catch (ShortBufferException e)","throw Error.error(ErrorCode.X_S0531, e);","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/Crypto/encode(byte%5B%5D,int,int,byte%5B%5D,int)|,["destOffset);","catch (java.security.InvalidKeyException e)","throw Error.error(ErrorCode.X_S0531, e);","catch (BadPaddingException e)","throw Error.error(ErrorCode.X_S0531, e);","catch (IllegalBlockSizeException e)","throw Error.error(ErrorCode.X_S0531, e);","catch (ShortBufferException e)","throw Error.error(ErrorCode.X_S0531, e);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementCommand/execute(org.hsqldb.Session)|,["try","if (isLogged)","session.database.logger.writeOtherStatement(session, sql);","catch (Throwable e)","return Result.newErrorResult(e, sql);","return result;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/StatementSchema/execute(org.hsqldb.Session)|,["try","if (isLogged)","session.database.logger.writeOtherStatement(session, sql);","catch (Throwable e)","return Result.newErrorResult(e, sql);","return result;","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/StatementSession/execute(org.hsqldb.Session)|,["try","if (isLogged)","session.database.logger.writeOtherStatement(session, sql);","catch (Throwable e)","return Result.newErrorResult(e, sql);","return result;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/NumberSequence/setDefaults(org.hsqldb.HsqlNameManager.HsqlName,org.hsqldb.types.Type)|,["long min;","long max;","switch (dataType.typeCode)","case Types.TINYINT :","max = Byte.MAX_VALUE;","min = Byte.MIN_VALUE;","break;","case Types.SQL_SMALLINT :","max = Short.MAX_VALUE;","min = Short.MIN_VALUE;","break;","case Types.SQL_INTEGER :","max = Integer.MAX_VALUE;","min = Integer.MIN_VALUE;","break;","case Types.SQL_BIGINT :","max = Long.MAX_VALUE;","min = Long.MIN_VALUE;","break;","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"],[
    <|java+method:///org/hsqldb/NumberSequence/hasDefaultMinMax()|,["long min;","long max;","switch (dataType.typeCode)","case Types.TINYINT :","max = Byte.MAX_VALUE;","min = Byte.MIN_VALUE;","break;","case Types.SQL_SMALLINT :","max = Short.MAX_VALUE;","min = Short.MIN_VALUE;","break;","case Types.SQL_INTEGER :","max = Integer.MAX_VALUE;","min = Integer.MIN_VALUE;","break;","case Types.SQL_BIGINT :","max = Long.MAX_VALUE;","min = Long.MIN_VALUE;","break;","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/NumberSequence/getDefaultMinOrMax(boolean)|,["long min;","long max;","switch (dataType.typeCode)","case Types.TINYINT :","max = Byte.MAX_VALUE;","min = Byte.MIN_VALUE;","break;","case Types.SQL_SMALLINT :","max = Short.MAX_VALUE;","min = Short.MIN_VALUE;","break;","case Types.SQL_INTEGER :","max = Integer.MAX_VALUE;","min = Integer.MIN_VALUE;","break;","case Types.SQL_BIGINT :","max = Long.MAX_VALUE;","min = Long.MIN_VALUE;","break;","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/NumberSequence/checkInTypeRange(long)|,["long min;","long max;","switch (dataType.typeCode)","case Types.TINYINT :","max = Byte.MAX_VALUE;","min = Byte.MIN_VALUE;","break;","case Types.SQL_SMALLINT :","max = Short.MAX_VALUE;","min = Short.MIN_VALUE;","break;","case Types.SQL_INTEGER :","max = Integer.MAX_VALUE;","min = Integer.MIN_VALUE;","break;","case Types.SQL_BIGINT :","max = Long.MAX_VALUE;","min = Long.MIN_VALUE;","break;","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/NumberSequence/getSQL()|,["sb.append(Tokens.T_START).append(\' \');","sb.append(Tokens.T_WITH).append(\' \');","sb.append(startValue);","if (getIncrement() != 1)","sb.append(\' \').append(Tokens.T_INCREMENT).append(\' \');","sb.append(Tokens.T_BY).append(\' \');","sb.append(getIncrement());","if (!hasDefaultMinMax())","sb.append(\' \').append(Tokens.T_MINVALUE).append(\' \');","sb.append(getMinValue());","sb.append(\' \').append(Tokens.T_MAXVALUE).append(\' \');","sb.append(getMaxValue());","if (isCycle())","sb.append(\' \').append(Tokens.T_CYCLE);","if (name == null)","sb.append(Tokens.T_CLOSEBRACKET);","\n\t.....\n"],[<|java+method:///org/hsqldb/NumberSequence/getSQLColumnDefinition()|,["sb.append(Tokens.T_START).append(\' \');","sb.append(Tokens.T_WITH).append(\' \');","sb.append(startValue);","if (getIncrement() != 1)","sb.append(\' \').append(Tokens.T_INCREMENT).append(\' \');","sb.append(Tokens.T_BY).append(\' \');","sb.append(getIncrement());","if (!hasDefaultMinMax())","sb.append(\' \').append(Tokens.T_MINVALUE).append(\' \');","sb.append(getMinValue());","sb.append(\' \').append(Tokens.T_MAXVALUE).append(\' \');","sb.append(getMaxValue());","if (isCycle())","sb.append(\' \').append(Tokens.T_CYCLE);","if (name == null)","sb.append(Tokens.T_CLOSEBRACKET);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/RangeVariable/addTableColumns(org.hsqldb.lib.HsqlArrayList,int,org.hsqldb.lib.HashSet)|,["ColumnSchema column = table.getColumn(i);","String columnName = columnAliases == null ? column.getName().name",": (String) columnAliases",".get(i);","if (exclude != null && exclude.contains(columnName))","continue;","Expression e = new ExpressionColumn(this, i);","\n\t.....\n"],[<|java+method:///org/hsqldb/RangeVariable/addTableColumns(org.hsqldb.Expression,int,int,org.hsqldb.lib.HashSet)|,["ColumnSchema column = table.getColumn(i);","String columnName = columnAliases == null ? column.getName().name",": (String) columnAliases",".get(i);","if (exclude != null && exclude.contains(columnName))","continue;","Expression e = new ExpressionColumn(this, i);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/RangeVariable/RangeIteratorMain/findNext()|,["boolean result = false;","while (true)","currentRow = it.getNextRow();","if (currentRow == null)","break;","currentData = currentRow.getData();","\n\t.....\n"],[<|java+method:///org/hsqldb/RangeVariable/RangeIteratorRight/findNextRight()|,["boolean result = false;","while (true)","currentRow = it.getNextRow();","if (currentRow == null)","break;","currentData = currentRow.getData();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/DataFileCache/open(boolean)|,["preexists = restoreBackupIncremental();","else","preexists = restoreBackup();","dataFile = RAFile.newScaledRAFile(database, dataFileName,","readonly, fileType);","if (preexists)","\n\t.....\n","openShadowFile();","else","initNewFile();","initBuffers();","fileModified  = false;","cacheModified = false;","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/DataFileCache/openStoredFileAccess(boolean)|,["preexists = restoreBackupIncremental();","else","preexists = restoreBackup();","dataFile = RAFile.newScaledRAFile(database, dataFileName,","readonly, fileType);","if (preexists)","\n\t.....\n","openShadowFile();","else","initNewFile();","initBuffers();","fileModified  = false;","cacheModified = false;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/DataFileCache/get(org.hsqldb.persist.CachedObject,org.hsqldb.persist.PersistentStore,boolean)|,["if (object != null)","if (keep)","object.keepInMemory(true);","return object;","finally","readLock.unlock();","\n\t.....\n","if (object != null)","if (keep)","object.keepInMemory(true);","return object;","finally","readLock.unlock();","return getFromFile(pos, store, keep);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/persist/DataFileCache/get(long,int,org.hsqldb.persist.PersistentStore,boolean)|,["if (object != null)","if (keep)","object.keepInMemory(true);","return object;","finally","readLock.unlock();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/persist/DataFileCache/get(long,org.hsqldb.persist.PersistentStore,boolean)|,["if (object != null)","if (keep)","object.keepInMemory(true);","return object;","finally","readLock.unlock();","return getFromFile(pos, store, keep);","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/persist/DataFileCache/get(long,int,org.hsqldb.persist.PersistentStore,boolean)|,["CachedObject object;","if (pos \< 0)","return null;","readLock.lock();","try","object = cache.get(pos);","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/DataFileCache/get(long,org.hsqldb.persist.PersistentStore,boolean)|,["CachedObject object;","if (pos \< 0)","return null;","readLock.lock();","try","object = cache.get(pos);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/persist/DataFileCache/getFromFile(long,org.hsqldb.persist.PersistentStore,boolean)|,["CachedObject object = null;","writeLock.lock();","try","object = cache.get(pos);","if (object != null)","if (keep)","object.keepInMemory(true);","return object;","for (int j = 0; j \< 2; j++)","try","\n\t.....\n","cache.put(object);","if (keep)","object.keepInMemory(true);","store.set(object);","return object;","catch (HsqlException e)","logSevereEvent(dataFileName + \" getFromFile failed \" + pos, e);","throw e;","finally","writeLock.unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/DataFileCache/getFromFile(long,int,org.hsqldb.persist.PersistentStore,boolean)|,["CachedObject object = null;","writeLock.lock();","try","object = cache.get(pos);","if (object != null)","if (keep)","object.keepInMemory(true);","return object;","for (int j = 0; j \< 2; j++)","try","\n\t.....\n","cache.put(object);","if (keep)","object.keepInMemory(true);","store.set(object);","return object;","catch (HsqlException e)","logSevereEvent(dataFileName + \" getFromFile failed \" + pos, e);","throw e;","finally","writeLock.unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/util/OracleTransferHelper/fixupColumnDefWrite(org.hsqldb.util.TransferTable,java.sql.ResultSetMetaData,java.lang.String,java.sql.ResultSet,int)|,["String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,","String columnType, ResultSet columnDesc,","int columnIndex) throws SQLException","if (columnType.equals(\"SERIAL\"))","String SeqName = new String(\"_\" + columnDesc.getString(4)","+ \"_seq\");","int spaceleft = 31 - SeqName.length();","if (t.Stmts.sDestTable.length() \> spaceleft)","SeqName = t.Stmts.sDestTable.substring(0, spaceleft)","+ SeqName;","else","SeqName = t.Stmts.sDestTable + SeqName;","String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";","t.Stmts.sDestDrop += DropSequence;","for (int Idx = 0; Idx \< Funcs.length; Idx++)","String HSQLDB_func = Funcs[Idx][HSQLDB];","int    iStartPos   = columnType.indexOf(HSQLDB_func);","if (iStartPos \>= 0)","String NewColumnType = columnType.substring(0, iStartPos);","\n\t.....\n"],[<|java+method:///org/hsqldb/util/PostgresTransferHelper/fixupColumnDefWrite(org.hsqldb.util.TransferTable,java.sql.ResultSetMetaData,java.lang.String,java.sql.ResultSet,int)|,["String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,","String columnType, ResultSet columnDesc,","int columnIndex) throws SQLException","if (columnType.equals(\"SERIAL\"))","String SeqName = new String(\"_\" + columnDesc.getString(4)","+ \"_seq\");","int spaceleft = 31 - SeqName.length();","if (t.Stmts.sDestTable.length() \> spaceleft)","SeqName = t.Stmts.sDestTable.substring(0, spaceleft)","+ SeqName;","else","SeqName = t.Stmts.sDestTable + SeqName;","String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";","t.Stmts.sDestDrop += DropSequence;","for (int Idx = 0; Idx \< Funcs.length; Idx++)","String HSQLDB_func = Funcs[Idx][HSQLDB];","int    iStartPos   = columnType.indexOf(HSQLDB_func);","if (iStartPos \>= 0)","String NewColumnType = columnType.substring(0, iStartPos);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SchemaManager/getSchemaObjectSet(org.hsqldb.Schema,int)|,["break;","case SchemaObject.INDEX :","set = schema.indexLookup;","break;","case SchemaObject.CONSTRAINT :","set = schema.constraintLookup;","\n\t.....\n"],[<|java+method:///org/hsqldb/SchemaManager/removeSchemaObject(org.hsqldb.HsqlNameManager.HsqlName)|,["break;","case SchemaObject.INDEX :","set = schema.indexLookup;","break;","case SchemaObject.CONSTRAINT :","set = schema.constraintLookup;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SchemaManager/recompileDependentObjects(org.hsqldb.lib.OrderedHashSet)|,["Session session = database.sessionManager.getSysSession();","for (int i = 0; i \< set.size(); i++)","HsqlName name = (HsqlName) set.get(i);","switch (name.type)","case SchemaObject.VIEW :","case SchemaObject.CONSTRAINT :","case SchemaObject.ASSERTION :","case SchemaObject.ROUTINE :","case SchemaObject.PROCEDURE :","case SchemaObject.FUNCTION :","case SchemaObject.SPECIFIC_ROUTINE :","SchemaObject object = getSchemaObject(name);","object.compile(session, null);","break;","if (Error.TRACE)","HsqlArrayList list = getAllTables(false);","for (int i = 0; i \< list.size(); i++)","Table t = (Table) list.get(i);","t.verifyConstraintsIntegrity();","finally","writeLock.unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/SchemaManager/recompileDependentObjects(org.hsqldb.Table)|,["Session session = database.sessionManager.getSysSession();","for (int i = 0; i \< set.size(); i++)","HsqlName name = (HsqlName) set.get(i);","switch (name.type)","case SchemaObject.VIEW :","case SchemaObject.CONSTRAINT :","case SchemaObject.ASSERTION :","case SchemaObject.ROUTINE :","case SchemaObject.PROCEDURE :","case SchemaObject.FUNCTION :","case SchemaObject.SPECIFIC_ROUTINE :","SchemaObject object = getSchemaObject(name);","object.compile(session, null);","break;","if (Error.TRACE)","HsqlArrayList list = getAllTables(false);","for (int i = 0; i \< list.size(); i++)","Table t = (Table) list.get(i);","t.verifyConstraintsIntegrity();","finally","writeLock.unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SchemaManager/getUserDefinedType(java.lang.String,java.lang.String,boolean)|,["readLock.lock();","try","Schema schema = (Schema) schemaMap.get(schemaName);","if (schema != null)","SchemaObject object = schema.typeLookup.getObject(name);","if (object != null)","return (Type) object;","if (raise)","throw Error.error(ErrorCode.X_42501, name);","return null;","finally","readLock.unlock();","\n\t.....\n","boolean raise)","readLock.lock();","try","Schema schema = (Schema) schemaMap.get(schemaName);","if (schema != null)","SchemaObject object = schema.typeLookup.getObject(name);","\n\t.....\n"],[
    <|java+method:///org/hsqldb/SchemaManager/getDomainOrUDT(java.lang.String,java.lang.String,boolean)|,["readLock.lock();","try","Schema schema = (Schema) schemaMap.get(schemaName);","if (schema != null)","SchemaObject object = schema.typeLookup.getObject(name);","if (object != null)","return (Type) object;","if (raise)","throw Error.error(ErrorCode.X_42501, name);","return null;","finally","readLock.unlock();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/SchemaManager/getDomain(java.lang.String,java.lang.String,boolean)|,["return (Type) object;","if (raise)","throw Error.error(ErrorCode.X_42501, name);","return null;","finally","readLock.unlock();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/SchemaManager/getDistinctType(java.lang.String,java.lang.String,boolean)|,["boolean raise)","readLock.lock();","try","Schema schema = (Schema) schemaMap.get(schemaName);","if (schema != null)","SchemaObject object = schema.typeLookup.getObject(name);","\n\t.....\n","return (Type) object;","if (raise)","throw Error.error(ErrorCode.X_42501, name);","return null;","finally","readLock.unlock();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/SchemaManager/addReferencesFrom(org.hsqldb.SchemaObject)|,["if (set == null)","return;","for (int i = 0; i \< set.size(); i++)","HsqlName referenced = (HsqlName) set.get(i);","if (object instanceof Routine)","name = ((Routine) object).getSpecificName();","\n\t.....\n"],[<|java+method:///org/hsqldb/SchemaManager/removeReferencesFrom(org.hsqldb.SchemaObject)|,["if (set == null)","return;","for (int i = 0; i \< set.size(); i++)","HsqlName referenced = (HsqlName) set.get(i);","if (object instanceof Routine)","name = ((Routine) object).getSpecificName();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SchemaManager/getSQLArray()|,["list.add(sb.toString());","String[] array = new String[list.size()];","list.toArray(array);","return array;","finally","readLock.unlock();","\n\t.....\n"],[<|java+method:///org/hsqldb/SchemaManager/getCommentsArray()|,["list.add(sb.toString());","String[] array = new String[list.size()];","list.toArray(array);","return array;","finally","readLock.unlock();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/SchemaManager/getTablePropsSQL(boolean)|,["readLock.lock();","try","HsqlArrayList tableList = getAllTables(false);","HsqlArrayList list      = new HsqlArrayList();","for (int i = 0; i \< tableList.size(); i++)","Table t = (Table) tableList.get(i);","\n\t.....\n","if (ddl != null)","list.add(ddl);","String[] array = new String[list.size()];","list.toArray(array);","return array;","finally","readLock.unlock();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/SchemaManager/getTableSpaceSQL()|,["readLock.lock();","try","HsqlArrayList tableList = getAllTables(false);","HsqlArrayList list      = new HsqlArrayList();","for (int i = 0; i \< tableList.size(); i++)","Table t = (Table) tableList.get(i);","\n\t.....\n","if (ddl != null)","list.add(ddl);","String[] array = new String[list.size()];","list.toArray(array);","return array;","finally","readLock.unlock();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/SchemaManager/getIndexRootsSQL()|,["list.add(ddl);","String[] array = new String[list.size()];","list.toArray(array);","return array;","finally","readLock.unlock();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/types/CharacterType/convertToTypeLimits(org.hsqldb.SessionInterface,java.lang.Object)|,["char[] b = new char[(int) precision];","((String) a).getChars(0, slen, b, 0);","for (int i = slen; i \< precision; i++)","b[i] = \' \';","return new String(b);","case Types.SQL_VARCHAR :","\n\t.....\n"],[<|java+method:///org/hsqldb/types/CharacterType/convertToString(java.lang.Object)|,["char[] b = new char[(int) precision];","((String) a).getChars(0, slen, b, 0);","for (int i = slen; i \< precision; i++)","b[i] = \' \';","return new String(b);","case Types.SQL_VARCHAR :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/IndexAVL/compareRow(org.hsqldb.Session,java.lang.Object%5B%5D,java.lang.Object%5B%5D)|,["int i = colTypes[j].compare(session, a[colIndex[j]],","b[colIndex[j]]);","if (i != 0)","if (isSimpleOrder)","return i;","boolean nulls = a[colIndex[j]] == null","|| b[colIndex[j]] == null;","if (colDesc[j] && !nulls)","i = -i;","if (nullsLast[j] && nulls)","i = -i;","return i;","\n\t.....\n"],[<|java+method:///org/hsqldb/index/IndexAVL/compareRowForInsertOrDelete(org.hsqldb.Session,org.hsqldb.Row,org.hsqldb.Row,boolean,int)|,["int i = colTypes[j].compare(session, a[colIndex[j]],","b[colIndex[j]]);","if (i != 0)","if (isSimpleOrder)","return i;","boolean nulls = a[colIndex[j]] == null","|| b[colIndex[j]] == null;","if (colDesc[j] && !nulls)","i = -i;","if (nullsLast[j] && nulls)","i = -i;","return i;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/IndexAVL/firstRow(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,int)|,["readLock.lock();","try","NodeAVL x = getAccessor(store);","NodeAVL l = x;","while (l != null)","x = l;","l = x.getLeft(store);","\n\t.....\n","int distinctCount)","readLock.lock();","try","NodeAVL x = getAccessor(store);","NodeAVL l = x;","while (l != null)","x = l;","\n\t.....\n","while (session != null && x != null)","Row row = x.getRow(store);","if (session.database.txManager.canRead(","session, store, row, TransactionManager.ACTION_READ,","null))","break;","\n\t.....\n"],[
    <|java+method:///org/hsqldb/index/IndexAVL/firstRow(org.hsqldb.persist.PersistentStore)|,["readLock.lock();","try","NodeAVL x = getAccessor(store);","NodeAVL l = x;","while (l != null)","x = l;","l = x.getLeft(store);","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/index/IndexAVL/lastRow(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,int)|,["int distinctCount)","readLock.lock();","try","NodeAVL x = getAccessor(store);","NodeAVL l = x;","while (l != null)","x = l;","\n\t.....\n","while (session != null && x != null)","Row row = x.getRow(store);","if (session.database.txManager.canRead(","session, store, row, TransactionManager.ACTION_READ,","null))","break;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/index/IndexAVL/next(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL,int)|,["if (x == null)","return x;","if (session == null)","return x;","Row row = x.getRow(store);","if (session.database.txManager.canRead(","session, store, row, TransactionManager.ACTION_READ,","null))","return x;","\n\t.....\n"],[<|java+method:///org/hsqldb/index/IndexAVL/last(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL,int)|,["if (x == null)","return x;","if (session == null)","return x;","Row row = x.getRow(store);","if (session.database.txManager.canRead(","session, store, row, TransactionManager.ACTION_READ,","null))","return x;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/index/IndexAVL/findNode(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,java.lang.Object%5B%5D,int%5B%5D,int,int,int,boolean)|,["break;","x = n;","if (session == null)","return result;","while (result != null)","currentRow = result.getRow(store);","\n\t.....\n"],[<|java+method:///org/hsqldb/index/IndexAVL/findDistinctNode(org.hsqldb.Session,org.hsqldb.persist.PersistentStore,org.hsqldb.index.NodeAVL,int,boolean)|,["break;","x = n;","if (session == null)","return result;","while (result != null)","currentRow = result.getRow(store);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/tar/TarReader/getPifData(org.hsqldb.lib.tar.TarReader.TarEntryHeader)|,["while (readBlocks \> 0)","readNow = (readBlocks \> archive.getReadBufferBlocks())","? archive.getReadBufferBlocks()",": readBlocks;","archive.readBlocks(readNow);","readBlocks -= readNow;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/tar/TarReader/extractFile(org.hsqldb.lib.tar.TarReader.TarEntryHeader)|,["while (readBlocks \> 0)","readNow = (readBlocks \> archive.getReadBufferBlocks())","? archive.getReadBufferBlocks()",": readBlocks;","archive.readBlocks(readNow);","readBlocks -= readNow;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/Type/getDefaultTypeWithSize(int)|,["case Types.SQL_INTEGER :","return SQL_INTEGER;","case Types.SQL_SMALLINT :","return SQL_SMALLINT;","case Types.SQL_BIGINT :","return SQL_BIGINT;","case Types.TINYINT :","return TINYINT;","case Types.SQL_FLOAT :","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/Type/getType(int,org.hsqldb.types.Charset,org.hsqldb.types.Collation,long,int)|,["case Types.SQL_INTEGER :","return SQL_INTEGER;","case Types.SQL_SMALLINT :","return SQL_SMALLINT;","case Types.SQL_BIGINT :","return SQL_BIGINT;","case Types.TINYINT :","return TINYINT;","case Types.SQL_FLOAT :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/NumberType/getNumberType(int,long,int)|,["case Types.SQL_INTEGER :","return SQL_INTEGER;","case Types.SQL_SMALLINT :","return SQL_SMALLINT;","case Types.SQL_BIGINT :","return SQL_BIGINT;","case Types.TINYINT :","return TINYINT;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/cmdline/SqlFile/processSpecial(java.lang.String)|,["if (rs != null) try","rs.close();","catch (SQLException se)","finally","rs = null;","if (st != null) try","st.close();","catch (SQLException se)","finally","st = null;","\n\t.....\n"],[<|java+method:///org/hsqldb/cmdline/SqlFile/getCurrentSchema()|,["if (rs != null) try","rs.close();","catch (SQLException se)","finally","rs = null;","if (st != null) try","st.close();","catch (SQLException se)","finally","st = null;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/cmdline/SqlFile/processBlock(org.hsqldb.cmdline.sqltool.Token)|,["if (!m.matches())","throw new BadSpecial(SqltoolRB.pl_malformat.getString());","if (m.groupCount() \< 1 || m.group(1) == null)","stdprintln(SqltoolRB.deprecated_noop.getString(\"*\"));","return;","String[] tokens = m.group(1).split(\"\\\\s+\", -1);","\n\t.....\n"],[<|java+method:///org/hsqldb/cmdline/SqlFile/processPL()|,["if (!m.matches())","throw new BadSpecial(SqltoolRB.pl_malformat.getString());","if (m.groupCount() \< 1 || m.group(1) == null)","stdprintln(SqltoolRB.deprecated_noop.getString(\"*\"));","return;","String[] tokens = m.group(1).split(\"\\\\s+\", -1);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/cmdline/SqlFile/writeHeader(java.io.PrintWriter,java.lang.String)|,["char[] readBfr = new char[1024];","int i;","StringWriter sWriter = new StringWriter();","InputStreamReader isr = null;","String str;","try","\n\t.....\n"],[<|java+method:///org/hsqldb/cmdline/SqlFile/writeFooter(java.io.PrintWriter,java.lang.String)|,["char[] readBfr = new char[1024];","int i;","StringWriter sWriter = new StringWriter();","InputStreamReader isr = null;","String str;","try","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/DoubleIntIndex/addUnique(int,int)|,["else","doubleCapacity();","if (!sorted)","fastQuickSort();","targetSearchValue = sortOnValues ? value",": key;","\n\t.....\n","hasChanged = true;","if (count != i)","moveRows(i, i + 1, count - i);","keys[i]   = key;","values[i] = value;","count++;","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/DoubleIntIndex/add(int,int)|,["else","doubleCapacity();","if (!sorted)","fastQuickSort();","targetSearchValue = sortOnValues ? value",": key;","\n\t.....\n","hasChanged = true;","if (count != i)","moveRows(i, i + 1, count - i);","keys[i]   = key;","values[i] = value;","count++;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/lib/DoubleIntIndex/binarySlotSearch()|,["int low     = 0;","int high    = count;","int mid     = 0;","int compare = 0;","while (low \< high)","mid     = (low + high) / 2;","compare = compare(mid);","\n\t.....\n"],[<|java+method:///org/hsqldb/lib/DoubleIntIndex/binaryEmptySlotSearch()|,["int low     = 0;","int high    = count;","int mid     = 0;","int compare = 0;","while (low \< high)","mid     = (low + high) / 2;","compare = compare(mid);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClob/setAsciiStream(long)/$anonymous1/close()|,["public synchronized void close() throws java.io.IOException","try","JDBCClob.this.setString(pos,","new String(toByteArray(), \"US-ASCII\"));","catch (SQLException se)","throw JavaSystem.toIOException(se);","finally","super.close();","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClob/setAsciiStream(long)|,["public synchronized void close() throws java.io.IOException","try","JDBCClob.this.setString(pos,","new String(toByteArray(), \"US-ASCII\"));","catch (SQLException se)","throw JavaSystem.toIOException(se);","finally","super.close();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCClob/setAsciiStream(long)|,["final long pos) throws SQLException","if (!m_createdByConnection)","throw JDBCUtil.notSupported();","checkClosed();","if (pos \< MIN_POS || pos \> MAX_POS)","throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCClob/setCharacterStream(long)|,["final long pos) throws SQLException","if (!m_createdByConnection)","throw JDBCUtil.notSupported();","checkClosed();","if (pos \< MIN_POS || pos \> MAX_POS)","throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/StatementSchema/setOrCheckObjectName(org.hsqldb.Session,org.hsqldb.HsqlNameManager.HsqlName,org.hsqldb.HsqlNameManager.HsqlName,boolean)|,["if (name.schema == null)","name.schema = schemaName == null","? session.getCurrentSchemaHsqlName()",": schemaName;","else","name.schema = session.getSchemaHsqlName(name.schema.name);","if (name.schema == null)","throw Error.error(ErrorCode.X_42505);","if (isSchemaDefinition && schemaName != name.schema)","throw Error.error(ErrorCode.X_42505);","\n\t.....\n"],[<|java+method:///org/hsqldb/StatementSchema/setSchemaName(org.hsqldb.Session,org.hsqldb.HsqlNameManager.HsqlName,org.hsqldb.HsqlNameManager.HsqlName)|,["if (name.schema == null)","name.schema = schemaName == null","? session.getCurrentSchemaHsqlName()",": schemaName;","else","name.schema = session.getSchemaHsqlName(name.schema.name);","if (name.schema == null)","throw Error.error(ErrorCode.X_42505);","if (isSchemaDefinition && schemaName != name.schema)","throw Error.error(ErrorCode.X_42505);","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/jdbc/JDBCBlobFile/getBytes(long,int)|,["catch (SQLException ex)","throw ex;","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","finally","if (is != null)","try","is.close();","catch (Exception ex)","\n\t.....\n"],[<|java+method:///org/hsqldb/jdbc/JDBCBlobFile/position(byte%5B%5D,long)|,["catch (SQLException ex)","throw ex;","catch (Exception ex)","throw JDBCUtil.sqlException(ex);","finally","if (is != null)","try","is.close();","catch (Exception ex)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/FunctionSQL/getValue(org.hsqldb.Session,java.lang.Object%5B%5D)|,["case FUNCTION_TRANSCODING :","break;","case FUNCTION_TRANSLITERATION :","break;","case FUNCTION_REGEX_TRANSLITERATION :","break;","case FUNC_TRIM_CHAR :","\n\t.....\n"],[
    <|java+method:///org/hsqldb/FunctionSQL/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["case FUNCTION_TRANSCODING :","break;","case FUNCTION_TRANSLITERATION :","break;","case FUNCTION_REGEX_TRANSLITERATION :","break;","case FUNC_TRIM_CHAR :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/FunctionSQL/getSQL()|,["case FUNCTION_TRANSCODING :","break;","case FUNCTION_TRANSLITERATION :","break;","case FUNCTION_REGEX_TRANSLITERATION :","break;","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/FunctionSQL/resolveTypes(org.hsqldb.Session,org.hsqldb.Expression)|,["break;","case FUNC_CURRENT_CATALOG :","case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :","case FUNC_CURRENT_PATH :","case FUNC_CURRENT_ROLE :","case FUNC_CURRENT_SCHEMA :","case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :","case FUNC_CURRENT_USER :","case FUNC_SESSION_USER :","case FUNC_SYSTEM_USER :","case FUNC_USER :","\n\t.....\n"],[<|java+method:///org/hsqldb/FunctionSQL/getSQL()|,["break;","case FUNC_CURRENT_CATALOG :","case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :","case FUNC_CURRENT_PATH :","case FUNC_CURRENT_ROLE :","case FUNC_CURRENT_SCHEMA :","case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :","case FUNC_CURRENT_USER :","case FUNC_SESSION_USER :","case FUNC_SYSTEM_USER :","case FUNC_USER :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/NumberType/getPrecision()|,["case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","return 64;","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","return (int) precision;","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");","\n\t.....\n"],[<|java+method:///org/hsqldb/types/NumberType/getNumericPrecisionInRadix()|,["case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","return 64;","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","return (int) precision;","default :","throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/NumberType/convertToType(org.hsqldb.SessionInterface,java.lang.Object,org.hsqldb.types.Type)|,["case Types.SQL_BIGINT :","return convertToLong(session, a);","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","return convertToDouble(a);","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"],[<|java+method:///org/hsqldb/types/NumberType/convertToDefaultType(org.hsqldb.SessionInterface,java.lang.Object)|,["case Types.SQL_BIGINT :","return convertToLong(session, a);","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","return convertToDouble(a);","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/NumberType/convertToInt(org.hsqldb.SessionInterface,java.lang.Object,int)|,["else if (a instanceof Double || a instanceof Float)","double d = ((Number) a).doubleValue();","if (session instanceof Session)","if (!((Session) session).database.sqlConvertTruncate)","d = java.lang.Math.rint(d);","if (Double.isInfinite(d) || Double.isNaN(d)","\n\t.....\n"],[<|java+method:///org/hsqldb/types/NumberType/convertToLong(org.hsqldb.SessionInterface,java.lang.Object)|,["else if (a instanceof Double || a instanceof Float)","double d = ((Number) a).doubleValue();","if (session instanceof Session)","if (!((Session) session).database.sqlConvertTruncate)","d = java.lang.Math.rint(d);","if (Double.isInfinite(d) || Double.isNaN(d)","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/NumberType/add(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["if (a == null || b == null)","return null;","switch (typeCode)","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","double ad = ((Number) a).doubleValue();","double bd = ((Number) b).doubleValue();","\n\t.....\n","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","a = convertToDefaultType(null, a);","b = convertToDefaultType(null, b);","BigDecimal abd = (BigDecimal) a;","BigDecimal bbd = (BigDecimal) b;","\n\t.....\n","return convertToTypeLimits(null, abd);","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","int ai = ((Number) a).intValue();","int bi = ((Number) b).intValue();","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/NumberType/subtract(org.hsqldb.Session,java.lang.Object,java.lang.Object,org.hsqldb.types.Type)|,["if (a == null || b == null)","return null;","switch (typeCode)","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","double ad = ((Number) a).doubleValue();","double bd = ((Number) b).doubleValue();","\n\t.....\n","case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","a = convertToDefaultType(null, a);","b = convertToDefaultType(null, b);","BigDecimal abd = (BigDecimal) a;","BigDecimal bbd = (BigDecimal) b;","\n\t.....\n","return convertToTypeLimits(null, abd);","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","int ai = ((Number) a).intValue();","int bi = ((Number) b).intValue();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/NumberType/multiply(java.lang.Object,java.lang.Object)|,["if (a == null || b == null)","return null;","switch (typeCode)","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","double ad = ((Number) a).doubleValue();","double bd = ((Number) b).doubleValue();","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/NumberType/divide(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["if (a == null || b == null)","return null;","switch (typeCode)","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","double ad = ((Number) a).doubleValue();","double bd = ((Number) b).doubleValue();","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/types/NumberType/multiply(java.lang.Object,java.lang.Object)|,["case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","if (!(a instanceof BigDecimal))","a = convertToDefaultType(null, a);","if (!(b instanceof BigDecimal))","b = convertToDefaultType(null, b);","BigDecimal abd = (BigDecimal) a;","BigDecimal bbd = (BigDecimal) b;","\n\t.....\n","return convertToTypeLimits(null, bd);","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","int ai = ((Number) a).intValue();","int bi = ((Number) b).intValue();","\n\t.....\n"],[<|java+method:///org/hsqldb/types/NumberType/divide(org.hsqldb.Session,java.lang.Object,java.lang.Object)|,["case Types.SQL_NUMERIC :","case Types.SQL_DECIMAL :","if (!(a instanceof BigDecimal))","a = convertToDefaultType(null, a);","if (!(b instanceof BigDecimal))","b = convertToDefaultType(null, b);","BigDecimal abd = (BigDecimal) a;","BigDecimal bbd = (BigDecimal) b;","\n\t.....\n","return convertToTypeLimits(null, bd);","case Types.TINYINT :","case Types.SQL_SMALLINT :","case Types.SQL_INTEGER :","int ai = ((Number) a).intValue();","int bi = ((Number) b).intValue();","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/types/NumberType/negate(java.lang.Object)|,["if (a == null)","return null;","switch (typeCode)","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","\n\t.....\n"],[
    <|java+method:///org/hsqldb/types/NumberType/ceiling(java.lang.Object)|,["if (a == null)","return null;","switch (typeCode)","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","\n\t.....\n"]>,
    <|java+method:///org/hsqldb/types/NumberType/floor(java.lang.Object)|,["if (a == null)","return null;","switch (typeCode)","case Types.SQL_REAL :","case Types.SQL_FLOAT :","case Types.SQL_DOUBLE :","\n\t.....\n"]>
  ]>,
  <|java+method:///org/hsqldb/persist/LockFile/pollHeartbeat()|,["throws LockFile.FileSecurityException,","LockFile.LockHeldExternallyException,","LockFile.UnexpectedFileNotFoundException,","LockFile.UnexpectedEndOfFileException,","LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,","LockFile.WrongMagicException","\n\t.....\n"],[<|java+method:///org/hsqldb/persist/LockFile/tryLock()|,["throws LockFile.FileSecurityException,","LockFile.LockHeldExternallyException,","LockFile.UnexpectedFileNotFoundException,","LockFile.UnexpectedEndOfFileException,","LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,","LockFile.WrongMagicException","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/RowAction/getActionType(long)|,["if (action.type == ACTION_DELETE)","if (actionType == ACTION_INSERT)","actionType = ACTION_INSERT_DELETE;","else","actionType = action.type;","else if (action.type == ACTION_INSERT)","actionType = action.type;","action = action.next;","while (action != null);","return actionType;","\n\t.....\n"],[<|java+method:///org/hsqldb/RowAction/getRollbackType(org.hsqldb.Session)|,["if (action.type == ACTION_DELETE)","if (actionType == ACTION_INSERT)","actionType = ACTION_INSERT_DELETE;","else","actionType = action.type;","else if (action.type == ACTION_INSERT)","actionType = action.type;","action = action.next;","while (action != null);","return actionType;","\n\t.....\n"]>]>,
  <|java+method:///org/hsqldb/RowAction/mergeRollback(org.hsqldb.Session,long,org.hsqldb.Row)|,["if (tail != null)","tail.next = null;","else","if (head == null)","head = tail = action;","else","tail.next = action;","tail      = action;","action = action.next;","while (action != null);","if (head == null)","\n\t.....\n"],[<|java+method:///org/hsqldb/RowAction/mergeToTimestamp(long)|,["if (tail != null)","tail.next = null;","else","if (head == null)","head = tail = action;","else","tail.next = action;","tail      = action;","action = action.next;","while (action != null);","if (head == null)","\n\t.....\n"]>]>
];
}